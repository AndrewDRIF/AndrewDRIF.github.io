<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式 -- 策略模式</title>
      <link href="/2023/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20--%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20--%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-–-策略模式"><a href="#设计模式-–-策略模式" class="headerlink" title="设计模式 – 策略模式"></a>设计模式 – 策略模式</h1><h1 id="一、问题引出"><a href="#一、问题引出" class="headerlink" title="一、问题引出"></a>一、问题引出</h1><p>现在我们有这样一个需求</p><ol><li>有各种鸭子 (比如 野鸭、北京鸭、水鸭等， 鸭子有各种行为，比如 叫、飞行等)</li><li>显示鸭子的信息</li></ol><p>传统的方法是使用继承实现</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214092907516.png" alt="使用继承解决鸭子问题"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;<span class="comment">//显示鸭子信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;鸭子嘎嘎叫~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;鸭子会游泳~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;鸭子会飞翔~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PekingDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;~~北京鸭~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为北京鸭不能飞翔，因此需要重写fly</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京鸭不能飞翔&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToyDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要重写父类的所有方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭不能叫~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭不会游泳~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭不会飞翔~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WildDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 这是野鸭 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是使用继承时我们会产生一些问题</p><ol><li><p>其它鸭子，都继承了 Duck 类，所以 fly 让所有子类都会飞了，这是不正确的</p></li><li><p>上面说的 1 的问题，其实是继承带来的问题：对类的局部改动，尤其超类的局部改动，会影响其他部分。会有溢出效应</p></li><li><p>为了改进 1 问题，我们可以通过覆盖 fly 方法来解决 &#x3D;&gt; 覆盖解决</p></li><li><p>问题又来了，如果我们有一个玩具鸭子 ToyDuck,  </p><p>这样就需要 ToyDuck 去覆盖 Duck 的所有实现的方法 &#x3D;&gt; 解决思路 -》 策略模式 (strategy pattern)</p></li></ol><p>所以继承的时候会导致有的子类不得不重写全部父类方法的问题, 这样会大大增加代码耦合性</p><p>策略模式要做的就是将代码解耦</p><h1 id="二、策略模式基本介绍"><a href="#二、策略模式基本介绍" class="headerlink" title="二、策略模式基本介绍"></a>二、策略模式基本介绍</h1><ol><li><p>策略模式（Strategy Pattern）中，定义<strong>算法族（策略组）</strong>，分别封装起来，让他们之间可以互相替换，</p><p>此模式让<strong>算法的变化</strong>独立于使用<strong>算法的客户</strong></p></li><li><p>这算法体现了几个设计原则，</p><p>第一、把变化的代码从不变的代码中分离出来；</p><p>第二、针对接口编程而不是具体类（定义了策略接口) ；</p><p>第三、多用组合&#x2F;聚合，少用继承（客户通过组合方式使用策略）</p></li></ol><p>从下图可以看到，客户 context 有成员变量 strategy 或者其他的策略接口</p><p>需要使用到哪个接口我们可以在每个接口类的构造器中指定</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214093810983.png" alt="策略模式原理类图"></p><h1 id="三、策略模式解决鸭子问题"><a href="#三、策略模式解决鸭子问题" class="headerlink" title="三、策略模式解决鸭子问题"></a>三、策略模式解决鸭子问题</h1><p>分别封装<strong>行为接口</strong>，实现<strong>算法族</strong>，超类里放<strong>行为接口对象</strong>，在子类里<strong>具体设定行为对象</strong>。</p><p>原则就是：<br>分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立于算法的使用者</p><ol><li><p>在最开始的父类中要定义接口属性</p></li><li><p>在下面的每个具体对象子类中通过构造器初始化父类的接口属性</p></li><li><p>接口及其具体子类要与对象类分离, 这样可以实现解耦</p></li><li><p>接口的子类分别设定接口的具体行为对象</p></li><li><p>在每个对象子类的构造器中将接口子类对象赋值给接口属性</p></li><li><p>以上步骤形成完整的策略模式, 成功将代码进行接口, 使每个对象子类得到自己想要的方法, </p><p>如需新增则直接在接口子类中添加新类即可, 此为可扩展性</p></li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214094935368.png" alt="策略模式解决鸭子问题类图"></p><p>对象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性, 策略接口</span></span><br><span class="line">FlyBehavior flyBehavior;</span><br><span class="line"><span class="comment">//其它属性 &lt;-&gt; 策略接口</span></span><br><span class="line">QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;<span class="comment">//显示鸭子信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;鸭子嘎嘎叫~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;鸭子会游泳~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="keyword">if</span>(flyBehavior != <span class="literal">null</span>) &#123;</span><br><span class="line">flyBehavior.fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PekingDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入FlyBehavor 的对象</span></span><br><span class="line"><span class="comment">//假如北京鸭可以飞翔，但是飞翔技术一般</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PekingDuck</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">flyBehavior = <span class="keyword">new</span> <span class="title class_">BadFlyBehavior</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;~~北京鸭~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToyDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入FlyBehavor 的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ToyDuck</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">flyBehavior = <span class="keyword">new</span> <span class="title class_">NoFlyBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要重写父类的所有方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭不能叫~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;玩具鸭不会游泳~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WildDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器，传入FlyBehavor 的对象</span></span><br><span class="line"><span class="keyword">public</span>  <span class="title function_">WildDuck</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">flyBehavior = <span class="keyword">new</span> <span class="title class_">GoodFlyBehavior</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 这是野鸭 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>; <span class="comment">// 子类具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 飞翔技术一般 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 飞翔技术高超 ~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title class_">FlyBehavior</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 不会飞翔  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">QuackBehavior</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">quack</span><span class="params">()</span>;<span class="comment">//子类实现</span></span><br><span class="line">    <span class="comment">// 有时间自己写, 与飞行方法类似</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.strategy.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">WildDuck</span> <span class="variable">wildDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WildDuck</span>();</span><br><span class="line">wildDuck.fly();<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="type">ToyDuck</span> <span class="variable">toyDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToyDuck</span>();</span><br><span class="line">toyDuck.fly();</span><br><span class="line"></span><br><span class="line"><span class="type">PekingDuck</span> <span class="variable">pekingDuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PekingDuck</span>();</span><br><span class="line">pekingDuck.fly();</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态改变某个对象的行为, 北京鸭 不能飞</span></span><br><span class="line">pekingDuck.setFlyBehavior(<span class="keyword">new</span> <span class="title class_">NoFlyBehavior</span>());</span><br><span class="line">System.out.println(<span class="string">&quot;北京鸭的实际飞翔能力&quot;</span>);</span><br><span class="line">pekingDuck.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、策略模式在-JDK-Arrays-应用的源码分析"><a href="#四、策略模式在-JDK-Arrays-应用的源码分析" class="headerlink" title="四、策略模式在 JDK-Arrays 应用的源码分析"></a>四、策略模式在 JDK-Arrays 应用的源码分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">Integer[] data = &#123; <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">// 实现降序排序，返回-1 放左边，1 放右边，0 保持不变</span></span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">// 1. 实现了 Comparator 接口（策略接口） , 匿名类 对象 new Comparator&lt;Integer&gt;()&#123;..&#125;</span></span><br><span class="line"><span class="comment">// 2. 对象 new Comparator&lt;Integer&gt;()&#123;..&#125; 就是实现了 策略接口 的对象</span></span><br><span class="line"><span class="comment">// 3. public int compare(Integer o1, Integer o2)&#123;&#125; 指定具体的处理方式</span></span><br><span class="line">Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (o1 &gt; o2) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) &#123;</span></span><br><span class="line"><span class="comment">            if (c == null) &#123;</span></span><br><span class="line"><span class="comment">            sort(a); //默认方法</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                if (LegacyMergeSort.userRequested)</span></span><br><span class="line"><span class="comment">                legacyMergeSort(a, c); //使用策略对象 c</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                // 使用策略对象 c</span></span><br><span class="line"><span class="comment">                TimSort.sort(a, 0, a.length, c, null, 0, 0);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//方式 1</span></span><br><span class="line">Arrays.sort(data, comparator);</span><br><span class="line">System.out.println(Arrays.toString(data)); <span class="comment">// 降序排序</span></span><br><span class="line"><span class="comment">//方式 2- 同时 lambda 表达式实现 策略模式</span></span><br><span class="line">Integer[] data2 = &#123; <span class="number">19</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">14</span>, <span class="number">13</span> &#125;;</span><br><span class="line">Arrays.sort(data2, (var1, var2) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(var1.compareTo(var2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;data2=&quot;</span> + Arrays.toString(data2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、细节"><a href="#五、细节" class="headerlink" title="五、细节"></a>五、细节</h1><ol><li>策略模式的关键是：分析项目中变化部分与不变部分</li><li>策略模式的核心思想是：多用组合&#x2F;聚合 少用继承；用行为类组合，而不是行为的继承。更有弹性</li><li>体现了 “对修改关闭，对扩展开放” 原则，客户端增加行为不用修改原有代码，只要添加一种策略（或者行为）即可，避免了使用多重转移语句（if..else if..else）</li><li>提供了可以替换继承关系的办法： 策略模式将算法封装在独立的 Strategy 类中使得你可以独立于其 Context 改变它，使它易于切换、易于理解、易于扩展</li><li>需要注意的是：每添加一个策略就要增加一个类，当策略过多是会导致类数目庞大</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于策略模式的支付平台选择系统</title>
      <link href="/2023/02/14/%E5%9F%BA%E4%BA%8E%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/02/14/%E5%9F%BA%E4%BA%8E%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E9%80%89%E6%8B%A9%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="基于策略模式的支付平台选择系统"><a href="#基于策略模式的支付平台选择系统" class="headerlink" title="基于策略模式的支付平台选择系统"></a>基于策略模式的支付平台选择系统</h1><p><strong>摘要：</strong></p><p>基于策略模式的支付平台选择系统可以帮助用户根据不同的需求选择最适合的支付平台，从而提高支付效率和用户体验。该系统使用了策略模式，将支付平台的选择和具体支付实现解耦，使得系统更加灵活和可扩展。通过抽象策略类、具体策略类、上下文类和客户端类的设计，该系统可以轻松支持不同的支付平台，且具有较好的可读性和可维护性。在测试和运行中，该系统表现出良好的性能和稳定性，可以满足大多数用户的支付需求。未来，随着支付技术的不断发展，该系统可以进一步扩展和优化，以适应更多的支付场景和用户需求。</p><p><strong>关键字：</strong></p><p>策略模式，支付平台选择系统</p><h1 id="一、系统论述"><a href="#一、系统论述" class="headerlink" title="一、系统论述"></a>一、系统论述</h1><p>支付平台选择系统是一种常见的电子商务和移动支付系统，它可以通过选择不同的支付平台来实现支付操作。在这种系统中，我们通常会选择一些常见的支付平台，如支付宝、微信支付、银联支付等，并根据用户的需求和系统的实际情况选择合适的支付平台，从而提高支付的效率和安全性。</p><p>基于策略模式的支付平台选择系统是一种常见的实现方式，它将支付平台的选择和具体的支付操作分离开来，通过定义不同的支付策略来实现不同的支付方式。在这种实现方式中，我们通常会定义一个环境类 <code>Context</code>，用于保存当前的支付策略，并提供相应的支付接口，以便在实际的支付操作中使用。同时，我们还会定义一个抽象策略类 <code>PaymentStrategy</code>，用于定义支付的基本操作，并在具体的支付策略中实现具体的支付方式。</p><p>对于支付平台选择系统，我们通常需要考虑以下几个方面：</p><ol><li><p>支付平台的选择：在实际的应用中，我们需要根据不同的用户和场景选择不同的支付平台。比如，对于一些个人用户来说，支付宝和微信支付可能更加方便和快捷；而对于一些企业用户来说，银联支付可能更加安全和可靠。因此，在实际的应用中，我们需要根据具体的需求和系统的实际情况选择合适的支付平台。</p></li><li><p>支付的效率和安全性：在支付平台选择系统中，我们需要考虑支付的效率和安全性。一方面，我们需要选择一个支付平台，能够提供快速、方便、稳定的支付服务，从而保证用户的支付体验；另一方面，我们还需要考虑支付的安全性，采取一些必要的措施，如加密、身份验证、防欺诈等，来保证支付的安全性。</p></li><li><p>系统的可扩展性和可维护性：在实际的应用中，我们需要考虑支付平台选择系统的可扩展性和可维护性。一方面，我们需要支持多个支付平台，并能够方便地切换支付平台，从而满足不同用户和场景的需求；另一方面，我们还需要保证系统的可维护性，采用一些合适的设计模式和工具，如策略模式等，来方便系统的开发、测试和维护。</p></li></ol><h1 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h1><p>构建基于策略模式的支付平台选择系统可以帮助我们解决在支付时选择支付平台的问题。策略模式是一种行为设计模式，其目的是在运行时根据情况选择不同的算法或策略。在支付平台选择系统中，我们可以通过策略模式来选择不同的支付平台，以便满足不同的支付需求。</p><p>首先，我们需要定义一个抽象的策略接口，用于定义不同的支付平台策略。该接口应该包含一些方法，例如支付、退款和查询等，这些方法可以用来实现具体的支付逻辑。然后，我们需要创建一个或多个具体的策略类，实现策略接口并提供具体的支付逻辑。例如，我们可以创建一个支付宝支付策略类、一个微信支付策略类和一个银联支付策略类。</p><p>接下来，我们需要定义一个环境类来管理不同的支付策略。该类应该包含一个成员变量，用于存储当前选定的支付策略。它应该还提供一些方法，例如设置支付策略、获取当前支付策略和执行支付等，这些方法可以用来与具体的支付策略类交互。</p><p>最后，我们可以创建一个客户端类来测试和使用支付平台选择系统。客户端可以通过环境类选择不同的支付策略，并执行支付操作。客户端还可以在运行时更改支付策略，以便在不同的支付需求下选择不同的支付平台。</p><p>基于策略模式的支付平台选择系统可以使我们的代码更加灵活和可扩展。我们可以在不影响其他代码的情况下添加新的支付策略，并在运行时根据不同的需求选择不同的支付平台。此外，该系统还可以使我们的代码更加简洁和易于维护，因为每个支付平台的实现都被封装在单独的策略类中。如果我们需要对某个支付平台进行修改或更新，我们只需要修改相应的策略类，而不需要修改整个系统。</p><p>基于策略模式的支付平台选择系统可以实现在运行时动态选择支付平台的能力，以适应不同的支付场景。这个系统可以包括以下角色和组件：</p><ol><li><p>抽象策略（PaymentStrategy ）：定义支付平台接口，包含支付和退款方法等。</p></li><li><p>具体策略（ConcreteStrategy）：实现不同的支付平台，如支付宝、微信、银联等。</p></li><li><p>支付环境（PaymentContext ）：维护一个对策略对象的引用，以便在需要时调用支付或退款方法。</p></li><li><p>客户端（PaymentClient）：创建环境对象并设置所需的支付策略。</p></li></ol><p>在这个系统中，客户端可以根据实际需要选择不同的支付平台策略，而不必关心支付平台的具体实现。同时，策略模式还可以方便地扩展和替换支付平台策略，以适应不断变化的支付市场和客户需求。</p><h1 id="三、设计"><a href="#三、设计" class="headerlink" title="三、设计"></a>三、设计</h1><ol><li>定义策略接口</li></ol><p>首先，我们需要定义一个策略接口，用于描述所有支付平台策略的通用行为。在 Java 中，可以使用接口来定义策略。以下是支付策略接口的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String orderId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口包含两个方法，用于支付和退款。具体的支付策略类将实现该接口并提供其自己的实现逻辑。</p><ol start="2"><li>实现具体的策略类</li></ol><p>我们需要创建一个或多个具体的策略类，实现支付策略接口并提供具体的支付逻辑。以下是两个具体的策略类代码，分别代表支付宝、微信支付和银联支付：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用支付宝进行支付</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用支付宝进行退款</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用微信支付进行支付</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用微信支付进行退款</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用银联进行支付</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用银联进行退款</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个具体的策略类都实现了支付策略接口，并提供了自己的实现逻辑。例如，<code>AliPayStrategy</code> 实现了 <code>pay()</code> 方法以使用支付宝进行支付、<code>refund()</code> 方法以使用支付宝进行退款。</p><ol start="3"><li>定义环境类</li></ol><p>我们需要定义一个环境类，用于管理不同的支付策略。以下是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentContext</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> PaymentStrategy paymentStrategy;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaymentStrategy</span><span class="params">(PaymentStrategy paymentStrategy)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> PaymentStrategy <span class="title function_">getPaymentStrategy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> paymentStrategy;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    paymentStrategy.pay(amount);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    paymentStrategy.refund(amount);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    paymentStrategy.query(orderId);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类包含一个成员变量 <code>paymentStrategy</code>，用于存储当前选定的支付策略。它还提供了一些方法，例如 <code>setPaymentStrategy()</code> 方法用于设置当前支付</p><h1 id="四、模式实现"><a href="#四、模式实现" class="headerlink" title="四、模式实现"></a>四、模式实现</h1><p>以下是基于策略模式的支付平台选择系统中的 <code>PaymentStrategy</code> 接口的 Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span>; <span class="comment">// 支付方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span>; <span class="comment">// 退款方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>PaymentStrategy</code> 的接口，它包含了两个抽象方法 <code>pay</code> 和 <code>refund</code>，分别用于实现支付和退款的操作。在具体的支付策略类中，我们将会实现这两个方法，以实现具体的支付和退款操作。</p><p>需要注意的是，这里的 <code>amount</code> 参数表示支付或退款的金额，具体的实现可能需要根据实际情况进行调整。此外，还可以在接口中添加其他必要的方法，以实现更加丰富的支付策略。</p><p>以下是基于策略模式的支付平台选择系统中的具体策略类的Java代码，使用支付宝作为支付平台：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String account; <span class="comment">// 支付宝账号</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String password; <span class="comment">// 支付宝密码</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">AlipayStrategy</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.account = account;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.password = password;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用支付宝支付接口实现支付操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用支付宝支付：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用支付宝退款接口实现退款操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用支付宝退款：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>AlipayStrategy</code> 的类，它实现了 <code>PaymentStrategy</code> 接口，并覆盖了 <code>pay</code> 和 <code>refund</code> 方法，以实现支付宝支付和退款的具体操作。在构造函数中，我们传入了支付宝账号和密码等必要参数，以便在实际的支付和退款操作中使用。</p><p>需要注意的是，具体的支付宝支付和退款操作并没有在这里实现，我们只是通过 <code>println</code> 方法输出了一段提示信息。实际的支付和退款操作可能涉及到支付宝的 API 调用和网络通信等细节，需要根据实际情况进行实现。</p><p>以下是基于策略模式的支付平台选择系统中的具体策略类的 Java 代码，使用微信支付作为支付平台：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String appId; <span class="comment">// 微信支付应用ID</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String appKey; <span class="comment">// 微信支付应用密钥</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">WechatPayStrategy</span><span class="params">(String appId, String appKey)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.appId = appId;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.appKey = appKey;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用微信支付接口实现支付操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用微信支付：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用微信退款接口实现退款操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用微信退款：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>WechatPayStrategy</code> 的类，它实现了 <code>PaymentStrategy</code> 接口，并覆盖了 <code>pay</code> 和 <code>refund</code> 方法，以实现微信支付和退款的具体操作。在构造函数中，我们传入了微信支付应用ID和应用密钥等必要参数，以便在实际的支付和退款操作中使用。</p><p>需要注意的是，具体的微信支付和退款操作并没有在这里实现，我们只是通过 <code>println</code> 方法输出了一段提示信息。实际的支付和退款操作可能涉及到微信支付的 API 调用和网络通信等细节，需要根据实际情况进行实现。</p><p>以下是基于策略模式的支付平台选择系统中的具体策略类的Java代码，使用银联作为支付平台：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String merId; <span class="comment">// 银联商户号</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String merKey; <span class="comment">// 银联商户密钥</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UnionPayStrategy</span><span class="params">(String merId, String merKey)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.merId = merId;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.merKey = merKey;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用银联支付接口实现支付操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用银联支付：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 调用银联退款接口实现退款操作</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;使用银联退款：&quot;</span> + amount + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>UnionPayStrategy</code> 的类，它实现了 <code>PaymentStrategy</code> 接口，并覆盖了 <code>pay</code> 和 <code>refund</code> 方法，以实现银联支付和退款的具体操作。在构造函数中，我们传入了银联商户号和商户密钥等必要参数，以便在实际的支付和退款操作中使用。</p><p>需要注意的是，具体的银联支付和退款操作并没有在这里实现，我们只是通过 <code>println</code> 方法输出了一段提示信息。实际的支付和退款操作可能涉及到银联支付的 API 调用和网络通信等细节，需要根据实际情况进行实现。</p><p>以下是基于策略模式的支付平台选择系统中的 <code>PaymentContext</code> 类的 Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentContext</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> PaymentStrategy paymentStrategy;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PaymentContext</span><span class="params">(PaymentStrategy paymentStrategy)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaymentStrategy</span><span class="params">(PaymentStrategy paymentStrategy)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    paymentStrategy.pay(amount);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    paymentStrategy.refund(amount);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>PaymentContext</code> 的类，它包含了一个私有成员变量 <code>paymentStrategy</code>，用于保存当前的支付策略。在构造函数中，我们传入一个初始的支付策略，以便在实际的支付操作中使用。同时，我们还定义了 <code>setPaymentStrategy</code> 方法，可以动态地切换支付策略。</p><p>在 <code>pay</code> 和 <code>refund</code> 方法中，我们通过调用当前支付策略的 <code>pay</code> 和 <code>refund</code> 方法实现具体的支付和退款操作。这样，我们就实现了一个基于策略模式的支付平台选择系统的环境类，它可以通过不同的支付策略来实现不同的支付操作。</p><p>以下是基于策略模式的支付平台选择系统中的 <code>Client</code> 类的 Java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">​<span class="comment">// 选择支付宝支付策略</span></span><br><span class="line"></span><br><span class="line">​<span class="type">PaymentContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentContext</span>(<span class="keyword">new</span> <span class="title class_">AlipayStrategy</span>(<span class="string">&quot;lgf&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">​context.pay(<span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">​context.refund(<span class="number">50.0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​<span class="comment">// 切换为微信支付策略</span></span><br><span class="line"></span><br><span class="line">​context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">WechatPayStrategy</span>(<span class="string">&quot;lgf&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">​context.pay(<span class="number">200.0</span>);</span><br><span class="line"></span><br><span class="line">​context.refund(<span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​<span class="comment">// 切换为银联支付策略</span></span><br><span class="line"></span><br><span class="line">​context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">UnionPayStrategy</span>(<span class="string">&quot;lgf&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">​context.pay(<span class="number">300.0</span>);</span><br><span class="line"></span><br><span class="line">​context.refund(<span class="number">150.0</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为 <code>PaymentClient</code> 的类，它包含了一个 <code>main</code> 方法，用于演示基于策略模式的支付平台选择系统的使用。</p><p>在 <code>main</code> 方法中，我们首先创建了一个 <code>PaymentContext</code> 对象，并选择了支付宝支付策略。然后，我们调用 <code>pay</code> 和 <code>refund</code> 方法，分别进行支付和退款操作。</p><p>接着，我们使用 <code>setPaymentStrategy</code> 方法切换为微信支付策略，并再次调用 <code>pay</code> 和 <code>refund</code> 方法。最后，我们再次使用 <code>setPaymentStrategy</code> 方法切换为银联支付策略，并再次调用 <code>pay</code> 和 <code>refund</code> 方法。</p><p>通过上面的代码，我们可以看到，基于策略模式的支付平台选择系统可以通过不同的支付策略来实现不同的支付和退款操作，从而实现了更加灵活和可扩展的支付系统。</p><h1 id="五、测试与运行"><a href="#五、测试与运行" class="headerlink" title="五、测试与运行"></a>五、测试与运行</h1><p>为了测试和运行基于策略模式的支付平台选择系统，我们可以编写一个简单的客户端程序。下面是代码程序，用于测试基于策略模式的支付平台选择系统：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 创建支付平台选择系统环境</span></span><br><span class="line"></span><br><span class="line">​    <span class="type">PaymentContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentContext</span>();</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 设置支付平台选择策略</span></span><br><span class="line"></span><br><span class="line">​    context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">AlipayStrategy</span>());</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 进行支付</span></span><br><span class="line"></span><br><span class="line">​    context.pay(<span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 修改支付平台选择策略</span></span><br><span class="line"></span><br><span class="line">​    context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">WechatPayStrategy</span>());</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 进行支付</span></span><br><span class="line"></span><br><span class="line">​    context.pay(<span class="number">200.0</span>);</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 修改支付平台选择策略</span></span><br><span class="line"></span><br><span class="line">​    context.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">UnionPayStrategy</span>());</span><br><span class="line"></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">​    <span class="comment">// 进行支付</span></span><br><span class="line"></span><br><span class="line">​    context.pay(<span class="number">300.0</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的程序中，我们首先创建了一个支付平台选择系统环境对象。然后，我们设置支付平台选择策略为支付宝策略，进行了一次支付。接下来，我们修改支付平台选择策略为微信支付策略，进行了第二次支付。最后，我们又修改了支付平台选择策略为银联支付策略，并进行了第三次支付。</p><p>运行上面的程序，我们可以看到以下输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">选择了支付宝作为支付平台。</span><br><span class="line"></span><br><span class="line">支付了100.0元。</span><br><span class="line"></span><br><span class="line">选择了微信支付作为支付平台。</span><br><span class="line"></span><br><span class="line">支付了200.0元。</span><br><span class="line"></span><br><span class="line">选择了银联支付作为支付平台。</span><br><span class="line"></span><br><span class="line">支付了300.0元。</span><br></pre></td></tr></table></figure><p>这表明基于策略模式的支付平台选择系统已经成功地工作了。我们可以看到，环境对象根据不同的策略选择了不同的支付平台，而且我们可以通过修改策略来动态地改变选择的支付平台。同时，我们可以方便地添加新的支付平台，只需要创建新的支付平台策略类并实现支付方法即可。</p><p>总之，基于策略模式的支付平台选择系统是一种非常实用和灵活的设计模式。它将选择支付平台的逻辑和支付平台的具体实现分离开来，使得系统更易于扩展和维护。同时，它还可以帮助我们避免在代码中使用过多的条件语句，提高代码的可读性和可维护性。</p><h1 id="六、效果分析"><a href="#六、效果分析" class="headerlink" title="六、效果分析"></a>六、效果分析</h1><p>基于策略模式的支付平台选择系统可以带来多方面的好处：</p><p>基于策略模式的支付平台选择系统可以带来多方面的好处：</p><ol><li><p>灵活性</p><p>由于基于策略模式的支付平台选择系统将支付平台选择的逻辑和具体的支付平台实现解耦，因此系统更加灵活。通过更换策略对象，系统可以轻松地选择不同的支付平台，而不需要修改任何其他的代码。这使得系统更加易于扩展和维护，同时也更加适应不同的业务场景。</p></li><li><p>可扩展性</p><p>基于策略模式的支付平台选择系统也非常易于扩展。通过添加新的策略类，我们可以轻松地添加新的支付平台，而不需要修改任何其他的代码。这使得系统更加适应变化和发展，也能够帮助我们更好地应对业务需求的变化。</p></li><li><p>可读性</p><p>使用基于策略模式的支付平台选择系统可以使代码更加易于理解和阅读。通过将不同的支付平台实现分离成不同的策略类，我们可以将不同的逻辑分开，减少代码的复杂性。这使得代码更加易于理解和维护，也提高了代码的可读性。</p></li><li><p>代码复用</p><p>通过基于策略模式的支付平台选择系统，我们可以将支付平台的选择逻辑和具体的支付平台实现分离开来，从而使得支付平台的选择逻辑可以被复用。这种代码复用可以减少重复的代码，提高代码的效率和可维护性。</p></li></ol><p>总之，基于策略模式的支付平台选择系统是一种非常实用的设计模式，它可以带来多方面的好处。通过将不同的支付平台实现分离开来，我们可以使系统更加灵活、可扩展、易于理解和维护。这种设计模式可以帮助我们更好地应对业务需求的变化，提高代码的效率和可读性。</p><h1 id="七、课程总结"><a href="#七、课程总结" class="headerlink" title="七、课程总结"></a>七、课程总结</h1><p>在设计模式课程中，我们学习了一些经典的设计模式，这些设计模式可以帮助我们解决各种软件开发中的问题：</p><ol><li><p>创建型模式</p><p>创建型模式是解决对象创建问题的一组设计模式。这些模式可以帮助我们灵活地创建对象，而不需要硬编码它们。在这些模式中，工厂模式是最常用的模式之一，它包括简单工厂模式、工厂方法模式和抽象工厂模式。</p></li><li><p>结构型模式</p><p>结构型模式是解决对象组合问题的一组设计模式。这些模式可以帮助我们将对象组合成更大的结构，并提供更高级别的接口。在这些模式中，适配器模式是最常用的模式之一，它可以将一个类的接口转换成另一个客户端所期望的接口。</p></li><li><p>行为型模式</p><p>行为型模式是解决对象间通信问题的一组设计模式。这些模式可以帮助我们实现对象间的松耦合，并允许我们在运行时动态地改变对象间的行为。在这些模式中，观察者模式和策略模式是最常用的模式之一。观察者模式允许对象之间的松耦合，并在对象之间建立订阅&#x2F;发布的关系。策略模式允许我们定义一系列算法，并将它们封装成一个策略对象，从而可以在运行时动态地改变算法。</p></li></ol><p>在学习设计模式的过程中，我们也学习了一些设计原则。这些原则可以帮助我们写出更好的代码，并避免一些常见的问题。其中最重要的设计原则包括单一职责原则、开闭原则、里氏替换原则、接口隔离原则和依赖倒置原则。</p><p>总的来说，设计模式是一种可以帮助我们解决软件开发中各种问题的工具。通过学习这些模式，我们可以写出更灵活、可扩展、可维护和易于理解的代码。同时，设计模式也可以帮助我们遵循一些重要的设计原则，从而提高我们的代码质量。</p><h1 id="八、相关技术或者产品的发展"><a href="#八、相关技术或者产品的发展" class="headerlink" title="八、相关技术或者产品的发展"></a>八、相关技术或者产品的发展</h1><p>支付平台选择系统是与支付技术和产品密切相关的领域，随着支付技术和市场的不断发展，支付平台选择系统也不断演进和改进。下面是一些与支付平台选择系统相关的技术或产品：</p><p>支付平台选择系统是与支付技术和产品密切相关的领域，随着支付技术和市场的不断发展，支付平台选择系统也不断演进和改进。下面是一些与支付平台选择系统相关的技术或产品：</p><ol><li><p>移动支付：移动支付是指利用移动设备进行支付的一种支付方式，如手机支付、二维码支付等。随着移动设备的普及和移动支付技术的成熟，越来越多的用户使用移动支付进行支付，支付平台选择系统也需要支持移动支付平台的接入和选择。</p></li><li><p>电子钱包：电子钱包是一种电子支付工具，用户可以将钱存储在其中，随时使用。电子钱包可以方便用户进行小额支付和快速结算，同时也有一定的安全性保障。支付平台选择系统需要支持电子钱包的接入和选择。</p></li><li><p>区块链支付：区块链技术在支付领域的应用越来越广泛，区块链支付是指利用区块链技术进行支付的一种支付方式。由于区块链技术的去中心化、安全等特性，区块链支付具有更高的安全性和信任度，但同时也存在着一些技术难题和不足之处。支付平台选择系统需要支持区块链支付平台的接入和选择。</p></li><li><p>第三方支付：第三方支付是指独立于银行、支付机构之外的第三方支付服务机构，如支付宝、微信支付等。第三方支付具有支付便捷、安全等优势，已经成为了目前支付市场的主流。支付平台选择系统需要支持第三方支付平台的接入和选择。</p></li><li><p>人工智能：人工智能技术在支付领域的应用也越来越广泛，如风控、欺诈检测、智能客服等。支付平台选择系统可以通过引入人工智能技术，提高支付的效率和安全性。同时，人工智能技术也可以用来分析用户支付的行为数据，为支付平台选择提供更准确的数据支持。</p></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>刘伟. (2014). Java设计模式 (第2版). 人民邮电出版社.</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习（三）-- 面向对象中级</title>
      <link href="/2023/02/03/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7/"/>
      <url>/2023/02/03/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习（三）–-面向对象中级"><a href="#Java学习（三）–-面向对象中级" class="headerlink" title="Java学习（三）– 面向对象中级"></a>Java学习（三）– 面向对象中级</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2">https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2</a></p></blockquote><blockquote><p>由于从这里开始学习了继承, </p><p>为了避免多种多样的类混在一起影响复习效率</p><p>现在规定每一段演示代码会分成好几个代码块, 如果没有特殊标明, 连续的几个代码块表示一段演示</p><p>特殊标明: 像练习一, 练习二这种明确标志, 就是为了给不同的演示做分割</p></blockquote><blockquote><p>连续代码块的顺序为: 父类 -&gt; 子类 -&gt; 入口类</p><p>所以每段演示的题目 (要求) 一般都在 入口类 中, 这一点要特别注意</p><p>以免在复习的时候不知道自己在看啥</p></blockquote><h1 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h1><h2 id="1-1-作用"><a href="#1-1-作用" class="headerlink" title="1.1 作用"></a>1.1 作用</h2><ol><li>区分相同名字的类</li><li>当类很多时可以很方便地管理类 (比如 Java API 文档)</li><li>控制访问范围</li></ol><h2 id="1-2-基本语法"><a href="#1-2-基本语法" class="headerlink" title="1.2 基本语法"></a>1.2 基本语法</h2><p><code>package 包名</code></p><p>package 表示关键字打包</p><h2 id="1-3-包的本质"><a href="#1-3-包的本质" class="headerlink" title="1.3 包的本质"></a>1.3 包的本质</h2><p>本质就是创建不同的 文件夹&#x2F;目录 保存类文件</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203155832202.png" alt="包的本质"></p><h2 id="1-4-包的命名规则"><a href="#1-4-包的命名规则" class="headerlink" title="1.4 包的命名规则"></a>1.4 包的命名规则</h2><ul><li>只能包含字母, 数字, 下划线, 小圆点</li><li>数字不能用作开头</li><li>不能是关键字或者保留字</li><li>一般是小写字母 + 小圆点</li></ul><p><code>com.公司名.项目名.业务模块名</code></p><h2 id="1-5-常用包"><a href="#1-5-常用包" class="headerlink" title="1.5 常用包"></a>1.5 常用包</h2><ol><li><p>java.lang.*  &#x2F;&#x2F;lang 包是基本包，默认引入，不需要再引入. </p></li><li><p>java.util.*  &#x2F;&#x2F;util 包，系统提供的工具包, 工具类，使用 Scanner</p></li><li><p>java.net.*  &#x2F;&#x2F;网络包，网络开发</p></li><li><p>java.awt.* &#x2F;&#x2F;是做 java 的界面开发，GUI</p></li></ol><h2 id="1-6-导入包"><a href="#1-6-导入包" class="headerlink" title="1.6 导入包"></a>1.6 导入包</h2><p><code>import 包名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:</span></span><br><span class="line"><span class="comment">//老韩建议：我们需要使用到哪个类，就导入哪个类即可，不建议使用 *导入</span></span><br><span class="line"><span class="comment">//import java.util.Scanner; //表示只会引入java.util 包下的 Scanner</span></span><br><span class="line"><span class="comment">//import java.util.*;//表示将java.util 包下的所有类都引入(导入)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Import01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用系统提供 Arrays 完成 数组排序</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;-<span class="number">1</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//比如对其进行排序</span></span><br><span class="line">        <span class="comment">//传统方法是，自己编写排序(冒泡)</span></span><br><span class="line">        <span class="comment">//系统是提供了相关的类，可以方便完成 Arrays</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="comment">//输出排序结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-7-使用细节"><a href="#1-7-使用细节" class="headerlink" title="1.7 使用细节"></a>1.7 使用细节</h2><ol><li>package 的作用是声明当前类所在的包, 需要放在类的最上面, 一个类中最多只有一个 package</li><li>import 指令放在 package 的下面, 在类定义的前面, 可以有很多句, 没有顺序要求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package的作用是声明当前类所在的包，需要放在类(或者文件)的最上面，</span></span><br><span class="line"><span class="comment">// 一个类中最多只有一句package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.pkg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import指令 位置放在package的下面，在类定义前面,可以有多句且没有顺序要求</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PkgDetail</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        Arrays.sort(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="二、访问修饰符"><a href="#二、访问修饰符" class="headerlink" title="二、访问修饰符"></a>二、访问修饰符</h1><ol><li><p>公开级别: 用 <code>public</code> 修饰, 对外公开</p></li><li><p>受保护级别: 用 <code>protected</code> 修饰, 对子类和同一个包中的类公开</p></li><li><p>默认级别: 没有修饰符号, 向同一个包的类公开. </p></li><li><p>私有级别: 用 <code>private</code> 修饰, 只有类本身可以访问,不对外公开.</p></li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203163824836.png" alt="背下来"></p><ol><li>修饰符可以用来修饰类中的属性, 成员方法, 类</li><li>只有 默认和 <code>public</code> 才可以修饰类, 并遵循上述访问权限的特点</li><li>成员方法的访问规则和属性完全一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四个属性,分别使用不同的访问修饰符来修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//在同一类中，可以访问public protected 默认 private 修饰属性和方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n1=&quot;</span> + n1 + <span class="string">&quot; n2=&quot;</span> + n2 + <span class="string">&quot; n3=&quot;</span> + n3 + <span class="string">&quot; n4=&quot;</span> + n4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//在同一类中，可以访问public protected 默认 private 修饰属性和方法</span></span><br><span class="line">        m1();</span><br><span class="line">        m2();</span><br><span class="line">        m3();</span><br><span class="line">        m4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="comment">//在同一个包下，可以访问 public , protected 和 默认修饰属性或方法,不能访问private 属性或方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n1=&quot;</span> + a.n1 + <span class="string">&quot; n2=&quot;</span> + a.n2 +  <span class="string">&quot; n3=&quot;</span> + a.n3 );</span><br><span class="line"></span><br><span class="line">        a.m1();</span><br><span class="line">        a.m2();</span><br><span class="line">        a.m3();</span><br><span class="line">        <span class="comment">//a.m4(); 错误的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span> ();</span><br><span class="line">        a.m1();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有 默认和public 可以修饰类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="三、封装"><a href="#三、封装" class="headerlink" title="三、封装"></a>三、封装</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><p>封装 (encapsulation) 就是把抽象出的数据 <strong>[属性]</strong> 和对数据的操作 <strong>[方法]</strong> 封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作 <strong>[方法]</strong> , 才能对数据进行操作。</p><h2 id="3-2-好处"><a href="#3-2-好处" class="headerlink" title="3.2 好处"></a>3.2 好处</h2><ol><li>可以隐藏实现细节</li><li>可以对数据进行验证, 保证安全合理</li></ol><h2 id="3-3-如何实现"><a href="#3-3-如何实现" class="headerlink" title="3.3 如何实现"></a>3.3 如何实现</h2><ol><li>将属性进行私有化 <code>private</code> (不能直接修改属性)</li><li>提供一个公共的 (public) <code>set</code> 方法, 用来对属性判断赋值 <code>setter</code></li><li>提供一个公共的 (public) <code>get</code> 方法, 用来获取属性的值 <code>getter</code></li><li>还可以将 <code>setter</code> 与构造器结合, 每次调用构造器的时候里面全都是 <code>setter</code> 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.encap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encapsulation01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//如果要使用快捷键alt+r, 需要先配置主类</span></span><br><span class="line">        <span class="comment">//第一次，我们使用鼠标点击形式运算程序，后面就可以用</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">30</span>);</span><br><span class="line">        person.setSalary(<span class="number">30000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">        System.out.println(person.getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们自己使用构造器指定属性</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">80</span>, <span class="number">50000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====smith的信息======&quot;</span>);</span><br><span class="line">        System.out.println(smith.info());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">那么在java中如何实现这种类似的控制呢?</span></span><br><span class="line"><span class="comment">请大家看一个小程序(com.hspedu.encap: Encapsulation01.java),</span></span><br><span class="line"><span class="comment">不能随便查看人的年龄,工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则给默认</span></span><br><span class="line"><span class="comment">年龄, 必须在 1-120, 年龄， 工资不能直接查看 ， name的长度在 2-6字符 之间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  String name; <span class="comment">//名字公开</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">//age 私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary; <span class="comment">//..</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(<span class="type">int</span> n,String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器 alt+insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有三个属性的构造器</span></span><br><span class="line">    <span class="comment">// 将 setter 与 构造器 相结合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.age = age;</span></span><br><span class="line"><span class="comment">//        this.salary = salary;</span></span><br><span class="line">        <span class="comment">//我们可以将set方法写在构造器中，这样仍然可以验证</span></span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自己写setXxx 和 getXxx 太慢，我们使用快捷键</span></span><br><span class="line">    <span class="comment">//然后根据要求来完善我们的代码.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//加入对数据的校验,相当于增加了业务逻辑</span></span><br><span class="line">        <span class="keyword">if</span>(name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;=<span class="number">6</span> ) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名字的长度不对，需要(2-6)个字符，默认名字&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;无名人&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span>) &#123;<span class="comment">//如果是合理范围</span></span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你设置年龄不对，需要在 (1-120), 给默认年龄18 &quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">18</span>;<span class="comment">//给一个默认年龄</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//可以这里增加对当前对象的权限判断</span></span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法，返回属性信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息为 name=&quot;</span> + name  + <span class="string">&quot; age=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.encap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建程序,在其中定义两个类：Account和AccountTest类体会Java的封装性。</span></span><br><span class="line"><span class="comment"> * Account类要求具有属性：姓名（长度为2位3位或4位）、余额(必须&gt;20)、</span></span><br><span class="line"><span class="comment"> * 密码（必须是六位）, 如果不满足，则给出提示信息，并给默认值(程序员自己定)</span></span><br><span class="line"><span class="comment"> * 通过setXxx的方法给Account 的属性赋值。</span></span><br><span class="line"><span class="comment"> * 在AccountTest中测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">//为了封装，将3个属性设置为private</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供两个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String name, <span class="type">double</span> balance, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setName(name);</span><br><span class="line">        <span class="built_in">this</span>.setBalance(balance);</span><br><span class="line">        <span class="built_in">this</span>.setPwd(pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名（长度为2位3位或4位）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt;= <span class="number">2</span> &amp;&amp; name.length() &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名要求（长度为2位3位或4位），默认值 无名&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;无名&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//余额(必须&gt;20)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额(必须&gt;20) 默认为0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码（必须是六位）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pwd.length() == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;密码（必须是六位）默认密码为 000000&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.pwd = <span class="string">&quot;000000&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示账号信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//可以增加权限的校验</span></span><br><span class="line">        System.out.println(<span class="string">&quot;账号信息 name=&quot;</span> + name + <span class="string">&quot; 余额=&quot;</span> + balance + <span class="string">&quot; 密码&quot;</span> + pwd);</span><br><span class="line"><span class="comment">//        if() &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;账号信息 name=&quot; + name + &quot; 余额=&quot; + balance + &quot; 密码&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;你无权查看...&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.encap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Account</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">        account.setName(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        account.setBalance(<span class="number">60</span>);</span><br><span class="line">        account.setPwd(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        account.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h1><p>继承可以解决代码复用, 让我们的编程更加靠近人类思维. 当多个类存在相同的属性 (变量) 和 方法 时, 可以从这些类中抽象出父类, 在父类中定义这些相同的 属性 和 方法，所有的子类不需要重新定义这些属性和方法，只需要通过 <code>extends</code> 来声明继承父类即可。</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203165001293.png" alt="继承"></p><h2 id="4-2-继承的基本语法"><a href="#4-2-继承的基本语法" class="headerlink" title="4.2 继承的基本语法"></a>4.2 继承的基本语法</h2><blockquote><p>class 子类 extends 父类 {</p><p>}</p></blockquote><ol><li>子类会自动拥有父类定义的属性和方法</li><li>父类又叫 超类, 基类</li><li>子类又叫 派生类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hspedu.extend_.Graduate;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.extend_.Pupil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Extends01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        com.hspedu.extend_.<span class="type">Pupil</span> <span class="variable">pupil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pupil</span>();</span><br><span class="line">        pupil.name = <span class="string">&quot;银角大王~&quot;</span>;</span><br><span class="line">        pupil.age = <span class="number">11</span>;</span><br><span class="line">        pupil.testing();</span><br><span class="line">        pupil.setScore(<span class="number">50</span>);</span><br><span class="line">        pupil.showInfo();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        com.hspedu.extend_.<span class="type">Graduate</span> <span class="variable">graduate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graduate</span>();</span><br><span class="line">        graduate.name = <span class="string">&quot;金角大王~&quot;</span>;</span><br><span class="line">        graduate.age = <span class="number">23</span>;</span><br><span class="line">        graduate.testing();</span><br><span class="line">        graduate.setScore(<span class="number">80</span>);</span><br><span class="line">        graduate.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.improve_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graduate</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;<span class="comment">//和Pupil不一样</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大学生 &quot;</span> + name + <span class="string">&quot; 正在考大学数学..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.improve_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让Pupil 继承 Student类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pupil</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小学生 &quot;</span> + name + <span class="string">&quot;  正在考小学数学..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.improve_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类,是Pupil 和 Graduate的父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//共有属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;<span class="comment">//成绩</span></span><br><span class="line">    <span class="comment">//共有的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生名 &quot;</span> + name + <span class="string">&quot; 年龄 &quot;</span> + age + <span class="string">&quot; 成绩 &quot;</span> + score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3-好处"><a href="#4-3-好处" class="headerlink" title="4.3 好处"></a>4.3 好处</h2><ol><li>代码复用性提高</li><li>代码的扩展性和维护性提高</li></ol><h2 id="4-4-使用细节"><a href="#4-4-使用细节" class="headerlink" title="4.4 使用细节"></a>4.4 使用细节</h2><ol><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问,  但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p></li><li><p>子类必须调用父类的构造器， 完成父类的初始化 <code>super</code></p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过(怎么理解。) [举例说明]</p></li><li><p>如果希望指定去调用父类的某个构造器，则显式的调用一下 : <code>super (参数列表)</code></p></li><li><p><code>super</code> 在使用时，必须放在构造器第一行 (super 只能在构造器中使用)</p></li><li><p><code>super()</code> 和 <code>this()</code> 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p><blockquote><p>注意 不管怎么样子类都会通过某一个方法调用 super 的</p></blockquote></li><li><p>java 所有类都是 Object 类的子类, Object 是所有类的基类. </p></li><li><p>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类 (顶级父类)</p></li><li><p>子类最多只能继承一个父类 (指直接继承)，即 java 中是单继承机制。思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】</p></li><li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;===第1个对象====&quot;);</span></span><br><span class="line"><span class="comment">//        Sub sub = new Sub(); //创建了子类对象 sub</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;===第2个对象====&quot;);</span></span><br><span class="line"><span class="comment">//        Sub sub2 = new Sub(&quot;jack&quot;); //创建了子类对象 sub2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===第3对象====&quot;</span>);</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>(<span class="string">&quot;king&quot;</span>, <span class="number">10</span>); <span class="comment">//创建了子类对象 sub2</span></span><br><span class="line">        <span class="comment">//sub.sayOk();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopBase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); Object的无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造器TopBase() 被调用...&quot;</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123; <span class="comment">//无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        <span class="comment">//默认super()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类提供一个public的方法,返回了n4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test200&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test300&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test400&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//call</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callTest400</span><span class="params">()</span> &#123;</span><br><span class="line">        test400();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入ctrl + H 可以看到类的继承关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123; <span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 老师要调用父类的无参构造器, 如下或者 什么都不写,默认就是调用super()</span></span><br><span class="line">        <span class="comment">//super();//父类的无参构造器</span></span><br><span class="line">        <span class="comment">//2. 老师要调用父类的 Base(String name) 构造器</span></span><br><span class="line">        <span class="comment">//super(&quot;hsp&quot;);</span></span><br><span class="line">        <span class="comment">//3. 老师要调用父类的 Base(String name, int age) 构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;king&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//细节： super在使用时，必须放在构造器第一行</span></span><br><span class="line">        <span class="comment">//细节: super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span></span><br><span class="line">        <span class="comment">//this() 不能再使用了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;<span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//super(); //默认调用父类的无参构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//do nothing...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span> &#123;<span class="comment">//子类方法</span></span><br><span class="line">        <span class="comment">//非私有的属性和方法可以在子类直接访问</span></span><br><span class="line">        <span class="comment">//但是私有属性和方法不能在子类直接访问</span></span><br><span class="line">        System.out.println(n1 + <span class="string">&quot; &quot;</span> + n2 + <span class="string">&quot; &quot;</span> + n3);</span><br><span class="line">        test100();</span><br><span class="line">        test200();</span><br><span class="line">        test300();</span><br><span class="line">        <span class="comment">//test400();错误</span></span><br><span class="line">        <span class="comment">//要通过父类提供公共的方法去访问</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n4=&quot;</span> + getN4());</span><br><span class="line">        callTest400();<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-5-继承的本质-※"><a href="#4-5-继承的本质-※" class="headerlink" title="4.5 继承的本质 (※)"></a>4.5 继承的本质 (※)</h2><ol><li>现在方法区中加载类, 并识别类之间的继承关系</li><li>然后先从 最顶级的父类开始加载 <code>Object -&gt; GrandPa -&gt; Father -&gt; Son</code> , 将他们的属性及方法加载出来</li><li>先加载 GrandPa 类的两个属性, 再加载 Father 类的两个属性, 再加载 Son 类的属性</li><li>调用属性时遵循就近原则, 如果子类没有就向上找, 没有就一直向上找, 如果没有或者无访问权限就报错</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.extend_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 讲解继承的本质</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();<span class="comment">//内存的布局</span></span><br><span class="line">        <span class="comment">//?-&gt; 这时请大家注意，要按照查找关系来返回信息</span></span><br><span class="line">        <span class="comment">//(1) 首先看子类是否有该属性</span></span><br><span class="line">        <span class="comment">//(2) 如果子类有这个属性，并且可以访问，则返回信息</span></span><br><span class="line">        <span class="comment">//(3) 如果子类没有这个属性，就看父类有没有这个属性(如果父类有该属性，并且可以访问，就返回信息..)</span></span><br><span class="line">        <span class="comment">//(4) 如果父类没有就按照(3)的规则，继续找上级父类，直到Object...</span></span><br><span class="line">        System.out.println(son.name);<span class="comment">//返回就是大头儿子</span></span><br><span class="line">        <span class="comment">//System.out.println(son.age);//返回的就是39</span></span><br><span class="line">        <span class="comment">//System.out.println(son.getAge());//返回的就是39</span></span><br><span class="line">        System.out.println(son.hobby);<span class="comment">//返回的就是旅游</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandPa</span> &#123; <span class="comment">//爷类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爷爷&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hobby</span> <span class="operator">=</span> <span class="string">&quot;旅游&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">GrandPa</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头爸爸&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">39</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;大头儿子&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203171622067.png" alt="继承的本质"></p><h2 id="4-6-练习"><a href="#4-6-练习" class="headerlink" title="4.6 练习"></a>4.6 练习</h2><ul><li>练习一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//A类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是A类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123; <span class="comment">//B类,继承A类//main方法中： C c =new C(); 输出么内容? 3min</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是B类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;我是B类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;   <span class="comment">//C类，继承 B类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是c类的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;hahah&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我是c类的有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>练习二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PC</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PC</span>(<span class="string">&quot;intel&quot;</span>, <span class="number">16</span>, <span class="number">500</span>, <span class="string">&quot;IBM&quot;</span>);</span><br><span class="line">        pc.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写Computer类，包含CPU、内存、硬盘等属性，getDetails方法用于返回Computer的详细信息</span></span><br><span class="line"><span class="comment">编写PC子类，继承Computer类，添加特有属性【品牌brand】</span></span><br><span class="line"><span class="comment">编写NotePad子类，继承Computer类，添加特有属性【color】//同学们自己写。</span></span><br><span class="line"><span class="comment">编写Test类，在main方法中创建PC和NotePad对象，分别给对象中特有的属性赋值，</span></span><br><span class="line"><span class="comment">以及从Computer类继承的属性赋值，并使用方法并打印输出信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.exercise;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写PC子类，继承Computer类，添加特有属性【品牌brand】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PC</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="comment">//这里IDEA 根据继承的规则，自动把构造器的调用写好</span></span><br><span class="line">    <span class="comment">//这里也体现： 继承设计的基本思想，父类的构造器完成父类属性初始化</span></span><br><span class="line">    <span class="comment">//子类的构造器完成子类属性初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PC</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk, String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cpu, memory, disk);</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PC信息=&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(getCpu() + getMemory() + getDisk());</span></span><br><span class="line">        <span class="comment">//调用父类的getDetails方法，得到相关属性信息..</span></span><br><span class="line">        System.out.println(getDetails() + <span class="string">&quot; brand=&quot;</span> + brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.extend_.exercise;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写Computer类，包含CPU、内存、硬盘等属性，getDetails方法用于返回Computer的详细信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> disk;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, <span class="type">int</span> memory, <span class="type">int</span> disk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">        <span class="built_in">this</span>.disk = disk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回Computer信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cpu=&quot;</span> + cpu + <span class="string">&quot; memory=&quot;</span> + memory + <span class="string">&quot; disk=&quot;</span> + disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(<span class="type">int</span> memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> disk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDisk</span><span class="params">(<span class="type">int</span> disk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.disk = disk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="五、super"><a href="#五、super" class="headerlink" title="五、super"></a>五、super</h1><blockquote><p>super 代表父类的引用，用于<strong>访问父类的属性、方法、构造</strong>器</p></blockquote><h2 id="5-1-基本语法"><a href="#5-1-基本语法" class="headerlink" title="5.1 基本语法"></a>5.1 基本语法</h2><ol><li>访问父类的属性 (不能访问父类的 private 属性) <code>super.属性名</code></li><li>访问父类的方法 (不能访问父类的 private 方法) <code>super.方法名(参数列表)</code></li><li>访问父类的构造器 <code>super(参数列表);</code> 只能放在构造器的第一句l,只能出现一句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.super_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Super01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//子类对象</span></span><br><span class="line">        <span class="comment">//b.sum();</span></span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.super_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的eat().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.super_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="comment">//public int n1 = 100;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void cal() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;A类的cal() 方法...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.super_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；</span></span><br><span class="line">        <span class="comment">// 如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则。A-&gt;B-&gt;C</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;super.n1=&quot;</span> + <span class="built_in">super</span>.n1);</span><br><span class="line">        <span class="built_in">super</span>.cal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类的属性 , 但不能访问父类的private属性 [案例]super.属性名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n2 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n3 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的sum()&quot;</span>);</span><br><span class="line">        <span class="comment">//希望调用父类-A 的cal方法</span></span><br><span class="line">        <span class="comment">//这时，因为子类B没有cal方法，因此我可以使用下面三种方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法时(cal() 和 this.cal())，顺序是:</span></span><br><span class="line">        <span class="comment">// (1)先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">// (3)如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找方法的过程中，没有找到，则提示方法不存在</span></span><br><span class="line">        <span class="comment">//cal();</span></span><br><span class="line">        <span class="built_in">this</span>.cal(); <span class="comment">//等价 cal</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法(super.call()) 的顺序是直接查找父类，其他的规则一样</span></span><br><span class="line">        <span class="comment">//super.cal();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示访问属性的规则</span></span><br><span class="line">        <span class="comment">//n1 和 this.n1 查找的规则是</span></span><br><span class="line">        <span class="comment">//(1) 先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">//(2) 如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">//(3) 如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找属性的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找属性的过程中，没有找到，则提示属性不存在</span></span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找n1 (super.n1) 的顺序是直接查找父类属性，其他的规则一样</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的方法，不能访问父类的private方法 super.方法名(参数列表);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.test100();</span><br><span class="line">        <span class="built_in">super</span>.test200();</span><br><span class="line">        <span class="built_in">super</span>.test300();</span><br><span class="line">        <span class="comment">//super.test400();//不能访问父类private方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的构造器(这点前面用过)：super(参数列表);只能放在构造器的第一句，只能出现一句！</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        <span class="comment">//super(&quot;jack&quot;, 10);</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-2-好处"><a href="#5-2-好处" class="headerlink" title="5.2 好处"></a>5.2 好处</h2><ol><li><p>调用父类构造器, 分工明确, 父类属性由父类构造器初始化, 子类属性由子类构造器初始化</p></li><li><p>当子类中有和父类中的成员 (属性 或 方法) 重名时, 为了访问父类的成员, 必须通过 super</p><p>如果没有重名, 使用 super, this, 啥都不用 效果一样</p></li><li><p>super 的访问不限于直接父类, 如果爷爷类和本类中有同名的成员, 也可以使用 super 去访问爷爷类的成员, 如果多个基类 (上级类) 中都有同名的成员, 使用 super 访问遵循就近原则, 也遵守访问权限相关规则</p></li></ol><h2 id="5-3-super-amp-this"><a href="#5-3-super-amp-this" class="headerlink" title="5.3 super &amp; this"></a>5.3 super &amp; this</h2><p>super 跟 this 很像, 就是找属性或方法时直接跳过本类找父类</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203172951786.png" alt="super 和 this 的比较"></p><hr><h1 id="六、方法重写-覆盖"><a href="#六、方法重写-覆盖" class="headerlink" title="六、方法重写 (覆盖)"></a>六、方法重写 (覆盖)</h1><blockquote><p>子类和父类的某个<strong>方法</strong>名称, 返回类型, 参数一样, 那么就说子类的这个方法重写 (覆盖) 了父类的方法 (属性没有重写一说)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物叫唤..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AAA <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//老韩解读</span></span><br><span class="line">    <span class="comment">//1. 因为Dog 是 Animal子类</span></span><br><span class="line">    <span class="comment">//2. Dog的 cry方法和 Animal的 cry定义形式一样(名称、返回类型、参数)</span></span><br><span class="line">    <span class="comment">//3. 这时我们就说 Dog的cry方法，重写了Animal的cry方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗汪汪叫..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//细节: 子类方法的返回类型和父类方法返回类型一样，</span></span><br><span class="line">    <span class="comment">//      或者是父类返回类型的子类比如 父类 返回类型是 Object ,</span></span><br><span class="line">    <span class="comment">//      子类方法返回类型是String</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里Object 不是 String的子类，因此编译错误</span></span><br><span class="line"><span class="comment">//    public Object m2() &#123;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public BBB m3() &#123;</span></span><br><span class="line"><span class="comment">//        return null;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//细节: 子类方法不能缩小父类方法的访问权限 【演示】</span></span><br><span class="line">    <span class="comment">//public &gt; protected &gt; 默认&gt;private</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BBB</span> <span class="keyword">extends</span> <span class="title class_">AAA</span>  &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Override01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示方法重写的情况</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.cry();<span class="comment">//ctrl+b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-1-使用细节"><a href="#6-1-使用细节" class="headerlink" title="6.1 使用细节"></a>6.1 使用细节</h2><ol><li><p>子类方法的<strong>形参列表, 方法名称</strong>, 要和父类方法的<strong>形参列表, 方法名称</strong>完全一样</p></li><li><p>子类方法的返回类型和父类方法的返回类型一样, 或者是父类返回类型的子类</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203173543441.png" alt="返回类型要一样"></p></li><li><p>子类方法不能缩小父类方法的访问权限 (可以一样或扩大)</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203173622653.png" alt="不可以缩小"></p></li></ol><h2 id="6-2-重写-amp-重载"><a href="#6-2-重写-amp-重载" class="headerlink" title="6.2 重写 &amp; 重载"></a>6.2 重写 &amp; 重载</h2><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203173706487.png" alt="重写 &amp; 重载"></p><h2 id="6-3-练习"><a href="#6-3-练习" class="headerlink" title="6.3 练习"></a>6.3 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个Person类，包括属性/private（name、age），构造器、方法say(返回自我介绍的字符串）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot; age=&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个Student类，继承Person类，增加id、score属性/private，以及构造器，定义say方法(返回自我介绍的信息)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);<span class="comment">//这里会调用父类构造器</span></span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//say</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123; <span class="comment">//这里体现super的一个好处，代码复用.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.say() + <span class="string">&quot; id=&quot;</span> + id + <span class="string">&quot; score=&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.override_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverrideExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在main中,分别创建Person和Student对象，调用say方法输出自我介绍</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(jack.say());</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">20</span>, <span class="number">123456</span>, <span class="number">99.8</span>);</span><br><span class="line">        System.out.println(smith.say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="七、多态"><a href="#七、多态" class="headerlink" title="七、多态"></a>七、多态</h1><blockquote><p>方法或对象具有多种形态</p></blockquote><h2 id="7-1-问题引出"><a href="#7-1-问题引出" class="headerlink" title="7.1 问题引出"></a>7.1 问题引出</h2><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203175003372.png" alt="问题引出"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pig</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Food</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bone</span> <span class="keyword">extends</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bone</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">extends</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fish</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rice</span> <span class="keyword">extends</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rice</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Master</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用多态机制，可以统一的管理主人喂食的问题</span></span><br><span class="line">    <span class="comment">//animal 编译类型是Animal,可以指向(接收) Animal子类的对象</span></span><br><span class="line">    <span class="comment">//food 编译类型是Food ,可以指向(接收) Food子类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Animal animal, Food food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人 &quot;</span> + name + <span class="string">&quot; 给 &quot;</span> + animal.getName() + <span class="string">&quot; 吃 &quot;</span> + food.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主人给小狗 喂食 骨头</span></span><br><span class="line"><span class="comment">//    public void feed(Dog dog, Bone bone) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;主人 &quot; + name + &quot; 给 &quot; + dog.getName() + &quot; 吃 &quot; + bone.getName());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    //主人给 小猫喂 黄花鱼</span></span><br><span class="line"><span class="comment">//    public void feed(Cat cat, Fish fish) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;主人 &quot; + name + &quot; 给 &quot; + cat.getName() + &quot; 吃 &quot; + fish.getName());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果动物很多，食物很多</span></span><br><span class="line">    <span class="comment">//===&gt; feed 方法很多，不利于管理和维护</span></span><br><span class="line">    <span class="comment">//Pig --&gt; Rice</span></span><br><span class="line">    <span class="comment">//Tiger ---&gt; meat ...</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用多态机制解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poly01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Master</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>(<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大黄~&quot;</span>);</span><br><span class="line">        <span class="type">Bone</span> <span class="variable">bone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bone</span>(<span class="string">&quot;大棒骨~&quot;</span>);</span><br><span class="line">        tom.feed(dog, bone);</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小花猫~&quot;</span>);</span><br><span class="line">        <span class="type">Fish</span> <span class="variable">fish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fish</span>(<span class="string">&quot;黄花鱼~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===========-------&quot;</span>);</span><br><span class="line">        tom.feed(cat, fish);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加 给小猪为米饭</span></span><br><span class="line">        <span class="type">Pig</span> <span class="variable">pig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&quot;小花猪&quot;</span>);</span><br><span class="line">        <span class="type">Rice</span> <span class="variable">rice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rice</span>(<span class="string">&quot;米饭&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">        tom.feed(pig, rice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-2-方法的多态"><a href="#7-2-方法的多态" class="headerlink" title="7.2 方法的多态"></a>7.2 方法的多态</h2><p>重写 和 重载就体现了多态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//方法重载体现多态</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="comment">//这里我们传入不同的参数，就会调用不同sum方法，就体现多态</span></span><br><span class="line">        System.out.println(a.sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(a.sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法重写体现多态</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        a.say();</span><br><span class="line">        b.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B say() 方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span>&#123;<span class="comment">//和下面sum 构成重载</span></span><br><span class="line">        <span class="keyword">return</span> n1 + n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2, <span class="type">int</span> n3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1 + n2 + n3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A say() 方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-3-对象的多态-※"><a href="#7-3-对象的多态-※" class="headerlink" title="7.3 对象的多态 (※)"></a>7.3 对象的多态 (※)</h2><ol><li>一个对象的百年一类型和运行类型可以不一致</li><li>编译类型在定义对象时就确定了, 不能改变</li><li>运行类型是可变的</li><li>编译类型看定义时 <code>=</code> 左边, 运行类型看 <code>=</code> 右边</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry() 动物在叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat cry() 小猫喵喵叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog cry() 小狗汪汪叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.objectpoly_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//体验对象多态特点</span></span><br><span class="line">        <span class="comment">//animal 编译类型就是 Animal , 运行类型 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//因为运行时 , 执行到改行时，animal运行类型是Dog,所以cry就是Dog的cry</span></span><br><span class="line">        animal.cry(); <span class="comment">//小狗汪汪叫</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//animal 编译类型 Animal,运行类型就是 Cat</span></span><br><span class="line">        animal = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.cry(); <span class="comment">//小猫喵喵叫</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-4-注意事项"><a href="#7-4-注意事项" class="headerlink" title="7.4 注意事项"></a>7.4 注意事项</h2><ul><li>多态的前提是: 两个对象 (类) 之间存在着继承关系</li></ul><h3 id="7-4-1-向上转型"><a href="#7-4-1-向上转型" class="headerlink" title="7.4.1 向上转型"></a>7.4.1 向上转型</h3><ol><li><p>本质: 父类的引用指向了子类的对象 (子类向上转型成了父类)</p></li><li><p>语法: 父类类型 引用名 &#x3D; new 子类类型();</p></li><li><p>特点: </p><ul><li><p>编译类型看左边, 运行类型看右边</p></li><li><p>可以调用父类中的所有成员 (要遵守访问权限)</p></li><li><p>不能调用子类中的特有成员</p></li><li><p>最终运行效果要看子类的具体实现</p><blockquote><p>子类和父类可能具有相同的方法, 此时进行向上转型</p><p>编译的指令是 <code>javac</code>, 编译通过的是父类的方法, 但是此时子类有与父类同名的方法 (重写)</p><p>运行的指令是 <code>java</code>, 与编译的指令无关, 哪个方法通过编译, 哪个方法就可以运行</p><p>则此时运行的方法其实是子类重写过后的与父类同名的方法</p></blockquote></li></ul></li></ol><h3 id="7-4-2-向下转型"><a href="#7-4-2-向下转型" class="headerlink" title="7.4.2 向下转型"></a>7.4.2 向下转型</h3><ol><li><p>语法: 子类类型 引用名 &#x3D; (子类类型) 父类引用; (父类向下转型成了子类)</p></li><li><p>只能强转父类的引用, 不能强转父类的对象 (对象创建出来是啥就是啥, 不能强转)</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p><blockquote><p>就是在这里要对父类的引用进行向下转型时, 要向下转型的这个子类姑且设为 A</p><p>而这个要向下转型的父类在向上转型时, 它当时指向的对象必须是 A 类的对象</p><p>否则不可以被向下转型</p><p>相当于一上一下转回来了, 目的就是使用子类的特有方法</p></blockquote></li><li><p>当向下转型后, 可以调用子类类型中的所有成员</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;<span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;<span class="comment">//Cat特有方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;<span class="comment">//Dog是Animal的子类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型: 父类的引用指向了子类的对象</span></span><br><span class="line">        <span class="comment">//语法：父类类型引用名 = new 子类类型();</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//可以吗? 可以 Object 也是 Cat的父类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型调用方法的规则如下:</span></span><br><span class="line">        <span class="comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span></span><br><span class="line">        <span class="comment">//(2)但是不能调用子类的特有的成员</span></span><br><span class="line">        <span class="comment">//(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        <span class="comment">//animal.catchMouse();错误</span></span><br><span class="line">        <span class="comment">//(4)最终运行效果看子类(运行类型)的具体实现, 即调用方法时，按照从子类(运行类型)开始查找方法</span></span><br><span class="line">        <span class="comment">//，然后调用，规则我前面我们讲的方法调用规则一致。</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼..</span></span><br><span class="line">        animal.run();<span class="comment">//跑</span></span><br><span class="line">        animal.show();<span class="comment">//hello,你好</span></span><br><span class="line">        animal.sleep();<span class="comment">//睡</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师希望，可以调用Cat的 catchMouse方法</span></span><br><span class="line">        <span class="comment">//多态的向下转型</span></span><br><span class="line">        <span class="comment">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span></span><br><span class="line">        <span class="comment">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">        cat.catchMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        <span class="comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>属性没有重写这一说, 属性的值要看编译类型</li></ul><p>编译的时候, 属性就已经确定了, 这跟向上转型思想差不多 (忘了就看看我在上面的分析笔记)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//属性没有重写之说！属性的值看编译类型</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(base.count);<span class="comment">// ？ 看编译类型 10</span></span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(sub.count);<span class="comment">//?  20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>instanceOf</code> 比较操作符，用于判断对象的<strong>运行类型</strong><code>是否为 XX 类型或 XX 类型的子类型</code></li></ul><p><code>A instanceof B</code>, A 是不是 B 的….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.detail_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BB</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  BB);<span class="comment">// true</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  AA);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//aa 编译类型 AA, 运行类型是BB</span></span><br><span class="line">        <span class="comment">//BB是AA子类</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> AA);</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> BB);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> AA);<span class="comment">//false</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(str instanceof AA);</span></span><br><span class="line">        System.out.println(str <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;&#125; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;&#125;<span class="comment">//子类</span></span><br></pre></td></tr></table></figure><h2 id="7-5-动态绑定机制"><a href="#7-5-动态绑定机制" class="headerlink" title="7.5 动态绑定机制"></a>7.5 动态绑定机制</h2><ol><li><p>当调用对象<strong>方法</strong>时, 该方法会和该对象的<strong>内存地址&#x2F;运行类型</strong>绑定</p><blockquote><p>就是先在子类找方法, 没有的话就向上找, 在父类的方法里找, 一直到 Object, 没有的话报错</p><p>对比 继承 那部分的内存图</p></blockquote></li><li><p>当调用对象<strong>属性</strong>时, <strong>没有动态绑定机制</strong>, 哪里声明, 哪里使用</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.dynamic_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//a 的编译类型 A, 运行类型 B</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//向上转型</span></span><br><span class="line">        <span class="comment">// 将子类的 sum() 注释掉</span></span><br><span class="line">        System.out.println(a.sum());<span class="comment">//? 20 + 20 -&gt; 20 + 10</span></span><br><span class="line">        <span class="comment">// 将子类的 sum1() 注释掉</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//? 20 + 10 -&gt; 10 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//动态绑定机制:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;<span class="comment">//父类sum()</span></span><br><span class="line">        <span class="comment">// 这个 getI() 是使用的子类的方法, 只要有同名的就用子类的, 动态转</span></span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;<span class="comment">//20 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;<span class="comment">//父类sum1()</span></span><br><span class="line">        <span class="comment">// 属性没有动态绑定机制,在 A 类中声明的, 就用 A 类的</span></span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;<span class="comment">//10 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//父类getI</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sum() &#123;</span></span><br><span class="line"><span class="comment">//        return i + 20;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;<span class="comment">//子类getI()</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sum1() &#123;</span></span><br><span class="line"><span class="comment">//        return i + 10;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-6-多态数组"><a href="#7-6-多态数组" class="headerlink" title="7.6 多态数组"></a>7.6 多态数组</h2><blockquote><p>数组的定义类型为父类类型，里面保存的实际元素类型为子类类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyarr_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;<span class="comment">//返回名字和年龄</span></span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;\t&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyarr_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写父类say</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生 &quot;</span> + <span class="built_in">super</span>.say() + <span class="string">&quot; score=&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特有的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生 &quot;</span> + getName() + <span class="string">&quot; 正在学java...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyarr_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写重写父类的say方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;老师 &quot;</span> + <span class="built_in">super</span>.say() + <span class="string">&quot; salary=&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师 &quot;</span> + getName() + <span class="string">&quot; 正在讲java课程...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyarr_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//应用实例:现有一个继承结构如下：要求创建1个Person对象、</span></span><br><span class="line">        <span class="comment">// 2个Student 对象和2个Teacher对象, 统一放在数组中，并调用每个对象say方法</span></span><br><span class="line"></span><br><span class="line">        Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">5</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">19</span>, <span class="number">30.1</span>);</span><br><span class="line">        persons[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;scott&quot;</span>, <span class="number">30</span>, <span class="number">20000</span>);</span><br><span class="line">        persons[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;king&quot;</span>, <span class="number">50</span>, <span class="number">25000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环遍历多态数组，调用say</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            <span class="comment">//老师提示: person[i] 编译类型是 Person ,运行类型是是根据实际情况有JVM来判断</span></span><br><span class="line">            System.out.println(persons[i].say());<span class="comment">//动态绑定机制</span></span><br><span class="line">            <span class="comment">//这里大家聪明. 使用 类型判断 + 向下转型.</span></span><br><span class="line">            <span class="keyword">if</span>(persons[i]  <span class="keyword">instanceof</span>  Student) &#123;<span class="comment">//判断person[i] 的运行类型是不是Student</span></span><br><span class="line">                <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student)persons[i];<span class="comment">//向下转型</span></span><br><span class="line">                student.study();</span><br><span class="line">                <span class="comment">//小伙伴也可以使用一条语句 ((Student)persons[i]).study();</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span>  Teacher) &#123;</span><br><span class="line">                <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> (Teacher)persons[i];</span><br><span class="line">                teacher.teach();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(persons[i] <span class="keyword">instanceof</span>  Person)&#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;你的类型有误, 请自己检查...&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你的类型有误, 请自己检查...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-7-多态参数"><a href="#7-7-多态参数" class="headerlink" title="7.7 多态参数"></a>7.7 多态参数</h2><blockquote><p>方法定义的形参类型为父类类型，实参类型允许为子类类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyparameter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到年工资的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12</span> * salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyparameter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary, <span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBonus</span><span class="params">(<span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理 &quot;</span> + getName() + <span class="string">&quot; is managing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写获取年薪方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getAnnual() + bonus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyparameter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通员工 &quot;</span> + getName() + <span class="string">&quot; is working&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnual</span><span class="params">()</span> &#123; <span class="comment">//因为普通员工没有其它收入，则直接调用父类方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getAnnual();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.poly_.polyparameter_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">2500</span>);</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">milan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;milan&quot;</span>, <span class="number">5000</span>, <span class="number">200000</span>);</span><br><span class="line">        <span class="type">PloyParameter</span> <span class="variable">ployParameter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PloyParameter</span>();</span><br><span class="line">        ployParameter.showEmpAnnual(tom);</span><br><span class="line">        ployParameter.showEmpAnnual(milan);</span><br><span class="line"></span><br><span class="line">        ployParameter.testWork(tom);</span><br><span class="line">        ployParameter.testWork(milan);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//showEmpAnnual(Employee e)</span></span><br><span class="line">    <span class="comment">//实现获取任何员工对象的年工资,并在main方法中调用该方法 [e.getAnnual()]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showEmpAnnual</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        System.out.println(e.getAnnual());<span class="comment">//动态绑定机制.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个方法，testWork,如果是普通员工，则调用work方法，如果是经理，则调用manage方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span>  Worker) &#123;</span><br><span class="line">            ((Worker) e).work();<span class="comment">//有向下转型操作</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> Manager) &#123;</span><br><span class="line">            ((Manager) e).manage();<span class="comment">//有向下转型操作</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不做处理...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="八、Object-类详解"><a href="#八、Object-类详解" class="headerlink" title="八、Object 类详解"></a>八、Object 类详解</h1><h2 id="8-1-equals-方法"><a href="#8-1-equals-方法" class="headerlink" title="8.1 equals 方法"></a>8.1 equals 方法</h2><h3 id="8-1-1-和-equals-的对比-面试"><a href="#8-1-1-和-equals-的对比-面试" class="headerlink" title="8.1.1 == 和 equals 的对比 (面试)"></a>8.1.1 <code>==</code> 和 <code>equals</code> 的对比 (面试)</h3><p><code>==</code></p><ol><li>既可以判断基本类型, 又可以判断引用类型</li><li>如果判断基本类型, 判断的是值是否相等</li><li>如果判断引用类型, 判断的是地址是否相等, 即判定是不是一个对象</li></ol><p><code>equals</code></p><ol><li><p>是 Object 类中的方法, 只能判断引用类型 (使用前记得查看 jdk 源码)</p></li><li><p>默认判断的是地址是否相等, 子类中往往重写该方法, 用于判断内容是否相等</p><p>比如 Integer, String (看源码)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> b;</span><br><span class="line">        System.out.println(a == c);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b == c);<span class="comment">//true</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">bObj</span> <span class="operator">=</span> a;</span><br><span class="line">        System.out.println(bObj == c);<span class="comment">//true</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">        System.out.println(num1 == num2);<span class="comment">//基本数据类型，判断值是否相等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals 方法，源码怎么查看.</span></span><br><span class="line">        <span class="comment">//把光标放在equals方法，直接输入ctrl+b</span></span><br><span class="line">        <span class="comment">//如果你使用不了. 自己配置. 即可使用.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //带大家看看Jdk的源码 String类的 equals方法</span></span><br><span class="line"><span class="comment">        //把Object的equals方法重写了,变成了比较两个字符串值是否相同</span></span><br><span class="line"><span class="comment">        public boolean equals(Object anObject) &#123;</span></span><br><span class="line"><span class="comment">        if (this == anObject) &#123;//如果是同一个对象</span></span><br><span class="line"><span class="comment">            return true;//返回true</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (anObject instanceof String) &#123;//判断类型</span></span><br><span class="line"><span class="comment">            String anotherString = (String)anObject;//向下转型</span></span><br><span class="line"><span class="comment">            int n = value.length;</span></span><br><span class="line"><span class="comment">            if (n == anotherString.value.length) &#123;//如果长度相同</span></span><br><span class="line"><span class="comment">                char v1[] = value;</span></span><br><span class="line"><span class="comment">                char v2[] = anotherString.value;</span></span><br><span class="line"><span class="comment">                int i = 0;</span></span><br><span class="line"><span class="comment">                while (n-- != 0) &#123;//然后一个一个的比较字符</span></span><br><span class="line"><span class="comment">                    if (v1[i] != v2[i])</span></span><br><span class="line"><span class="comment">                        return false;</span></span><br><span class="line"><span class="comment">                    i++;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                return true;//如果两个字符串的所有字符都相等，则返回true</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return false;//如果比较的不是字符串，则直接返回false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;hello&quot;</span>.equals(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看看Object类的 equals 是</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //即Object 的equals 方法默认就是比较对象地址是否相同</span></span><br><span class="line"><span class="comment">        //也就是判断两个对象是不是同一个对象.</span></span><br><span class="line"><span class="comment">         public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">            return (this == obj);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //从源码可以看到 Integer 也重写了Object的equals方法,</span></span><br><span class="line"><span class="comment">        //变成了判断两个值是否相同</span></span><br><span class="line"><span class="comment">        public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">            if (obj instanceof Integer) &#123;</span></span><br><span class="line"><span class="comment">                return value == ((Integer)obj).intValue();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(integer1 == integer2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(integer1.equals(integer2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hspedu&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hspedu&quot;</span>);</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-1-2-如何重写-equals-方法"><a href="#8-1-2-如何重写-equals-方法" class="headerlink" title="8.1.2 如何重写 equals 方法"></a>8.1.2 如何重写 equals 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">10</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.equals(person2));<span class="comment">//假</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断两个Person对象的内容是否相等，</span></span><br><span class="line"><span class="comment">//如果两个Person对象的各个属性值都一样，则返回true，反之false</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; <span class="comment">//extends Object</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写Object 的 equals方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="comment">//判断如果比较的两个对象是同一个对象，则直接返回true</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//类型判断</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span>  Person) &#123;<span class="comment">//是Person，我们才比较</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//进行 向下转型, 因为我需要得到obj的 各个属性</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age &amp;&amp; <span class="built_in">this</span>.gender == p.gender;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不是Person ，则直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-1-3-练习"><a href="#8-1-3-练习" class="headerlink" title="8.1.3 练习"></a>8.1.3 练习</h3><ul><li>练习一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EqualsExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person_</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person_</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person_</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person_</span>();</span><br><span class="line">        p2.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p1==p2); <span class="comment">//False</span></span><br><span class="line">        System.out.println(p1.name .equals( p2.name));<span class="comment">//T</span></span><br><span class="line">        System.out.println(p1.equals(p2));<span class="comment">//False</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;asdf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;asdf&quot;</span>);</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//T</span></span><br><span class="line">        System.out.println(s1==s2); <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person_</span>&#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>练习二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码如下 EqualsExercise03.java 2min</span></span><br><span class="line"><span class="type">int</span> <span class="variable">it</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">fl</span> <span class="operator">=</span> <span class="number">65.0f</span>;</span><br><span class="line">System.out.println(“<span class="number">65</span> 和 <span class="number">65.0f</span> 是否相等？” + (it == fl));<span class="comment">//T</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> ‘A’; <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">System.out.println(“<span class="number">65</span> 和‘A’是否相等？” + (it == ch1));<span class="comment">//T</span></span><br><span class="line">System.out.println(“<span class="number">12</span> 和 ch2 是否相等？” + (<span class="number">12</span> == ch2));<span class="comment">//T</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;str1 和 str2 是否相等？&quot;</span>+ (str1 == str2)); <span class="comment">//F</span></span><br><span class="line">System.out.println(“str1 是否 equals str2？”+(str1.equals(str2)));<span class="comment">//T</span></span><br><span class="line">System.out.println(“hello” == <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date());</span><br></pre></td></tr></table></figure><h2 id="8-2-hashCode方法"><a href="#8-2-hashCode方法" class="headerlink" title="8.2 hashCode方法"></a>8.2 hashCode方法</h2><ol><li><p>提高具有哈希结构的容器的效率！</p></li><li><p>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</p></li><li><p>两个引用，如果指向的是不同对象，则哈希值是不一样的</p></li><li><p>哈希值主要根据地址号来的， 不能完全将哈希值等价于地址。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCode_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa3</span> <span class="operator">=</span> aa;</span><br><span class="line">        System.out.println(<span class="string">&quot;aa.hashCode()=&quot;</span> + aa.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;aa2.hashCode()=&quot;</span> + aa2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;aa3.hashCode()=&quot;</span> + aa3.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-3-toString-方法"><a href="#8-3-toString-方法" class="headerlink" title="8.3 toString 方法"></a>8.3 toString 方法</h2><ol><li><p>基本介绍</p><p>默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p></li><li><p>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式. </p></li><li><p>当直接输出一个对象时，toString 方法会被默认的调用, 比如 <code>System.out.println(monster)；</code> 就会默认调用 <code>monster.toString()</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToString_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Object的toString() 源码</span></span><br><span class="line"><span class="comment">        (1)getClass().getName() 类的全类名(包名+类名 )</span></span><br><span class="line"><span class="comment">        (2)Integer.toHexString(hashCode()) 将对象的hashCode值转成16进制字符串</span></span><br><span class="line"><span class="comment">        public String toString() &#123;</span></span><br><span class="line"><span class="comment">            return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Monster</span> <span class="variable">monster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="string">&quot;小妖怪&quot;</span>, <span class="string">&quot;巡山的&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(monster.toString() + <span class="string">&quot; hashcode=&quot;</span> + monster.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==当直接输出一个对象时，toString 方法会被默认的调用==&quot;</span>);</span><br><span class="line">        System.out.println(monster); <span class="comment">//等价 monster.toString()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monster</span><span class="params">(String name, String job, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString方法, 输出对象的属性</span></span><br><span class="line">    <span class="comment">//使用快捷键即可 alt+insert -&gt; toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="comment">//重写后，一般是把对象的属性值输出，当然程序员也可以自己定制</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monster&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fin..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-4-finalize-方法"><a href="#8-4-finalize-方法" class="headerlink" title="8.4 finalize 方法"></a>8.4 finalize 方法</h2><ol><li><p>当对象被回收时，系统自动调用该对象的 <code>finalize 方法</code>。子类可以重写该方法，做一些释放资源的操作</p></li><li><p>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 <code>finalize</code> 方法。</p></li><li><p>垃圾回收机制的调用，是由系统来决定 (即有自己的 GC 算法), 也可以通过 <code>System.gc()</code> 主动触发垃圾回收机制</p></li><li><p>在实际开发中，几乎不会运用 finalize , 所以更多就是为了应付面试.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.object_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示 Finalize的用法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Finalize_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Car</span> <span class="variable">bmw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;宝马&quot;</span>);</span><br><span class="line">        <span class="comment">//这时 car对象就是一个垃圾,垃圾回收器就会回收(销毁)对象, 在销毁对象前，会调用该对象的finalize方法</span></span><br><span class="line">        <span class="comment">//,程序员就可以在 finalize中，写自己的业务逻辑代码(比如释放资源：数据库连接,或者打开文件..)</span></span><br><span class="line">        <span class="comment">//,如果程序员不重写 finalize,那么就会调用 Object类的 finalize, 即默认处理</span></span><br><span class="line">        <span class="comment">//,如果程序员重写了finalize, 就可以实现自己的逻辑</span></span><br><span class="line">        bmw = <span class="literal">null</span>;</span><br><span class="line">        System.gc();<span class="comment">//主动调用垃圾回收器</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出了....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//属性, 资源。。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写finalize</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们销毁 汽车&quot;</span> + name );</span><br><span class="line">        System.out.println(<span class="string">&quot;释放了某些资源...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="九、断点调试"><a href="#九、断点调试" class="headerlink" title="九、断点调试"></a>九、断点调试</h1><blockquote><p>在断点调试过程中, 是运行状态, 是以对象的 运行类型 来执行的</p></blockquote><h2 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 介绍</h2><ol><li>断点调试是指在程序的某一行设置- 个断点，调试时，程序运行到这一行就会停住，然后你可以一步-步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</li><li>断点调试是程序员必须掌握的技能。</li><li>断点调试也能帮助我们查看java底层源代码的执行过程，提高程序员的Java水平。</li></ol><h2 id="9-2-快捷键"><a href="#9-2-快捷键" class="headerlink" title="9.2 快捷键"></a>9.2 快捷键</h2><ul><li>F7( 跳入)  跳入方法内</li><li>F8 (跳过)  逐行执行代码. </li><li>shift+F8 (跳出)  跳出方法</li><li>F9 (resume,执行到下一个断点)</li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230203194507651.png" alt="断点调试快捷键"></p><h2 id="9-3-应用案例"><a href="#9-3-应用案例" class="headerlink" title="9.3 应用案例"></a>9.3 应用案例</h2><ul><li>查看变量的变化情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.debug_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Debug01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示逐行执行代码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">            System.out.println(<span class="string">&quot;sum=&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出for....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>检查数组越界的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.debug_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Debug02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">10</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;退出for&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>追溯源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.debug_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Debug03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">10</span>, -<span class="number">20</span> , <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//我们看看Arrays.sort方法底层实现.-&gt;Debug</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>直接执行到下一个断点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.debug_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示执行到下一个断点，同时支持动态的下断点.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Debug04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">10</span>, -<span class="number">20</span> , <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//我们看看Arrays.sort方法底层实现.-&gt;Debug</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello100&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello200&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello300&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello400&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello500&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello600&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello700&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对象创建过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.debug_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//debug对象创建的过程，加深对调试的理解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象的流程</span></span><br><span class="line">        <span class="comment">//(1) 加载 Person类信息</span></span><br><span class="line">        <span class="comment">//(2) 初始化 2.1默认初始化, 2.2 显式初始化 2.3 构造器初始化</span></span><br><span class="line">        <span class="comment">//(3) 返回对象的地址</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(jack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>还可以根据上一章的代码熟悉 动态绑定机制</li></ul><hr><h1 id="十、练习"><a href="#十、练习" class="headerlink" title="十、练习"></a>十、练习</h1><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181143298.png" alt="练习一"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化Person 对象数组，有3个person对象</span></span><br><span class="line">        Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">3</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>,<span class="number">30</span>, <span class="string">&quot;PHP工程师&quot;</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>,<span class="number">50</span>, <span class="string">&quot;大数据工程师&quot;</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;smith&quot;</span>,<span class="number">10</span>, <span class="string">&quot;JavaEE工程师&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出当前对象数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            System.out.println(persons[i]);<span class="comment">//默认对象的.toString()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用冒泡排序</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//临时变量，用于交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length -<span class="number">1</span> ;i++) &#123;<span class="comment">//外层循环</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; persons.length -<span class="number">1</span> - i; j++) &#123;<span class="comment">//内层循环</span></span><br><span class="line">                <span class="comment">//并按照 age 从 大到 小进行排序, 如果前面的人的age &lt; 后面人的年龄，就交换</span></span><br><span class="line">                <span class="comment">//要求按照名字的长度从小到大 if(persons[i].getName().length() &gt; persons[i+1].getName().length())</span></span><br><span class="line">                <span class="keyword">if</span>(persons[j].getAge() &gt; persons[j+<span class="number">1</span>].getAge()) &#123;</span><br><span class="line">                    tmp = persons[j];</span><br><span class="line">                    persons[j] = persons[j+<span class="number">1</span>];</span><br><span class="line">                    persons[j+<span class="number">1</span>]= tmp;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的效果&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            System.out.println(persons[i]);<span class="comment">//默认对象的.toString()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个Person类 &#123;name, age, job&#125;, 初始化Person 对象数组，有3个person对象，</span></span><br><span class="line"><span class="comment">    并按照 age 从 大到 小进行排序, 提示，使用冒泡排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181215265.png" alt="练习二"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1) 要求有属性“姓名name”，“年龄age”，“职称post”，“基本工资salary”</span></span><br><span class="line"><span class="comment">(2) 编写业务方法， introduce（），实现输出一个教师的信息。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String post;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="comment">//这里我们在增加一个工资级别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age, String post, <span class="type">double</span> salary, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPost</span><span class="params">(String post)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(<span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot; age: &quot;</span> + age</span><br><span class="line">                + <span class="string">&quot; post: &quot;</span> + post + <span class="string">&quot; salary:&quot;</span> + salary + <span class="string">&quot; grade:&quot;</span> + grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Professor</span> <span class="keyword">extends</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有属性...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Professor</span><span class="params">(String name, <span class="type">int</span> age, String post, <span class="type">double</span> salary, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, post, salary, grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 这是教授的信息 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Professor</span> <span class="variable">professor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Professor</span>(<span class="string">&quot;贾宝玉&quot;</span>, <span class="number">30</span>, <span class="string">&quot;高级职称&quot;</span>, <span class="number">30000</span>, <span class="number">1.3</span>);</span><br><span class="line">        professor.introduce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181503515.png" alt="练习三"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//员工属性：姓名，单日工资，工作天数</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> daySal;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> workDays;</span><br><span class="line">    <span class="comment">//分析出还有一个属性等级</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> grade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法[构造器，getter 和 setter]</span></span><br><span class="line">    <span class="comment">//打印工资方法</span></span><br><span class="line">    <span class="comment">//方法 void printSal() &#123;&#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 工资=&quot;</span> + daySal * workDays * grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.daySal = daySal;</span><br><span class="line">        <span class="built_in">this</span>.workDays = workDays;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDaySal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> daySal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDaySal</span><span class="params">(<span class="type">double</span> daySal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.daySal = daySal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkDays</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkDays</span><span class="params">(<span class="type">int</span> workDays)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workDays = workDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getGrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGrade</span><span class="params">(<span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="comment">//分析普通员工没有特有的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, daySal, workDays, grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写printSal</span></span><br><span class="line">    <span class="comment">//因为普通员工和Employee输出工资情况一下，所以直接调用父类的printSal()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;普通员工 &quot;</span>);<span class="comment">//自己的输出信息</span></span><br><span class="line">        <span class="built_in">super</span>.printSal();<span class="comment">//调用父类的方法，复用代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">//特有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line">    <span class="comment">//创建Manager对象时，奖金是多少并不是确定的，因为老师在构造器中，不给bonus</span></span><br><span class="line">    <span class="comment">//,可以通过setBonus</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> daySal, <span class="type">int</span> workDays, <span class="type">double</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, daySal, workDays, grade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法:重写父类的 printSal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//因为经理的工资计算方式和Employee不一样，所以我们重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;经理 &quot;</span> + getName() + <span class="string">&quot; 工资是=&quot;</span></span><br><span class="line">                + (bonus + getDaySal() * getWorkDays() * getGrade()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBonus</span><span class="params">(<span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;刘备&quot;</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">1.2</span>);</span><br><span class="line">        <span class="comment">//设置奖金</span></span><br><span class="line">        manage.setBonus(<span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//打印经理的工资情况</span></span><br><span class="line">        manage.printSal();</span><br><span class="line"></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;关羽&quot;</span>,<span class="number">50</span>, <span class="number">10</span>, <span class="number">1.0</span>);</span><br><span class="line">        worker.printSal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181608906.png" alt="练习四"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//分析有一个带薪的月份 13 , 15, 12</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">salMonth</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//打印全年工资</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 年工资是: &quot;</span> + (sal * salMonth));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salMonth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalMonth</span><span class="params">(<span class="type">int</span> salMonth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salMonth = salMonth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Peasant</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//农民,服务生只有基本工资 sal</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Peasant</span><span class="params">(String name, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//年工资</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;农民 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.printSal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scientist</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123; <span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有属性</span></span><br><span class="line">    <span class="comment">//年终奖 bonus</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Scientist</span><span class="params">(String name, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写年工资打印</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;科学家 &quot;</span>);</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 年工资是: &quot;</span> + (getSal() * getSalMonth() + bonus));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBonus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bonus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBonus</span><span class="params">(<span class="type">double</span> bonus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="comment">//特有属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> classDays; <span class="comment">//一年上课次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> classSal; <span class="comment">//课时费</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sal);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法-重写printSal</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123; <span class="comment">//老师不能使用super.printSal()</span></span><br><span class="line">        System.out.print(<span class="string">&quot;老师 &quot;</span>);</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 年工资是: &quot;</span></span><br><span class="line">                + (getSal() * getSalMonth() + classDays * classSal ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getClassDays</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassDays</span><span class="params">(<span class="type">int</span> classDays)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classDays = classDays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getClassSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classSal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassSal</span><span class="params">(<span class="type">double</span> classSal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classSal = classSal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123; <span class="comment">//子类</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//工人,农民,服务生只有基本工资 sal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;工人 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.printSal();<span class="comment">//使用父类的printSal()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        jack.setSalMonth(<span class="number">15</span>);<span class="comment">//灵活额修改带薪月份</span></span><br><span class="line">        jack.printSal();</span><br><span class="line"></span><br><span class="line">        <span class="type">Peasant</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Peasant</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">20000</span>);</span><br><span class="line">        smith.printSal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师测试</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;顺平&quot;</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//老师有课时费</span></span><br><span class="line">        teacher.setClassDays(<span class="number">360</span>);</span><br><span class="line">        teacher.setClassSal(<span class="number">1000</span>);</span><br><span class="line">        teacher.printSal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//科学家</span></span><br><span class="line">        <span class="type">Scientist</span> <span class="variable">scientist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scientist</span>(<span class="string">&quot;钟南山&quot;</span>, <span class="number">20000</span>);</span><br><span class="line">        scientist.setBonus(<span class="number">2000000</span>);</span><br><span class="line">        scientist.printSal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181814287.png" alt="练习五"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Rose&quot;</span>;</span><br><span class="line">    Test()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test&quot;</span>);<span class="comment">//(1)</span></span><br><span class="line">    &#125;</span><br><span class="line">    Test(String name)&#123;<span class="comment">//name john</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;<span class="comment">//这里把父类的 name 修改 john</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">Test</span>&#123;<span class="comment">//子类</span></span><br><span class="line">    String name=<span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    Demo()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo&quot;</span>);<span class="comment">//(2)</span></span><br><span class="line">    &#125;</span><br><span class="line">    Demo(String s)&#123;</span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);<span class="comment">//(3) Rose (5) john</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);<span class="comment">//(4) Jack (6) Jack</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//老韩分析</span></span><br><span class="line">        <span class="comment">//1. new Demo()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>().test(); <span class="comment">//匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo</span>(<span class="string">&quot;john&quot;</span>).test();<span class="comment">//匿名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214181859524.png" alt="练习六"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance ;<span class="comment">//余额</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(<span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存款</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span>  &#123;</span><br><span class="line">        balance += amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取款</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span>  &#123;</span><br><span class="line">        balance -= amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在上面类的基础上扩展 新类CheckingAccount对每次存款和取款都收取1美元的手续费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckingAccount</span> <span class="keyword">extends</span> <span class="title class_">BankAccount</span>&#123;<span class="comment">//新的账号</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheckingAccount</span><span class="params">(<span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialBalance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;<span class="comment">//存款</span></span><br><span class="line">        <span class="built_in">super</span>.deposit(amount - <span class="number">1</span>);<span class="comment">//巧妙的使用了父类的 deposit</span></span><br><span class="line">        <span class="comment">//1 块钱转入银行的账号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;<span class="comment">//取款</span></span><br><span class="line">        <span class="built_in">super</span>.withdraw(amount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//1 块钱转入银行的账号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">扩展前一个练习的BankAccount类，</span></span><br><span class="line"><span class="comment">新类SavingsAccount每个月都有利息产生(earnMonthlyInterest方法被调用)，</span></span><br><span class="line"><span class="comment">并且有每月三次免手续费的存款或取款。在earnMonthlyInterest方法中重置交易计数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SavingsAccount</span> <span class="keyword">extends</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老韩分析</span></span><br><span class="line">    <span class="comment">//新增加属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">rate</span> <span class="operator">=</span> <span class="number">0.01</span>;<span class="comment">//利率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMonthlyInterest</span><span class="params">()</span> &#123;<span class="comment">//每个月初，我们统计上个月的利息，同时将count=3</span></span><br><span class="line">        count = <span class="number">3</span>;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">super</span>.deposit(getBalance() * rate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否还可以免手续费</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.deposit(amount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.deposit(amount - <span class="number">1</span>);<span class="comment">//1 块转入银行</span></span><br><span class="line">        &#125;</span><br><span class="line">        count--;<span class="comment">//减去一次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;<span class="comment">//取款</span></span><br><span class="line">        <span class="comment">//判断是否还可以免手续费</span></span><br><span class="line">        <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.withdraw(amount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.withdraw(amount + <span class="number">1</span>);<span class="comment">//1 块转入银行</span></span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SavingsAccount</span><span class="params">(<span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialBalance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRate</span><span class="params">(<span class="type">double</span> rate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        CheckingAccount checkingAccount = new CheckingAccount(1000);</span></span><br><span class="line"><span class="comment">//        checkingAccount.deposit(10);// 1010 - 1 = 1009</span></span><br><span class="line"><span class="comment">//        checkingAccount.withdraw(9);//1009 - 9 = 1000 -1= 999</span></span><br><span class="line"><span class="comment">//        System.out.println(checkingAccount.getBalance());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试SavingsAccount</span></span><br><span class="line">        <span class="type">SavingsAccount</span> <span class="variable">savingsAccount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavingsAccount</span>(<span class="number">1000</span>);</span><br><span class="line">        savingsAccount.deposit(<span class="number">100</span>);</span><br><span class="line">        savingsAccount.deposit(<span class="number">100</span>);</span><br><span class="line">        savingsAccount.deposit(<span class="number">100</span>);</span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1300</span></span><br><span class="line">        savingsAccount.deposit(<span class="number">100</span>);</span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1400-1=1399</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//月初，定时器自动调用一下 earnMonthlyInterest</span></span><br><span class="line">        savingsAccount.earnMonthlyInterest();<span class="comment">//统计利息</span></span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1399 + 13.99 =1412.99</span></span><br><span class="line">        savingsAccount.withdraw(<span class="number">100</span>);<span class="comment">//免手续</span></span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1412.99 -100 =1312.99</span></span><br><span class="line">        savingsAccount.withdraw(<span class="number">100</span>);<span class="comment">//免手续</span></span><br><span class="line">        savingsAccount.withdraw(<span class="number">100</span>);<span class="comment">//免手续</span></span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1412.99 -200 =1112.99</span></span><br><span class="line">        savingsAccount.deposit(<span class="number">100</span>);<span class="comment">//扣手续费</span></span><br><span class="line">        System.out.println(savingsAccount.getBalance());<span class="comment">//1112.99 + 100 = 1212.99 - 1 = 1211.99</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214182014783.png" alt="练习七"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LabeledPoint</span> <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">//特有属性</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LabeledPoint</span><span class="params">(String label, <span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y);</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LabeledPoint</span>(<span class="string">&quot;Black&quot;</span>,<span class="number">1929</span>,<span class="number">230.07</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214182140140.png" alt="练习八"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doctor</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//&#123;name, age, job, gender, sal&#125;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line">    <span class="comment">//5个参数的构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Doctor</span><span class="params">(String name, <span class="type">int</span> age, String job, <span class="type">char</span> gender, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//相应的getter()和setter()方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">double</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写父类(Object)的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。相等就是判断属性是否相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="comment">//判断两个比较对象是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断obj 是否是 Doctor类型或其子类</span></span><br><span class="line">        <span class="comment">//过关斩将 校验方式</span></span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Doctor)) &#123; <span class="comment">//不是的话</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型, 因为obj的运行类型是Doctor或者其子类型</span></span><br><span class="line">        <span class="type">Doctor</span> <span class="variable">doctor</span> <span class="operator">=</span> (Doctor)obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(doctor.name) &amp;&amp; <span class="built_in">this</span>.age == doctor.age &amp;&amp;</span><br><span class="line">                <span class="built_in">this</span>.gender == doctor.gender &amp;&amp; <span class="built_in">this</span>.job.equals(doctor.job) &amp;&amp; <span class="built_in">this</span>.sal == doctor.sal;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">Doctor</span> <span class="variable">doctor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Doctor</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">20</span>, <span class="string">&quot;牙科医生&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20000</span>);</span><br><span class="line">        <span class="type">Doctor</span> <span class="variable">doctor2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Doctor</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">21</span>, <span class="string">&quot;牙科医生&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(doctor1.equals(doctor2));<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214182259698.png" alt="练习九"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214182501191.png" alt="练习十"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework13;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽取一个父类Person类，将共同属性和方法放到Person类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;<span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个play 方法, 把共有的输出内容写到父类</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;爱玩&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一个基本信息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    姓名：张飞</span></span><br><span class="line"><span class="comment">    年龄：30</span></span><br><span class="line"><span class="comment">    性别：男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">basicInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名: &quot;</span> + name + <span class="string">&quot;\n年龄: &quot;</span> + age + <span class="string">&quot;\n性别: &quot;</span> + gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework13;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Student类有名称（name），性别(sex),年龄（age），学号（stu_id），</span></span><br><span class="line"><span class="comment">做合理封装，通过构造器在创建对象时将4个属性赋值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学生需要有学习的方法（study），在方法里写生“我承诺，我会好好学习。”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123; <span class="comment">//</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String stu_id;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age, String stu_id)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, gender, age);</span><br><span class="line">        <span class="built_in">this</span>.stu_id = stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStu_id</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStu_id</span><span class="params">(String stu_id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stu_id = stu_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我承诺，我会好好学习</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;承诺，我会好好学习 老韩讲的 java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学生爱玩足球</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.play() + <span class="string">&quot;足球&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个输出信息的方法，这样体现封装</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.basicInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;学号: &quot;</span> + stu_id);</span><br><span class="line">        study();<span class="comment">//组合， 变化万千</span></span><br><span class="line">        System.out.println(play());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stu_id=&#x27;&quot;</span> + stu_id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework13;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写一个Teacher类，Teacher类有名称（name），性别（sex），年龄（age），工龄（work_age),</span></span><br><span class="line"><span class="comment">做合理封装，通过构造器在创建对象时将4个属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> work_age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age, <span class="type">int</span> work_age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, gender, age);</span><br><span class="line">        <span class="built_in">this</span>.work_age = work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWork_age</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWork_age</span><span class="params">(<span class="type">int</span> work_age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.work_age = work_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师需要有教学的方法（teach），在方法里写上“我承诺，我会认真教学。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;承诺，我会认真教学 java...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 老师爱玩象棋</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.play() + <span class="string">&quot;象棋&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出信息方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.basicInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;工龄: &quot;</span> + work_age);</span><br><span class="line">        teach();</span><br><span class="line">        System.out.println(play());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;work_age=&quot;</span> + work_age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework.homework13;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试老师</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;张飞&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        teacher.printInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">15</span>, <span class="string">&quot;00023102&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line">        student.printInfo();<span class="comment">//封装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义多态数组，里面保存2个学生和2个教师，要求按年龄从高到低排序</span></span><br><span class="line">        Person[] persons = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">4</span>];</span><br><span class="line">        persons[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;jack&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">10</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line">        persons[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;mary&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&quot;0002&quot;</span>);</span><br><span class="line">        persons[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;smith&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">36</span>, <span class="number">5</span>);</span><br><span class="line">        persons[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;scott&quot;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">26</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Homework13</span> <span class="variable">homework13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Homework13</span>();</span><br><span class="line">        homework13.bubbleSort(persons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出排序后的数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---排序后的数组-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            System.out.println(persons[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，调用test方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;<span class="comment">//遍历多态数组</span></span><br><span class="line">            homework13.test(persons[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，形参为Person类型，功能：调用学生的study或教师的teach方法</span></span><br><span class="line">    <span class="comment">//分析这里会使用到向下转型和类型判断</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Student) &#123;<span class="comment">//p 的运行类型如果是Student</span></span><br><span class="line">            ((Student) p).study();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p <span class="keyword">instanceof</span>  Teacher) &#123;</span><br><span class="line">            ((Teacher) p).teach();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;do nothing...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法,完成年龄从高到底排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(Person[] persons)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; persons.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//判断条件, 注意这里的条件可以根据需要，变化</span></span><br><span class="line">                <span class="keyword">if</span>(persons[j].getAge() &lt; persons[j+<span class="number">1</span>].getAge()) &#123;</span><br><span class="line">                    temp = persons[j];</span><br><span class="line">                    persons[j] = persons[j + <span class="number">1</span>];</span><br><span class="line">                    persons[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230214182641025.png" alt="练习十一"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AAA</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BBB</span>();<span class="comment">//向上转型</span></span><br><span class="line">        <span class="type">AAA</span> <span class="variable">b1</span> <span class="operator">=</span> obj;</span><br><span class="line">        System.out.println(<span class="string">&quot;obj的运行类型=&quot;</span> + obj.getClass());<span class="comment">//BBB</span></span><br><span class="line">        obj = <span class="keyword">new</span> <span class="title class_">CCC</span>();<span class="comment">//向上转型</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;obj的运行类型=&quot;</span> + obj.getClass());<span class="comment">//CCC</span></span><br><span class="line">        obj = b1;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;obj的运行类型=&quot;</span> + obj.getClass());<span class="comment">//BBB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AAA</span> &#123;<span class="comment">//超类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BBB</span> <span class="keyword">extends</span> <span class="title class_">AAA</span> &#123;<span class="comment">//父类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCC</span> <span class="keyword">extends</span> <span class="title class_">BBB</span> &#123;<span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习（二）-- 面向对象基础</title>
      <link href="/2023/01/30/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/30/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89--%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习（二）–-面向对象基础"><a href="#Java学习（二）–-面向对象基础" class="headerlink" title="Java学习（二）– 面向对象基础"></a>Java学习（二）– 面向对象基础</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2">https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2</a></p></blockquote><h1 id="一、类与对象"><a href="#一、类与对象" class="headerlink" title="一、类与对象"></a>一、类与对象</h1><h2 id="1-1-问题引出"><a href="#1-1-问题引出" class="headerlink" title="1.1 问题引出"></a>1.1 问题引出</h2><ol><li><p>类是抽象的，概念的，代表一类事物,比如人类,猫类.., 即它是数据类型. </p></li><li><p>对象是具体的，实际的，代表一个具体事物, 即 是实例. </p></li><li><p>类是对象的模板，对象是类的一个个体，对应一个实例</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">张老太养了两只猫猫:一只名字叫小白,今年3岁,白色。 </span></span><br><span class="line"><span class="comment">还有一只叫小花,今年100岁,花色。请编写一个程序，当用户输入小猫的名字时，</span></span><br><span class="line"><span class="comment">就显示该猫的名字，年龄，颜色。如果用户输入的小猫名错误，</span></span><br><span class="line"><span class="comment">则显示 张老太没有这只猫猫。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//单独变量来解决 =&gt; 不利于数据的管理(你把一只猫的信息拆解)</span></span><br><span class="line"><span class="comment">//第1只猫信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String cat1Name = &quot;小白&quot;;</span></span><br><span class="line"><span class="comment">// int cat1Age = 3;</span></span><br><span class="line"><span class="comment">// String cat1Color = &quot;白色&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// //第2只猫信息</span></span><br><span class="line"><span class="comment">// String cat2Name = &quot;小花&quot;;</span></span><br><span class="line"><span class="comment">// int cat2Age = 100;</span></span><br><span class="line"><span class="comment">// String cat2Color = &quot;花色&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组 ===&gt;(1)数据类型体现不出来(2) 只能通过[下标]获取信息，造成变量名字和内容</span></span><br><span class="line"><span class="comment">//         的对应关系不明确(3) 不能体现猫的行为</span></span><br><span class="line"><span class="comment">//第1只猫信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String[] cat1 = &#123;&quot;小白&quot;, &quot;3&quot;, &quot;白色&quot;&#125;; </span></span><br><span class="line"><span class="comment">// String[] cat2 = &#123;&quot;小花&quot;, &quot;100&quot;, &quot;花色&quot;&#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用OOP面向对象解决</span></span><br><span class="line"><span class="comment">//实例化一只猫[创建一只猫对象]</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. new Cat() 创建一只猫(猫对象)</span></span><br><span class="line"><span class="comment">//2. Cat cat1 = new Cat(); 把创建的猫赋给 cat1 </span></span><br><span class="line"><span class="comment">//3. cat1 就是一个对象</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">cat1.age = <span class="number">3</span>;</span><br><span class="line">cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line">cat1.weight = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//创建了第二只猫，并赋给 cat2</span></span><br><span class="line"><span class="comment">//cat2 也是一个对象(猫对象)</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">cat2.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">cat2.age = <span class="number">100</span>;</span><br><span class="line">cat2.color = <span class="string">&quot;花色&quot;</span>;</span><br><span class="line">cat2.weight = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么访问对象的属性呢</span></span><br><span class="line">System.out.println(<span class="string">&quot;第1只猫信息&quot;</span> + cat1.name </span><br><span class="line">+ <span class="string">&quot; &quot;</span> + cat1.age + <span class="string">&quot; &quot;</span> + cat1.color + <span class="string">&quot; &quot;</span> + cat1.weight);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;第2只猫信息&quot;</span> + cat2.name </span><br><span class="line">+ <span class="string">&quot; &quot;</span> + cat2.age + <span class="string">&quot; &quot;</span> + cat2.color + <span class="string">&quot; &quot;</span> + cat2.weight);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用面向对象的方式来解决养猫问题</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//定义一个猫类 Cat -&gt; 自定义的数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="comment">//属性/成员变量</span></span><br><span class="line">String name; <span class="comment">//名字</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">String color; <span class="comment">//颜色</span></span><br><span class="line"><span class="comment">//double weight; //体重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-对象在内存中的存在形式-※"><a href="#1-2-对象在内存中的存在形式-※" class="headerlink" title="1.2 对象在内存中的存在形式 (※)"></a>1.2 对象在内存中的存在形式 (※)</h2><p>创建一个新的对象的时候相当于在堆区中开辟了一块空间, </p><p>在栈区中的变量名指向这个堆区的地址, </p><p>如果属性是 <code>基本数据类型</code> 则直接存储在堆区中, </p><p>如果是 <code>引用类型</code> 则存储在堆区中的是一个在方法区的地址, 真正的内容存储在方法区中</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230129214755994.png" alt="对象在内存中的存在形式"></p><hr><h2 id="1-3-属性"><a href="#1-3-属性" class="headerlink" title="1.3 属性"></a>1.3 属性</h2><ol><li><p>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名; </p></li><li><p>属性的定义类型可以为任意类型，包含基本类型或引用类型</p></li><li><p>属性如果不赋值，有默认值，规则和数组一致。具体说: </p><p><code>int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建Person对象</span></span><br><span class="line"><span class="comment">//p1 是对象名(对象引用)</span></span><br><span class="line"><span class="comment">//new Person() 创建的对象空间(数据) 才是真正的对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的属性默认值，遵守数组规则:</span></span><br><span class="line"><span class="comment">//int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000，boolean false，String null</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n当前这个人的信息&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;age=&quot;</span> + p1.age + <span class="string">&quot; name=&quot;</span> </span><br><span class="line">+ p1.name + <span class="string">&quot; sal=&quot;</span> + p1.sal + <span class="string">&quot; isPass=&quot;</span> + p1.isPass) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="comment">//四个属性</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">double</span> sal;</span><br><span class="line"><span class="type">boolean</span> isPass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-1-创建对象"><a href="#1-3-1-创建对象" class="headerlink" title="1.3.1 创建对象"></a>1.3.1 创建对象</h3><ol><li>先声明再创建</li></ol><p>​<code>Cat cat ; //声明对象 cat</code></p><p>​<code>cat = new Cat(); //创建</code></p><ol start="2"><li>直接创建</li></ol><p>​<code>Cat cat = new Cat();</code></p><h3 id="1-3-2-访问属性"><a href="#1-3-2-访问属性" class="headerlink" title="1.3.2 访问属性"></a>1.3.2 访问属性</h3><p>基本语法</p><p>​对象名.属性名;</p><p>案例演示赋值和输出</p><p>​<code>cat.name ;</code></p><p>​<code>cat.age;</code></p><p>​<code>cat.color;</code></p><hr><h2 id="1-4-类和对象内存分配机制-※"><a href="#1-4-类和对象内存分配机制-※" class="headerlink" title="1.4 类和对象内存分配机制 (※)"></a>1.4 类和对象内存分配机制 (※)</h2><ol><li><p>栈： 一般存放基本数据类型 (局部变量)</p></li><li><p>堆： 存放对象 (Cat cat , 数组等)</p></li><li><p>方法区：常量池 (常量，比如字符串)， 类加载信息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object03</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">Person p1=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age=<span class="number">10</span>;</span><br><span class="line">p1.name=<span class="string">&quot;小明&quot;</span>;</span><br><span class="line">Person p2=p1; <span class="comment">//把p1 赋给了 p2 ， 让p2指向p1 </span></span><br><span class="line">System.out.println(p2.age); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>先加载 Person 类信息 (属性和方法信息, 只会加载一次)</p></li><li><p>在堆中分配空间, 进行默认初始化 (看规则)</p></li><li><p>把地址赋给 p , p 就指向对象</p></li><li><p>进行指定初始化， 比如 <code>p.name =”jack” p.age = 10</code></p></li></ol><p>跟数组的存储机制比较像, 可以类比理解, 不要强行记忆</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230129220303073.png" alt="类和对象内存分配机制"></p><p>如果是 <code>null</code> 的话就什么都不指向</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230129220551830.png" alt="b = null"></p><hr><h1 id="二、成员方法"><a href="#二、成员方法" class="headerlink" title="二、成员方法"></a>二、成员方法</h1><h2 id="2-1-问题引出"><a href="#2-1-问题引出" class="headerlink" title="2.1 问题引出"></a>2.1 问题引出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//方法使用</span></span><br><span class="line"><span class="comment">//1. 方法写好后，如果不去调用(使用)，不会输出</span></span><br><span class="line"><span class="comment">//2. 先创建对象 ,然后调用方法即可</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.speak(); <span class="comment">//调用方法</span></span><br><span class="line">p1.cal01(); <span class="comment">//调用cal01方法</span></span><br><span class="line">p1.cal02(<span class="number">5</span>); <span class="comment">//调用cal02方法，同时给n = 5</span></span><br><span class="line">p1.cal02(<span class="number">10</span>); <span class="comment">//调用cal02方法，同时给n = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用getSum方法，同时num1=10, num2=20</span></span><br><span class="line"><span class="comment">//把 方法 getSum 返回的值，赋给 变量 returnRes</span></span><br><span class="line"><span class="type">int</span> <span class="variable">returnRes</span> <span class="operator">=</span> p1.getSum(<span class="number">10</span>, <span class="number">20</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;getSum方法返回的值=&quot;</span> + returnRes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//方法(成员方法)</span></span><br><span class="line"><span class="comment">//添加speak 成员方法,输出 “我是一个好人”</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. public 表示方法是公开</span></span><br><span class="line"><span class="comment">//2. void ： 表示方法没有返回值</span></span><br><span class="line"><span class="comment">//3. speak() : speak是方法名， () 形参列表</span></span><br><span class="line"><span class="comment">//4. &#123;&#125; 方法体，可以写我们要执行的代码</span></span><br><span class="line"><span class="comment">//5. System.out.println(&quot;我是一个好人&quot;); 表示我们的方法就是输出一句话</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是一个好人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加cal01 成员方法,可以计算从 1+..+1000的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//循环完成</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">res += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;cal01方法 计算结果=&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加cal02 成员方法,该方法可以接收一个数n，计算从 1+..+n 的结果</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. (int n) 形参列表， 表示当前有一个形参 n, 可以接收用户输入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal02</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">//循环完成</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">res += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;cal02方法 计算结果=&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加getSum成员方法,可以计算两个数的和</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. public 表示方法是公开的</span></span><br><span class="line"><span class="comment">//2. int :表示方法执行后，返回一个 int 值</span></span><br><span class="line"><span class="comment">//3. getSum 方法名</span></span><br><span class="line"><span class="comment">//4. (int num1, int num2) 形参列表，2个形参，可以接收用户传入的两个数</span></span><br><span class="line"><span class="comment">//5. return res; 表示把 res 的值， 返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-方法调用机制-※"><a href="#2-2-方法调用机制-※" class="headerlink" title="2.2 方法调用机制 (※)"></a>2.2 方法调用机制 (※)</h2><p>每个方法调用的时候会开辟一个新的栈空间, </p><p>除非使用 <code>return</code> , 否则每个占空间相互独立互不干扰</p><p>一个方法结束后占空间会销毁</p><p>程序结束后 <code>main</code> 栈空间销毁</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230129220851971.png" alt="image-20230129220851971"></p><hr><h2 id="2-3-成员方法的好处及使用"><a href="#2-3-成员方法的好处及使用" class="headerlink" title="2.3 成员方法的好处及使用"></a>2.3 成员方法的好处及使用</h2><h3 id="2-3-1-好处"><a href="#2-3-1-好处" class="headerlink" title="2.3.1 好处"></a>2.3.1 好处</h3><ol><li><p>提高代码的复用性</p></li><li><p>可以将实现的细节封装起来，然后供其他用户来调用即可</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请遍历一个数组 , 输出数组的各个元素值</span></span><br><span class="line"><span class="type">int</span> [][] map =  &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法完成输出, 创建MyTools对象 </span></span><br><span class="line"><span class="type">MyTools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTools</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map数组</span></span><br><span class="line"><span class="comment">//传统的解决方式就是直接遍历</span></span><br><span class="line"><span class="comment">// for(int i = 0; i &lt; map.length; i++) &#123;</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; map[i].length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(map[i][j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line">tool.printArr(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//要求再次遍历map数组</span></span><br><span class="line"><span class="comment">// for(int i = 0; i &lt; map.length; i++) &#123;</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; map[i].length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(map[i][j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">tool.printArr(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//...再次遍历</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// for(int i = 0; i &lt; map.length; i++) &#123;</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; map[i].length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(map[i][j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// System.out.println();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">tool.printArr(map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把输出的功能，写到一个类的方法中,然后调用该方法即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span> &#123;</span><br><span class="line"><span class="comment">//方法，接收一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[][] map)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line"><span class="comment">//对传入的map数组进行遍历输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-成员方法的定义"><a href="#2-3-2-成员方法的定义" class="headerlink" title="2.3.2 成员方法的定义"></a>2.3.2 成员方法的定义</h3><p>访问修饰符 返回数据类型 方法名（形参列表..） {&#x2F;&#x2F;方法体</p><p>​语句；</p><p>​return 返回值;</p><p>}</p><ol><li><p>形参列表：表示成员方法输入 <code>cal(int n) ， getSum(int num1, int num2)</code></p></li><li><p>返回数据类型：表示成员方法输出, void 表示没有返回值</p></li><li><p>方法主体：表示为了实现某一功能代码块</p></li><li><p>return 语句不是必须的。</p></li></ol><h3 id="2-3-3-方法使用细节"><a href="#2-3-3-方法使用细节" class="headerlink" title="2.3.3 方法使用细节"></a>2.3.3 方法使用细节</h3><ol><li><p>一个方法最多有一个返回值 [思考，如何返回多个结果 返回数组 ]</p></li><li><p>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</p></li><li><p>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; </p><p>而且要求返回值类型必须和 return 的值类型一致或兼容</p></li><li><p>如果方法是 void，则方法体中可以没有 return 语句，或者 只写 return ;</p></li><li><p>方法名遵循驼峰命名法，最好见名知义，表达出该功能的意思即可, 比如 得到两个数的和 getSum, 开发中按照规范</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line"><span class="type">int</span>[] res = a.getSumAndSub(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;和=&quot;</span> + res[<span class="number">0</span>]);</span><br><span class="line">System.out.println(<span class="string">&quot;差=&quot;</span> + res[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节: 调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型 的参数</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">a.getSumAndSub(b1, b2);<span class="comment">//byte -&gt; int </span></span><br><span class="line"><span class="comment">//a.getSumAndSub(1.1, 1.8);//double -&gt;int(×)</span></span><br><span class="line"><span class="comment">//细节: 实参和形参的类型要一致或兼容、个数、顺序必须一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.getSumAndSub(100);//× 个数不一致</span></span><br><span class="line">a.f3(<span class="string">&quot;tom&quot;</span>, <span class="number">10</span>); <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//a.f3(100, &quot;jack&quot;); // 实际参数和形式参数顺序不对</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//细节: 方法不能嵌套定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="comment">// public void f5() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">(String str, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 一个方法最多有一个返回值  [思考，如何返回多个结果 返回数组 ]</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] getSumAndSub(<span class="type">int</span> n1, <span class="type">int</span> n2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] resArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>]; <span class="comment">//</span></span><br><span class="line">resArr[<span class="number">0</span>] = n1 + n2;</span><br><span class="line">resArr[<span class="number">1</span>] = n1 - n2;</span><br><span class="line"><span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</span></span><br><span class="line"><span class="comment">//   具体看 getSumAndSub</span></span><br><span class="line"><span class="comment">//   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; </span></span><br><span class="line"><span class="comment">//   而且要求返回值类型必须和return的值类型一致或兼容</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.1</span> * <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> n; <span class="comment">// int -&gt;double </span></span><br><span class="line"><span class="comment">//return d1; //ok? double -&gt; int </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果方法是void，则方法体中可以没有return语句，或者 只写 return ; </span></span><br><span class="line"><span class="comment">//老韩提示：在实际工作中，我们的方法都是为了完成某个功能，所以方法名要有一定含义</span></span><br><span class="line"><span class="comment">//，最好是见名知意</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//return ;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-方法调用细节"><a href="#2-3-4-方法调用细节" class="headerlink" title="2.3.4 方法调用细节"></a>2.3.4 方法调用细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDetail02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="comment">//a.sayOk();</span></span><br><span class="line"></span><br><span class="line">a.m1(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="comment">//同一个类中的方法调用：直接调用即可</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;print()方法被调用 n=&quot;</span> + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span> &#123; <span class="comment">//sayOk调用 print(直接调用即可)</span></span><br><span class="line">print(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;继续执行sayOK()~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//跨类中的方法A类调用B类方法：需要通过对象名调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//创建B对象, 然后在调用方法即可</span></span><br><span class="line">System.out.println(<span class="string">&quot;m1() 方法被调用&quot;</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">b.hi();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;m1() 继续执行:)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B类中的 hi()被执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4 练习"></a>2.4 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">AA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line"><span class="comment">// if(a.isOdd(2)) &#123;//T , 这样的写法以后会看到很多</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;是奇数&quot;);</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;是偶数&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 使用print方法</span></span><br><span class="line">a.print(<span class="number">4</span>, <span class="number">4</span>, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写类AA ，有一个方法：判断一个数是奇数odd还是偶数, 返回boolean</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 方法的返回类型 boolean</span></span><br><span class="line"><span class="comment">//2. 方法的名字 isOdd</span></span><br><span class="line"><span class="comment">//3. 方法的形参 (int num)</span></span><br><span class="line"><span class="comment">//4. 方法体 , 判断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOdd</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line"><span class="comment">// if(num % 2 != 0) &#123;</span></span><br><span class="line"><span class="comment">// return true;</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//return num % 2 != 0 ? true; false;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span> num % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据行、列、字符打印 对应行数和列数的字符，</span></span><br><span class="line"><span class="comment">//比如：行：4，列：4，字符#,则打印相应的效果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 方法的返回类型 void</span></span><br><span class="line"><span class="comment">//2. 方法的名字 print</span></span><br><span class="line"><span class="comment">//3. 方法的形参 (int row, int col, char c)</span></span><br><span class="line"><span class="comment">//4. 方法体 , 循环</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">char</span> c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;<span class="comment">//输出每一行</span></span><br><span class="line">System.out.print(c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(); <span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、成员方法传参机制-※"><a href="#三、成员方法传参机制-※" class="headerlink" title="三、成员方法传参机制 (※)"></a>三、成员方法传参机制 (※)</h1><h2 id="3-1-基本数据类型传参机制"><a href="#3-1-基本数据类型传参机制" class="headerlink" title="3.1 基本数据类型传参机制"></a>3.1 基本数据类型传参机制</h2><p>基本数据类型，传递的是值 (值拷贝)，形参的任何改变不影响实参</p><p><code>main</code> 方法中的两个数在 main 栈区</p><p><code>swap</code> 方法中的两个数在 swap 栈区</p><p>两个栈区互补干扰, 既然是基本数据类型, 那么数据都存储在栈区中, 没有指向堆区中的地址</p><p>所以在没有 <code>return</code> 的情况下两个栈区互补干扰, 不能做到数据交换的目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodParameter01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//创建AA对象 名字 obj</span></span><br><span class="line"><span class="type">AA</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">obj.swap(a, b); <span class="comment">//调用swap</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;main方法 a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b);<span class="comment">//a=10 b=20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\na和b交换前的值\na=&quot;</span> + a + <span class="string">&quot;\tb=&quot;</span> + b);<span class="comment">//a=10 b=20</span></span><br><span class="line"><span class="comment">//完成了 a 和 b的交换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">System.out.println(<span class="string">&quot;\na和b交换后的值\na=&quot;</span> + a + <span class="string">&quot;\tb=&quot;</span> + b);<span class="comment">//a=20 b=10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-引用数据类型传参机制"><a href="#3-2-引用数据类型传参机制" class="headerlink" title="3.2 引用数据类型传参机制"></a>3.2 引用数据类型传参机制</h2><p>引用类型传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参</p><p>引用类型存储在堆区中, 变量存储的是这个堆区的地址</p><p><code>main</code> 方法与 <code>test100</code> 方法的栈区都存储的是堆区的地址, 这个地址指向一个地方, test100 中的修改可以影响 main 的输出</p><p>而在 <code>test200</code> 中, 新建了一个对象, 这就说明现在堆区中有两个对象</p><p>而新建的对象在 test200 的栈区中存储的指向堆区的地址是新建的对象的地址, 不会与原来的地方产生关联, 所以不会影响 main 的输出</p><p><code>p = null</code> 指向为空, 啥都不影响</p><p>直接通过 <code>test200</code> 方法中调用属性 <code>p.age</code> 当然会直接对堆区的对象值进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodParameter02</span> &#123; </span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"> <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"> b.test100(arr);<span class="comment">//调用方法</span></span><br><span class="line"> System.out.println(<span class="string">&quot; main的 arr数组 &quot;</span>);</span><br><span class="line"> <span class="comment">//遍历数组</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">p.age = <span class="number">10</span>;</span><br><span class="line">b.test200(p);</span><br><span class="line"><span class="comment">//测试题, 如果 test200 执行的是 p = null ,下面的结果是 10</span></span><br><span class="line"><span class="comment">//测试题, 如果 test200 执行的是 p = new Person();..., 下面输出的是10</span></span><br><span class="line">System.out.println(<span class="string">&quot;main 的p.age=&quot;</span> + p.age);<span class="comment">//10000 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        <span class="comment">// 直接通过 test200 方法中调用属性 p.age 当然会直接对堆区的对象值进行修改</span></span><br><span class="line"><span class="comment">//p.age = 10000; //修改对象属性</span></span><br><span class="line"><span class="comment">//思考</span></span><br><span class="line">p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line">p.age = <span class="number">99</span>;</span><br><span class="line"><span class="comment">//思考</span></span><br><span class="line">        <span class="comment">// p = null 指向为空, 啥都不影响</span></span><br><span class="line"><span class="comment">//p = null; </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类中编写一个方法test100，</span></span><br><span class="line"><span class="comment">//可以接收一个数组，在方法中修改该数组，看看原来的数组是否变化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">200</span>;<span class="comment">//修改元素</span></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line">System.out.println(<span class="string">&quot; test100的 arr数组 &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-对象克隆"><a href="#3-3-对象克隆" class="headerlink" title="3.3 对象克隆"></a>3.3 对象克隆</h2><p>有点类似数组的克隆, 可以对比理解, 不要死记硬背</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodExercise02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;milan&quot;</span>;</span><br><span class="line">p.age = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//创建tools</span></span><br><span class="line"><span class="type">MyTools</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTools</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> tools.copyPerson(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//到此 p 和 p2是Person对象，但是是两个独立的对象，属性相同</span></span><br><span class="line">System.out.println(<span class="string">&quot;p的属性 age=&quot;</span> + p.age  + <span class="string">&quot; 名字=&quot;</span> + p.name);</span><br><span class="line">System.out.println(<span class="string">&quot;p2的属性 age=&quot;</span> + p2.age  + <span class="string">&quot; 名字=&quot;</span> + p2.name);</span><br><span class="line"><span class="comment">//这里老师提示： 可以同 对象比较看看是否为同一个对象</span></span><br><span class="line">System.out.println(p == p2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span> &#123;</span><br><span class="line"><span class="comment">//编写一个方法copyPerson，可以复制一个Person对象，返回复制的对象。克隆对象， </span></span><br><span class="line"><span class="comment">//注意要求得到新对象和原来的对象是两个独立的对象，只是他们的属性相同</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//编写方法的思路</span></span><br><span class="line"><span class="comment">//1. 方法的返回类型 Person</span></span><br><span class="line"><span class="comment">//2. 方法的名字 copyPerson</span></span><br><span class="line"><span class="comment">//3. 方法的形参 (Person p)</span></span><br><span class="line"><span class="comment">//4. 方法体, 创建一个新对象，并复制属性，返回即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">copyPerson</span><span class="params">(Person p)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个新的对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p2.name = p.name; <span class="comment">//把原来对象的名字赋给p2.name</span></span><br><span class="line">p2.age = p.age; <span class="comment">//把原来对象的年龄赋给p2.age</span></span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-4-方法递归调用-※"><a href="#3-4-方法递归调用-※" class="headerlink" title="3.4 方法递归调用 (※)"></a>3.4 方法递归调用 (※)</h2><h3 id="3-4-1-问题引出"><a href="#3-4-1-问题引出" class="headerlink" title="3.4.1 问题引出"></a>3.4.1 问题引出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">t1.test(<span class="number">4</span>);<span class="comment">//输出什么？ n=2 n=3 n=4</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> t1.factorial(<span class="number">5</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;5的阶乘 res =&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">test(n - <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//factorial 阶乘</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-递归时的内存机制"><a href="#3-4-2-递归时的内存机制" class="headerlink" title="3.4.2 递归时的内存机制"></a>3.4.2 递归时的内存机制</h3><ol><li><p>每次执行一个方法就是创建一个新的受保护的独立栈空间</p></li><li><p>每个方法中, 即每个栈空间中的<strong>局部变量</strong>是独立的, 不会互相影响, 比如下图的 <code>n</code></p></li><li><p>当然如果这些方法中使用的是<strong>引用类型变量 (数组, 对象等)</strong>, 就会共享这个引用类型变量的数据</p></li><li><p>递归时必须向退出递归的条件逼近, 否则就是无限递归</p></li><li><p>当一个方法执行完毕之后, 或者遇到 <code>return</code> 就会返回, 遵守谁调用就返回给谁的原则</p><p>就是说当方法执行完毕或者返回时, 这个方法就完事了, 销毁</p></li></ol><p>递归就像是一个栈, 如下图所示, 从 <code>main</code> 方法开始一直调用 <code>test</code> 方法, 不断开辟栈空间, 然后从最后开辟的栈空间开始逐渐返回, 返回一个销毁一个, 最后回到 <code>main</code></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230130210338861.png" alt="递归时的内存机制"></p><h3 id="3-4-3-斐波那契数列与猴子吃桃"><a href="#3-4-3-斐波那契数列与猴子吃桃" class="headerlink" title="3.4.3 斐波那契数列与猴子吃桃"></a>3.4.3 斐波那契数列与猴子吃桃</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line"> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"> <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> t1.fibonacci(n);</span><br><span class="line"> <span class="keyword">if</span>(res != -<span class="number">1</span>) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;当n=&quot;</span>+ n +<span class="string">&quot; 对应的斐波那契数=&quot;</span> + res);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//桃子问题</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">peachNum</span> <span class="operator">=</span> t1.peach(day);</span><br><span class="line"><span class="keyword">if</span>(peachNum != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第 &quot;</span> + day + <span class="string">&quot;天有&quot;</span> + peachNum + <span class="string">&quot;个桃子&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请使用递归的方式求出斐波那契数1,1,2,3,5,8,13...给你一个整数n，求出它的值是多</span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 当n = 1 斐波那契数 是1</span></span><br><span class="line"><span class="comment">2. 当n = 2 斐波那契数 是1</span></span><br><span class="line"><span class="comment">3. 当n &gt;= 3  斐波那契数 是前两个数的和</span></span><br><span class="line"><span class="comment">4. 这里就是一个递归的思路</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( n &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>( n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fibonacci(n-<span class="number">1</span>) + fibonacci(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;要求输入的n&gt;=1的整数&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">猴子吃桃子问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个！</span></span><br><span class="line"><span class="comment">以后每天猴子都吃其中的一半，然后再多吃一个。当到第10天时，</span></span><br><span class="line"><span class="comment">想再吃时（即还没吃），发现只有1个桃子了。问题：最初共多少个桃子？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析 逆推</span></span><br><span class="line"><span class="comment">1. day = 10 时 有 1个桃子</span></span><br><span class="line"><span class="comment">2. day = 9 时  有 (day10 + 1) * 2 = 4</span></span><br><span class="line"><span class="comment">3. day = 8 时  有 (day9 + 1) * 2 = 10</span></span><br><span class="line"><span class="comment">4. 规律就是  前一天的桃子 = (后一天的桃子 + 1) *2//就是我们的能力</span></span><br><span class="line"><span class="comment">5. 递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peach</span><span class="params">(<span class="type">int</span> day)</span> &#123; </span><br><span class="line"><span class="keyword">if</span>(day == <span class="number">10</span>) &#123;<span class="comment">//第10天，只有1个桃</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( day &gt;= <span class="number">1</span> &amp;&amp; day &lt;=<span class="number">9</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> (peach(day + <span class="number">1</span>) + <span class="number">1</span>) * <span class="number">2</span>;<span class="comment">//规则，自己要想</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;day在1-10&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-迷宫问题"><a href="#3-4-4-迷宫问题" class="headerlink" title="3.4.4 迷宫问题"></a>3.4.4 迷宫问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 先创建迷宫，用二维数组表示 int[][] map = new int[8][7];</span></span><br><span class="line"><span class="comment">//2. 先规定 map 数组的元素值: 0 表示可以走 1 表示障碍物 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//3. 将最上面的一行和最下面的一行，全部设置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.将最右面的一列和最左面的一列，全部设置为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">//测试回溯 </span></span><br><span class="line"><span class="comment">// map[2][1] = 1;</span></span><br><span class="line"><span class="comment">// map[2][2] = 1;</span></span><br><span class="line"><span class="comment">// map[1][2] = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出当前的地图</span></span><br><span class="line">System.out.println(<span class="string">&quot;=====当前地图情况======&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);<span class="comment">//输出一行</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用findWay给老鼠找路</span></span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line"><span class="comment">//下右上左</span></span><br><span class="line">t1.findWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n====找路的情况如下=====&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; map.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; map[i].length; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);<span class="comment">//输出一行</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯的思想来解决老鼠出迷宫</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. findWay方法就是专门来找出迷宫的路径</span></span><br><span class="line"><span class="comment">//2. 如果找到，就返回 true ,否则返回false</span></span><br><span class="line"><span class="comment">//3. map 就是二维数组，即表示迷宫</span></span><br><span class="line"><span class="comment">//4. i,j 就是老鼠的位置，初始化的位置为(1,1)</span></span><br><span class="line"><span class="comment">//5. 因为我们是递归的找路，所以我先规定 map数组的各个值的含义</span></span><br><span class="line"><span class="comment">//   0 表示可以走 1 表示障碍物 2 表示可以走 3 表示走过，但是走不通是死路</span></span><br><span class="line"><span class="comment">//6. 当map[6][5] =2 就说明找到通路,就可以结束，否则就继续找.</span></span><br><span class="line"><span class="comment">//7. 先确定老鼠找路策略 下-&gt;右-&gt;上-&gt;左</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findWay</span><span class="params">(<span class="type">int</span>[][] map , <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;<span class="comment">//说明已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) &#123;<span class="comment">//当前这个位置0,说明表示可以走</span></span><br><span class="line"><span class="comment">//我们假定可以走通</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//使用找路策略，来确定该位置是否真的可以走通</span></span><br><span class="line"><span class="comment">//下-&gt;右-&gt;上-&gt;左</span></span><br><span class="line"><span class="keyword">if</span>(findWay(map, i + <span class="number">1</span>, j)) &#123;<span class="comment">//先走下</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i, j + <span class="number">1</span>))&#123;<span class="comment">//右</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i-<span class="number">1</span>, j)) &#123;<span class="comment">//上</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i, j-<span class="number">1</span>))&#123;<span class="comment">//左</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//map[i][j] = 1 , 2, 3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改找路策略，看看路径是否有变化</span></span><br><span class="line"><span class="comment">//下-&gt;右-&gt;上-&gt;左 ==&gt; 上-&gt;右-&gt;下-&gt;左</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findWay2</span><span class="params">(<span class="type">int</span>[][] map , <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;<span class="comment">//说明已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) &#123;<span class="comment">//当前这个位置0,说明表示可以走</span></span><br><span class="line"><span class="comment">//我们假定可以走通</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//使用找路策略，来确定该位置是否真的可以走通</span></span><br><span class="line"><span class="comment">//上-&gt;右-&gt;下-&gt;左</span></span><br><span class="line"><span class="keyword">if</span>(findWay2(map, i - <span class="number">1</span>, j)) &#123;<span class="comment">//先走上</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay2(map, i, j + <span class="number">1</span>))&#123;<span class="comment">//右</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay2(map, i+<span class="number">1</span>, j)) &#123;<span class="comment">//下</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay2(map, i, j-<span class="number">1</span>))&#123;<span class="comment">//左</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//map[i][j] = 1 , 2, 3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-5-汉诺塔"><a href="#3-4-5-汉诺塔" class="headerlink" title="3.4.5 汉诺塔"></a>3.4.5 汉诺塔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HanoiTower</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Tower</span> <span class="variable">tower</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tower</span>();</span><br><span class="line">tower.move(<span class="number">64</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tower</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="comment">//num 表示要移动的个数, a, b, c 分别表示A塔，B 塔, C 塔</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> num , <span class="type">char</span> a, <span class="type">char</span> b ,<span class="type">char</span> c)</span> &#123;</span><br><span class="line"><span class="comment">//如果只有一个盘 num = 1</span></span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果有多个盘，可以看成两个 , 最下面的和上面的所有盘(num-1)</span></span><br><span class="line"><span class="comment">//(1)先移动上面所有的盘到 b, 借助 c</span></span><br><span class="line">move(num - <span class="number">1</span> , a, c, b);</span><br><span class="line"><span class="comment">//(2)把最下面的这个盘，移动到 c</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;-&gt;&quot;</span> + c);</span><br><span class="line"><span class="comment">//(3)再把 b塔的所有盘，移动到c ,借助a</span></span><br><span class="line">move(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="四、方法重载"><a href="#四、方法重载" class="headerlink" title="四、方法重载"></a>四、方法重载</h1><blockquote><p>Java 中允许同一个类中，多个同名方法的存在，但要求 形参列表不一致</p></blockquote><h2 id="4-1-使用细节"><a href="#4-1-使用细节" class="headerlink" title="4.1 使用细节"></a>4.1 使用细节</h2><ul><li>方法名必须相同</li><li>形参列表必须不同 (形参类型, 个数, 顺序, 至少有一个不同, 参数名没有要求)</li><li>返回类型没有要求</li></ul><p>必须要在相同的方法名上做区分, 这样才能判定用哪个方法, 所以形参列表必须想办法不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoad01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(100);</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;hello,world&quot;);</span></span><br><span class="line"><span class="comment">// System.out.println(&#x27;h&#x27;);</span></span><br><span class="line"><span class="comment">// System.out.println(1.1);</span></span><br><span class="line"><span class="comment">// System.out.println(true);</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="type">MyCalculator</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculator</span>();</span><br><span class="line">System.out.println(mc.calculate(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">System.out.println(mc.calculate(<span class="number">1.1</span>, <span class="number">2</span>));</span><br><span class="line">System.out.println(mc.calculate(<span class="number">1</span>, <span class="number">2.1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculator</span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的四个 calculate方法构成了重载</span></span><br><span class="line"><span class="comment">//两个整数的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span>  &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;calculate(int n1, int n2) 被调用&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有构成方法重载, 仍然是错误的，因为是方法的重复定义</span></span><br><span class="line"><span class="comment">// public void calculate(int n1, int n2)  &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;calculate(int n1, int n2) 被调用&quot;);</span></span><br><span class="line"><span class="comment">// int res =  n1 + n2;</span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//看看下面是否构成重载, 没有构成，而是方法的重复定义,就错了</span></span><br><span class="line"><span class="comment">// public int calculate(int a1, int a2)  &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;calculate(int n1, int n2) 被调用&quot;);</span></span><br><span class="line"><span class="comment">// return a1 + a2;</span></span><br><span class="line"><span class="comment">// &#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个整数，一个double的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个double ,一个Int和 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;calculate(double n1, int n2) 被调用..&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//三个int的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2,<span class="type">int</span> n3)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-2-练习"><a href="#4-2-练习" class="headerlink" title="4.2 练习"></a>4.2 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoadExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在主类的main ()方法中分别用参数区别调用三个方法</span></span><br><span class="line"><span class="type">Methods</span> <span class="variable">method</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Methods</span>();</span><br><span class="line">method.m(<span class="number">10</span>);<span class="comment">//100</span></span><br><span class="line">method.m(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//200</span></span><br><span class="line">method.m(<span class="string">&quot;韩顺平教育 hello&quot;</span>);<span class="comment">//字符串信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">System.out.println(method.max(<span class="number">10</span>, <span class="number">24</span>)); <span class="comment">// 24</span></span><br><span class="line">System.out.println(method.max(<span class="number">10.0</span>, <span class="number">21.4</span>)); <span class="comment">// 21.4</span></span><br><span class="line">System.out.println(method.max(<span class="number">10.0</span>, <span class="number">1.4</span>, <span class="number">30.0</span>)); <span class="comment">// 30.0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写程序，类Methods中定义三个重载方法并调用。方法名为m。</span></span><br><span class="line"><span class="comment">三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，</span></span><br><span class="line"><span class="comment">相乘并输出结果，输出字符串信息。在主类的main ()方法中分别用参数区别调用三个方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义三个重载方法max()，第一个方法，返回两个int值中的最大值，</span></span><br><span class="line"><span class="comment">第二个方法，返回两个double值中的最大值，第三个方法，</span></span><br><span class="line"><span class="comment">返回三个double值中的最大值，并分别调用三个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Methods</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1 方法名 max</span></span><br><span class="line"><span class="comment">//2 形参 (int,int) </span></span><br><span class="line"><span class="comment">//3.int</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1 方法名 max</span></span><br><span class="line"><span class="comment">//2 形参 (double,double) </span></span><br><span class="line"><span class="comment">//3.double</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1 方法名 max</span></span><br><span class="line"><span class="comment">//2 形参 (double,double,double) </span></span><br><span class="line"><span class="comment">//3.double</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2, <span class="type">double</span> n3)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;max(double n1, double n2, double n3)&quot;</span>);</span><br><span class="line"><span class="comment">//求出n1 和  n2的最大值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">max1</span> <span class="operator">=</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line"><span class="keyword">return</span> max1 &gt; n3 ? max1 : n3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2, <span class="type">int</span> n3)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;max(double n1, double n2, int n3)&quot;</span>);</span><br><span class="line"><span class="comment">//求出n1 和  n2的最大值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">max1</span> <span class="operator">=</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line"><span class="keyword">return</span> max1 &gt; n3 ? max1 : n3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1 方法名 m</span></span><br><span class="line"><span class="comment">//2 形参 (int) </span></span><br><span class="line"><span class="comment">//3.void</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;平方=&quot;</span> + (n * n));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//1 方法名 m</span></span><br><span class="line"><span class="comment">//2 形参 (int, int) </span></span><br><span class="line"><span class="comment">//3.void</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;相乘=&quot;</span> + (n1 * n2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 方法名 m</span></span><br><span class="line"><span class="comment">//2 形参 (String) </span></span><br><span class="line"><span class="comment">//3.void</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String str)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;传入的str=&quot;</span> + str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="五、可变参数"><a href="#五、可变参数" class="headerlink" title="五、可变参数"></a>五、可变参数</h1><blockquote><p>Java 允许将同一个类中多个<strong>同名同功能</strong>但<strong>参数个数不同</strong>的方法，封装成一个方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameter01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">HspMethod</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">System.out.println(m.sum(<span class="number">1</span>, <span class="number">5</span>, <span class="number">100</span>)); <span class="comment">//106</span></span><br><span class="line">System.out.println(m.sum(<span class="number">1</span>,<span class="number">19</span>)); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span> &#123;</span><br><span class="line"><span class="comment">//可以计算 2个数的和，3个数的和 ， 4. 5， 。。</span></span><br><span class="line"><span class="comment">//可以使用方法重载</span></span><br><span class="line"><span class="comment">// public int sum(int n1, int n2) &#123;//2个数的和</span></span><br><span class="line"><span class="comment">// return n1 + n2;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// public int sum(int n1, int n2, int n3) &#123;//3个数的和</span></span><br><span class="line"><span class="comment">// return n1 + n2 + n3;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// public int sum(int n1, int n2, int n3, int n4) &#123;//4个数的和</span></span><br><span class="line"><span class="comment">// return n1 + n2 + n3 + n4;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="comment">//上面的三个方法名称相同，功能相同, 参数个数不同-&gt; 使用可变参数优化</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. int... 表示接受的是可变参数，类型是int ,即可以接收多个int(0-多) </span></span><br><span class="line"><span class="comment">//2. 使用可变参数时，可以当做数组来使用 即 nums 可以当做数组</span></span><br><span class="line"><span class="comment">//3. 遍历 nums 求和即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;接收的参数个数=&quot; + nums.length);</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">res += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-使用细节"><a href="#5-1-使用细节" class="headerlink" title="5.1 使用细节"></a>5.1 使用细节</h2><ol><li>可变参数实参可以为 0 或 任意多个</li><li>可变参数实参可以为数组</li><li>可变参数实参本质就是数组</li><li>可变参数可以和普通类型的参数放在一个形参列表, 但是可变参数必须在后面</li><li>一个形参列表中只能有一个可变参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameterDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//细节: 可变参数的实参可以为数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">t1.f1(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;长度=&quot;</span> + nums.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//细节: 可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(String str, <span class="type">double</span>... nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//细节: 一个形参列表中只能出现一个可变参数</span></span><br><span class="line"><span class="comment">//下面的写法是错的.</span></span><br><span class="line"><span class="comment">// public void f3(int... nums1, double... nums2) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-练习"><a href="#5-2-练习" class="headerlink" title="5.2 练习"></a>5.2 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameterExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">HspMethod</span> <span class="variable">hm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">System.out.println(hm.showScore(<span class="string">&quot;milan&quot;</span> , <span class="number">90.1</span>, <span class="number">80.0</span> ));</span><br><span class="line">System.out.println(hm.showScore(<span class="string">&quot;terry&quot;</span> , <span class="number">90.1</span>, <span class="number">80.0</span>,<span class="number">10</span>,<span class="number">30.5</span>,<span class="number">70</span> ));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span>  &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有三个方法，分别实现返回姓名和两门课成绩(总分)，</span></span><br><span class="line"><span class="comment">返回姓名和三门课成绩(总分)，返回姓名和五门课成绩（总分）。</span></span><br><span class="line"><span class="comment">封装成一个可变参数的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析1. 方法名 showScore  2. 形参(String ,double... ) 3. 返回String</span></span><br><span class="line"><span class="comment">//听课小伙伴，老师要求必须自己动手写</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">showScore</span><span class="params">(String name ,<span class="type">double</span>... scores )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">totalScore</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">totalScore += scores[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name + <span class="string">&quot; 有 &quot;</span> +scores.length + <span class="string">&quot;门课的成绩总分为=&quot;</span> + totalScore;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="六、作用域"><a href="#六、作用域" class="headerlink" title="六、作用域"></a>六、作用域</h1><ol><li>在java编程中， 主要的变量就是属性 (成员变量) 和局部变量。</li><li>我们说的局部变量一般是指在成员方法中定义的变量。 [举例Cat类: cry]</li><li>java中作用域的分类<br>全局变量:也就是<strong>属性</strong>，作用域为整个类体Cat类: cry eat等方法使用属性<br>局部变量:也就是除了属性之外的其他变量，作用域为定义它的代码块中</li><li>全局变量 (属性) 可以不赋值，直接使用，因为有默认值 (与数组默认值一样)，局部变量必须赋值后才能使用，因为没有默认值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarScope</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="comment">//全局变量：也就是属性，作用域为整个类体 Cat类：cry eat 等方法使用属性</span></span><br><span class="line"><span class="comment">//属性在定义时，可以直接赋值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//指定的值是 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量(属性)可以不赋值，直接使用，因为有默认值，</span></span><br><span class="line"><span class="type">double</span> weight;  <span class="comment">//默认值是0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//局部变量必须赋值后，才能使用，因为没有默认值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;北京的猫&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;num=&quot;</span> + num);</span><br><span class="line">System.out.println(<span class="string">&quot;address=&quot;</span> + address);</span><br><span class="line">System.out.println(<span class="string">&quot;weight=&quot;</span> + weight);<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1. 局部变量一般是指在成员方法中定义的变量</span></span><br><span class="line"><span class="comment">//2. n 和  name 就是局部变量</span></span><br><span class="line"><span class="comment">//3. n 和 name的作用域在 cry方法中</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;在cry中使用属性 age=&quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;在eat中使用属性 age=&quot;</span> + age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(&quot;在eat中使用 cry的变量 name=&quot; + name);//错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>属性和局部变量可以重名，访问时遵循就近原则。</p></li><li><p>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名</p></li><li><p>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。</p><p>局部变量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁。即在一次方法调用过程中。</p></li><li><p>作用域范围不同<br>全局变量&#x2F;属性:可以被本类使用，或其他类使用(通过对象调用)<br>局部变量:只能在本类中对应的方法中使用</p></li><li><p>修饰符不同<br>全局变量&#x2F;属性可以加修饰符<br>局部变量不可以加修饰符</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarScopeDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。</span></span><br><span class="line"><span class="comment">局部变量，生命周期较短，伴随着它的代码块的执行而创建，</span></span><br><span class="line"><span class="comment">伴随着代码块的结束而销毁。即在一次方法调用过程中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//p1.say();//当执行say方法时，say方法的局部变量比如name,会创建，当say执行完毕后</span></span><br><span class="line"><span class="comment">//name局部变量就销毁,但是属性(全局变量)仍然可以使用</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">t1.test(); <span class="comment">//第1种跨类访问对象属性的方式</span></span><br><span class="line"></span><br><span class="line">t1.test2(p1);<span class="comment">//第2种跨类访问对象属性的方式</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量/属性：可以被本类使用，或其他类使用（通过对象调用)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">System.out.println(p1.name);<span class="comment">//jack</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">System.out.println(p.name);<span class="comment">//jack</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="comment">//细节: 属性可以加修饰符(public protected private..)</span></span><br><span class="line"><span class="comment">//      局部变量不能加修饰符</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//细节 属性和局部变量可以重名，访问时遵循就近原则</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;king&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;say() name=&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"><span class="comment">//String address = &quot;上海&quot;;//错误,重复定义变量</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;<span class="comment">//可以</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、构造器"><a href="#七、构造器" class="headerlink" title="七、构造器"></a>七、构造器</h1><p>基本语法：</p><p>​[修饰符] 方法名(形参列表){</p><p>​方法体;</p><p>​}</p><ol><li><p>构造器的修饰符可以默认， 也可以是 public protected private</p></li><li><p>构造器没有返回值</p></li><li><p>方法名 和类名字必须一样</p></li><li><p>参数列表 和 成员方法一样的规则</p></li><li><p>构造器的调用, 由系统完成</p></li></ol><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化。它有几个特点：</p><ol><li><p>方法名和类名相同</p></li><li><p>没有返回值</p></li><li><p>在创建对象时，系统会自动的调用该类的构造器完成对象的初始化。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//当我们new 一个对象时，直接通过构造器指定名字和年龄</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">80</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1的信息如下&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;p1对象name=&quot;</span> + p1.name);<span class="comment">//smith</span></span><br><span class="line">System.out.println(<span class="string">&quot;p1对象age=&quot;</span> + p1.age);<span class="comment">//80</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在创建人类的对象时，就直接指定这个对象的年龄和姓名</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. 构造器没有返回值, 也不能写void</span></span><br><span class="line"><span class="comment">//2. 构造器的名称和类Person一样</span></span><br><span class="line"><span class="comment">//3. (String pName, int pAge) 是构造器形参列表，规则和成员方法一样</span></span><br><span class="line"><span class="keyword">public</span>  <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造器被调用~~ 完成对象的属性初始化&quot;</span>);</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-1-使用细节"><a href="#7-1-使用细节" class="headerlink" title="7.1 使用细节"></a>7.1 使用细节</h2><ol><li>一个类可以定义多个不同的构造器，即构造器重载<br>比如: 我们可以再给Person类定义个构造器用来创建对象的时候，只指定人名，不需要指定年龄</li><li>构造器名和类名要相同</li><li>构造器没有返回值</li><li>构造器是完成对象的初始化，并不是创建对象</li><li>在创建对象时,系统自动的调用该类的构造方法</li><li>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器(也叫默认构造器)，比如Dog (){},使用javap指令反编译看看</li><li>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;king&quot;</span>, <span class="number">40</span>);<span class="comment">//第1个构造器</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>);<span class="comment">//第2个构造器</span></span><br><span class="line"></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">//使用的是默认的无参构造器</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="comment">//如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器(也叫默认构造器)</span></span><br><span class="line"><span class="comment">//使用javap指令 反编译看看</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认构造器</span></span><br><span class="line"><span class="comment">Dog() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//一旦定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，</span></span><br><span class="line"><span class="comment">//除非显式的定义一下,即:  Dog()&#123;&#125;  写 (这点很重要)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String dName)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">Dog() &#123; <span class="comment">//显式的定义一下 无参构造器</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;<span class="comment">//默认0</span></span><br><span class="line"><span class="comment">//第1个构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第2个构造器, 只指定人名，不需要指定年龄</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">name = pName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-2-练习"><a href="#7-2-练习" class="headerlink" title="7.2 练习"></a>7.2 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面输出 name = null, age = 18</span></span><br><span class="line">System.out.println(<span class="string">&quot;p1的信息 name=&quot;</span> + p1.name + <span class="string">&quot; age=&quot;</span> + p1.age);</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;scott&quot;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">//下面输出 name = scott, age = 50</span></span><br><span class="line">System.out.println(<span class="string">&quot;p2的信息 name=&quot;</span> + p2.name + <span class="string">&quot; age=&quot;</span> + p2.age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在前面定义的Person类中添加两个构造器:</span></span><br><span class="line"><span class="comment"> * 第一个无参构造器：利用构造器设置所有人的age属性初始值都为18</span></span><br><span class="line"><span class="comment"> * 第二个带pName和pAge两个参数的构造器：</span></span><br><span class="line"><span class="comment"> * 使得每次创建Person对象的同时初始化对象的age属性值和name属性值。</span></span><br><span class="line"><span class="comment"> * 分别使用不同的构造器，创建对象.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;<span class="comment">//默认值 null</span></span><br><span class="line"><span class="type">int</span> age;<span class="comment">//默认 0</span></span><br><span class="line"><span class="comment">//第一个无参构造器：利用构造器设置所有人的age属性初始值都为18</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">age = <span class="number">18</span>;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个带pName和pAge两个参数的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> pAge)</span> &#123;</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="八、对象创建流程分析-面试"><a href="#八、对象创建流程分析-面试" class="headerlink" title="八、对象创建流程分析 (面试)"></a>八、对象创建流程分析 (面试)</h1><ol><li>在方法区中加载 <code>Person</code> 类信息 (Person.class), 只会加载一次</li><li>在堆区中为新 <code>new</code> 的对象分配空间, 具有一个内存地址</li><li>先进行属性的默认初始化, <code>age = 0, name = null</code></li><li>然后进行属性的显示初始化, <code>age = 90, name = null</code></li><li>最后进行构造器的初始化, <code>age = 20, name = &quot;小倩&quot;</code></li><li>将对象在堆区中的地址返回给变量 <code>p</code>, 这个 <code>p</code> 是对象名, 也可以说是对象的引用, 真正的对象是堆区中开辟的那块空间, <code>p</code> 只是一个代理</li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230130214107797.png" alt="分析流程"></p><hr><h1 id="十、this"><a href="#十、this" class="headerlink" title="十、this"></a>十、this</h1><h2 id="10-1-问题引出"><a href="#10-1-问题引出" class="headerlink" title="10.1 问题引出"></a>10.1 问题引出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">This01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大壮&quot;</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;dog1的hashcode=&quot;</span> + dog1.hashCode());</span><br><span class="line"><span class="comment">//dog1调用了 info()方法</span></span><br><span class="line">dog1.info(); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;大黄&quot;</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;dog2的hashcode=&quot;</span> + dog2.hashCode());</span><br><span class="line">dog2.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123; <span class="comment">//类</span></span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">// public Dog(String dName, int  dAge)&#123;//构造器</span></span><br><span class="line"><span class="comment">// name = dName;</span></span><br><span class="line"><span class="comment">// age = dAge;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//如果我们构造器的形参，能够直接写成属性名，就更好了</span></span><br><span class="line"><span class="comment">//但是出现了一个问题，根据变量的作用域原则</span></span><br><span class="line"><span class="comment">//构造器的name 是局部变量，而不是属性</span></span><br><span class="line"><span class="comment">//构造器的age  是局部变量，而不是属性</span></span><br><span class="line"><span class="comment">//==&gt; 引出this关键字来解决</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span>  age)</span>&#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//this.name 就是当前对象的属性name</span></span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="comment">//this.age 就是当前对象的属性age</span></span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">System.out.println(<span class="string">&quot;this.hashCode=&quot;</span> + <span class="built_in">this</span>.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;<span class="comment">//成员方法,输出属性x信息</span></span><br><span class="line">System.out.println(<span class="string">&quot;this.hashCode=&quot;</span> + <span class="built_in">this</span>.hashCode());</span><br><span class="line">System.out.println(name + <span class="string">&quot;\t&quot;</span> + age + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="10-2-深入理解-this"><a href="#10-2-深入理解-this" class="headerlink" title="10.2 深入理解 this"></a>10.2 深入理解 this</h2><p><code>this</code> 就是每个对象创建之后赋予的一个隐藏属性, 哪个对象调用, <code>this</code> 就代表哪个对象 (字面意思, this 的值就是这个对象在堆区的地址)</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230130214921509.png" alt="this 在内存中的机制"></p><hr><h2 id="10-3-使用细节"><a href="#10-3-使用细节" class="headerlink" title="10.3 使用细节"></a>10.3 使用细节</h2><ol><li><p>this 关键字可以用来访问本类的属性、方法、构造器</p></li><li><p>this 用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法：this.方法名(参数列表);</p></li><li><p>访问构造器语法：this(参数列表); 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一条语句)</p></li><li><p>this 不能在类定义的外部使用，只能在类定义的方法中使用</p></li></ol><hr><h2 id="10-4-练习"><a href="#10-4-练习" class="headerlink" title="10.4 练习"></a>10.4 练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mary&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;p1和p2比较的结果=&quot;</span> + p1.compareTo(p2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义Person类，里面有name、age属性，并提供compareTo比较方法，</span></span><br><span class="line"><span class="comment">用于判断是否和另一个人相等，提供测试类TestPerson用于测试, </span></span><br><span class="line"><span class="comment">名字和年龄完全一样，就返回true, 否则返回false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compareTo比较方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span> &#123;</span><br><span class="line"><span class="comment">//名字和年龄完全一样</span></span><br><span class="line"><span class="comment">// if(this.name.equals(p.name) &amp;&amp; this.age == p.age) &#123;</span></span><br><span class="line"><span class="comment">// return true;</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="十一、练习"><a href="#十一、练习" class="headerlink" title="十一、练习"></a>十一、练习</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">A01</span> <span class="variable">a01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A01</span>();</span><br><span class="line"><span class="type">double</span>[] arr = &#123;<span class="number">1</span>, <span class="number">1.4</span>, -<span class="number">1.3</span>, <span class="number">89.8</span>, <span class="number">123.8</span> , <span class="number">66</span>&#125;; <span class="comment">//;&#123;&#125;;</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">res</span> <span class="operator">=</span> a01.max(arr);</span><br><span class="line"><span class="keyword">if</span>(res != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;arr的最大值=&quot;</span> + res);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;arr的输入有误, 数组不能为null, 或者&#123;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写类A01，定义方法max，实现求某个double数组的最大值，并返回</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 类名 A01</span></span><br><span class="line"><span class="comment">2. 方法名 max</span></span><br><span class="line"><span class="comment">3. 形参 (double[])</span></span><br><span class="line"><span class="comment">4. 返回值 double</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">先完成正常业务，然后再考虑代码健壮性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">max</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line"><span class="comment">//老韩先判断arr是否为null,然后再判断 length 是否&gt;0</span></span><br><span class="line"><span class="keyword">if</span>( arr!= <span class="literal">null</span> &amp;&amp; arr.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保证arr至少有一个元素 </span></span><br><span class="line"><span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];<span class="comment">//假定第一个元素就是最大值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(max &lt; arr[i]) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> max;<span class="comment">//double</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">String[] strs = &#123;<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;mary&quot;</span>,<span class="string">&quot;milan&quot;</span>&#125;;</span><br><span class="line"><span class="type">A02</span> <span class="variable">a02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A02</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> a02.find(<span class="string">&quot;milan&quot;</span>, strs);</span><br><span class="line">System.out.println(<span class="string">&quot;查找的index=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写类A02，定义方法find，实现查找某字符串是否在字符串数组中，</span></span><br><span class="line"><span class="comment">//并返回索引，如果找不到，返回-1</span></span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1. 类名 A02</span></span><br><span class="line"><span class="comment">//2. 方法名 find</span></span><br><span class="line"><span class="comment">//3. 返回值 int</span></span><br><span class="line"><span class="comment">//4. 形参 (String , String[])</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//自己补充代码健壮性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A02</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(String findStr, String[] strs)</span> &#123;</span><br><span class="line"><span class="comment">//直接遍历字符串数组，如果找到，则返回索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(findStr.equals(strs[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有，就返回-1</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;笑傲江湖&quot;</span>, <span class="number">300</span>);</span><br><span class="line">book.info();</span><br><span class="line">book.updatePrice();<span class="comment">//更新价格</span></span><br><span class="line">book.info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写类Book,  定义方法updatePrice，实现更改某本书的价格，</span></span><br><span class="line"><span class="comment">具体：如果价格&gt;150,则更改为150，如果价格&gt;100,更改为100，否则不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析</span></span><br><span class="line"><span class="comment">1. 类名 Book</span></span><br><span class="line"><span class="comment">2. 属性 price, name</span></span><br><span class="line"><span class="comment">3. 方法名 updatePrice</span></span><br><span class="line"><span class="comment">4. 形参 ()</span></span><br><span class="line"><span class="comment">5. 返回值 void</span></span><br><span class="line"><span class="comment">6. 提供一个构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">double</span> price;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//如果方法中，没有 price 局部变量, this.price 等价 price</span></span><br><span class="line"><span class="keyword">if</span>(price &gt; <span class="number">150</span>) &#123;</span><br><span class="line">price = <span class="number">150</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(price &gt; <span class="number">100</span> ) &#123;</span><br><span class="line">price = <span class="number">100</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示书籍情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;书名=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; 价格=&quot;</span> + <span class="built_in">this</span>.price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework04</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] oldArr = &#123;<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">A03</span> <span class="variable">a03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A03</span>();</span><br><span class="line"><span class="type">int</span>[] newArr = a03.copyArr(oldArr);</span><br><span class="line"><span class="comment">//遍历newArr,验证</span></span><br><span class="line">System.out.println(<span class="string">&quot;==返回的newArr元素情况==&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">System.out.print(newArr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编写类A03, 实现数组的复制功能copyArr，输入旧数组，返回一个新数组，元素和旧数组一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] copyArr(<span class="type">int</span>[] oldArr) &#123;</span><br><span class="line"><span class="comment">//在堆中，创建一个长度为 oldArr.length 数组</span></span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[oldArr.length];</span><br><span class="line"><span class="comment">//遍历 oldArr,将元素拷贝到 newArr</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; oldArr.length; i++) &#123;</span><br><span class="line">newArr[i] = oldArr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework05</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;面积=&quot;</span> + circle.area());</span><br><span class="line">System.out.println(<span class="string">&quot;周长=&quot;</span> + circle.len());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个圆类Circle, 定义属性：半径，提供显示圆周长功能的方法， 提供显示圆面积的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123; <span class="comment">//面积</span></span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">len</span><span class="params">()</span> &#123; <span class="comment">//周长</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * Math.PI * radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework06</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Cale</span> <span class="variable">cale</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cale</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;和=&quot;</span> + cale.sum());</span><br><span class="line">System.out.println(<span class="string">&quot;差=&quot;</span> + cale.minus());</span><br><span class="line">System.out.println(<span class="string">&quot;乘=&quot;</span> + cale.mul());</span><br><span class="line"><span class="type">Double</span> <span class="variable">divRes</span> <span class="operator">=</span> cale.div();</span><br><span class="line"><span class="keyword">if</span>(divRes != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;除=&quot;</span> + divRes);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 编程创建一个Cale计算类，在其中定义2个变量表示两个操作数，</span></span><br><span class="line"><span class="comment"> 定义四个方法实现求和、差、乘、商(要求除数为0的话，要提示) 并创建两个对象，分别测试 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cale</span> &#123;</span><br><span class="line"><span class="type">double</span> num1;</span><br><span class="line"><span class="type">double</span> num2;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cale</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.num1 = num1;</span><br><span class="line"><span class="built_in">this</span>.num2 = num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//差</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">minus</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//乘积</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">mul</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">div</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span>(num2 == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num2 不能为0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 / num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework09</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Music</span> <span class="variable">music</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Music</span>(<span class="string">&quot;笑傲江湖&quot;</span>, <span class="number">300</span>);</span><br><span class="line">music.play();</span><br><span class="line">System.out.println(music.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">义Music类，里面有音乐名name、音乐时长times属性，</span></span><br><span class="line"><span class="comment">并有播放play功能和返回本身属性信息的功能方法getInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Music</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> times;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Music</span><span class="params">(String name, <span class="type">int</span> times)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.times = times;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//播放play功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;音乐 &quot;</span> + name + <span class="string">&quot; 正在播放中.... 时长为&quot;</span> + times + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回本身属性信息的功能方法getInfo</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;音乐 &quot;</span> + name + <span class="string">&quot; 播放时间为&quot;</span> + times;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework10</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> j=i++; </span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//运行它</span></span><br><span class="line">Demo d1=<span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="type">Demo</span> <span class="variable">d2</span> <span class="operator">=</span> d1;</span><br><span class="line">d2.m();</span><br><span class="line">System.out.println(d1.i);</span><br><span class="line">System.out.println(d2.i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework12</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个Employee类， </span></span><br><span class="line"><span class="comment">属性有(名字，性别，年龄，职位，薪水)， 提供3个构造方法，可以初始化  </span></span><br><span class="line"><span class="comment">(1) (名字，性别，年龄，职位，薪水), </span></span><br><span class="line"><span class="comment">(2) (名字，性别，年龄) (3) (职位，薪水), 要求充分复用构造器  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="comment">//名字，性别，年龄，职位，薪水</span></span><br><span class="line">String name;</span><br><span class="line"><span class="type">char</span> gender;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String job;</span><br><span class="line"><span class="type">double</span> sal;</span><br><span class="line"><span class="comment">//因为要求可以复用构造器，因此老韩先写属性少的构造器</span></span><br><span class="line"><span class="comment">//职位，薪水</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String job, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.job = job;</span><br><span class="line"><span class="built_in">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//名字，性别，年龄</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.gender = gender;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//名字，性别，年龄，职位，薪水</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String job, <span class="type">double</span> sal, String name, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(name, gender, age);<span class="comment">//使用到 前面的 构造器</span></span><br><span class="line"><span class="built_in">this</span>.job = job;</span><br><span class="line"><span class="built_in">this</span>.sal = sal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework13</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Circle</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="type">PassObject</span> <span class="variable">po</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PassObject</span>();</span><br><span class="line">po.printAreas(c, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目要求：</span></span><br><span class="line"><span class="comment">(1) 定义一个Circle类，包含一个double型的radius属性代表圆的半径，findArea()方法返回圆的面积。</span></span><br><span class="line"><span class="comment">(2) 定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：</span></span><br><span class="line"><span class="comment">     public void printAreas(Circle c, int times) //方法签名/声明</span></span><br><span class="line"><span class="comment">(3) 在printAreas方法中打印输出1到times之间的每个整数半径值，以及对应的面积。例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。</span></span><br><span class="line"><span class="comment">(4) 在main方法中调用printAreas()方法，调用完毕后输出当前半径值。程序运行结果如图所示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123; <span class="comment">//类</span></span><br><span class="line"><span class="type">double</span> radius;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123; <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;<span class="comment">//返回面积</span></span><br><span class="line"><span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加方法setRadius, 修改对象的半径值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAreas</span><span class="params">(Circle c, <span class="type">int</span> times)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;radius\tarea&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= times; i++) &#123;<span class="comment">//输出1到times之间的每个整数半径值</span></span><br><span class="line">c.setRadius(i) ; <span class="comment">//修改c 对象的半径值</span></span><br><span class="line">System.out.println((<span class="type">double</span>)i + <span class="string">&quot;\t&quot;</span> + c.findArea());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;   <span class="comment">//公有类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">9</span>; <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count1</span><span class="params">()</span> &#123; <span class="comment">//Test类的成员方法</span></span><br><span class="line"> count=<span class="number">10</span>;<span class="comment">//这个count就是属性  改成 10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + count); <span class="comment">//10  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count2</span><span class="params">()</span> &#123;  <span class="comment">//Test类的成员方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + count++);</span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">//这是Test类的main方法, 任何一个类，都可有main</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">       <span class="comment">//老韩解读</span></span><br><span class="line">       <span class="comment">//1.  new Test()是匿名对象， 匿名对象使用后，就不能使用</span></span><br><span class="line">       <span class="comment">//2.  new Test().count1() 创建好匿名对象后, 就调用count1()</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Test</span>().count1(); </span><br><span class="line">      </span><br><span class="line">       Test t1= <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">       t1.count2();</span><br><span class="line">       t1.count2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习（一）-- Java基础</title>
      <link href="/2023/01/26/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89--%20Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/26/Java%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89--%20Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习（一）–-Java基础"><a href="#Java学习（一）–-Java基础" class="headerlink" title="Java学习（一）– Java基础"></a>Java学习（一）– Java基础</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2">https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2</a></p></blockquote><h1 id="一、Java概述"><a href="#一、Java概述" class="headerlink" title="一、Java概述"></a>一、Java概述</h1><h2 id="1-1-Java特性"><a href="#1-1-Java特性" class="headerlink" title="1.1 Java特性"></a>1.1 Java特性</h2><ol><li><p>Java 语言是面向对象的(<strong>oop</strong>)</p></li><li><p>Java 语言是健壮的。Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</p></li><li><p>Java 语言是<strong>跨平台性的</strong>。(即: 一个编译好的 .class 文件可以在多个系统下运行，这种特性称为跨平台)</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102173050737.png" alt="Java的跨平台性"></p></li><li><p>Java 语言是解释型的</p><p>解释性语言：<code>javascript</code>, <code>PHP</code>, <code>Java</code> 编译性语言: <code>c / c++</code></p><p>区别是：解释性语言，编译后的代码，不能直接被机器执行,需要解释器来执行, 编译性语言, 编译后的代码, 可以直接被机器执行: <code>c /c++</code></p></li></ol><hr><h2 id="1-2-Java运行机制及过程"><a href="#1-2-Java运行机制及过程" class="headerlink" title="1.2 Java运行机制及过程"></a>1.2 Java运行机制及过程</h2><h3 id="1-2-1-跨平台性"><a href="#1-2-1-跨平台性" class="headerlink" title="1.2.1 跨平台性"></a>1.2.1 跨平台性</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102173215898.png" alt="跨平台性"></p><h3 id="1-2-2-Java虚拟机-–-JVM"><a href="#1-2-2-Java虚拟机-–-JVM" class="headerlink" title="1.2.2 Java虚拟机 – JVM"></a>1.2.2 Java虚拟机 – JVM</h3><blockquote><p>JVM <code>Java Virtual Machine</code></p></blockquote><ol><li><code>JVM</code> 是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器，包含在 <code>JDK</code> 中</li><li>对于不同的平台，有不同的虚拟机</li><li>Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102173434901.png" alt="不同平台的不同虚拟机"></p><h3 id="1-2-3-Java开发工具包-–-JDK"><a href="#1-2-3-Java开发工具包-–-JDK" class="headerlink" title="1.2.3 Java开发工具包 – JDK"></a>1.2.3 Java开发工具包 – JDK</h3><blockquote><p>JDK <code>Java Development Kit</code></p></blockquote><ol><li>JDK &#x3D; JRE + Java 的开发工具集（例如 Javac, Java 编译工具等)</li><li>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了</li></ol><h3 id="1-2-4-Java运行环境-–-JRE"><a href="#1-2-4-Java运行环境-–-JRE" class="headerlink" title="1.2.4 Java运行环境 – JRE"></a>1.2.4 Java运行环境 – JRE</h3><blockquote><p>JRE <code>Java Runtime Environment</code></p></blockquote><ol><li><p>JRE &#x3D; JVM +  Java SE 标准类库 ( Java 的核心类库 )</p></li><li><p>包括 Java 虚拟机 ( <code>JVM Java Virtual Machine</code> ) 和 Java 程序所需的核心类库等，</p><p>如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可</p></li></ol><hr><h2 id="1-3-JDK的下载安装"><a href="#1-3-JDK的下载安装" class="headerlink" title="1.3 JDK的下载安装"></a>1.3 JDK的下载安装</h2><blockquote><p>本博客不包含此目的, 请自行百度</p></blockquote><hr><h2 id="1-4-Java-快速入门"><a href="#1-4-Java-快速入门" class="headerlink" title="1.4 Java 快速入门"></a>1.4 Java 快速入门</h2><p>键入 <code>main + Enter</code> 快速生成 <code>public static void main(String[] args) &#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个源文件中最多只能有一个 public 类, 其他类个数不限</span></span><br><span class="line"><span class="comment">//编译后, 每一个类都对应一个 .class 文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// main 方法也可以写在非 public 类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-1-开发步骤"><a href="#1-4-1-开发步骤" class="headerlink" title="1.4.1 开发步骤"></a>1.4.1 开发步骤</h3><ol><li>将 Java 代码编写到扩展名为 .java 的文件中</li><li>通过 javac 命令对该 java 文件进行编译，生成 .class 文件</li><li>通过 java 命令对生成的 class 文件进行运行</li></ol><h3 id="1-4-2-运行原理"><a href="#1-4-2-运行原理" class="headerlink" title="1.4.2 运行原理"></a>1.4.2 运行原理</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102174440340.png" alt="运行原理"></p><h3 id="1-4-3-执行流程"><a href="#1-4-3-执行流程" class="headerlink" title="1.4.3 执行流程"></a>1.4.3 执行流程</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102174643629.png" alt="执行流程"></p><h3 id="1-4-4-细节说明"><a href="#1-4-4-细节说明" class="headerlink" title="1.4.4 细节说明"></a>1.4.4 细节说明</h3><ol><li>Java 源文件扩展名为 .java, 源文件基本组成部分是类 (class)</li><li>Java 程序入口是 <code>main()</code> 方法, 书写格式固定: <code>public static void main(String[] args) &#123;&#125;</code></li><li>Java 严格区分大小写</li><li>每个语句以 <code>;</code> 结束</li><li>注意大括号 <code>&#123;&#125;</code></li><li>一个源文件中只能有 1 个 <code>public</code> 类, 其他类个数不限</li><li>如果源文件中有一个 <code>public</code> 类, 则源文件名要与 <code>public</code> 类名相同</li><li>可以将 <code>main</code> 方法写在 非 <code>public</code> 类 中, 运行非 <code>public</code> 类, 入口见就是非 <code>public</code> 类中的 <code>main</code> 方法</li></ol><hr><h2 id="1-5-快速学会-Java"><a href="#1-5-快速学会-Java" class="headerlink" title="1.5 快速学会 Java"></a>1.5 快速学会 Java</h2><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102175210039.png" alt="快速学会Java"></p><hr><h2 id="1-6-Java-转义字符"><a href="#1-6-Java-转义字符" class="headerlink" title="1.6 Java 转义字符"></a>1.6 Java 转义字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//\t ：一个制表位，实现对齐的功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;北京\t 天津\t 上海&quot;</span>);</span><br><span class="line"><span class="comment">// \n ：换行符</span></span><br><span class="line">System.out.println(<span class="string">&quot;jack\nsmith\nmary&quot;</span>);</span><br><span class="line"><span class="comment">// \\ ：一个\ \\</span></span><br><span class="line">System.out.println(<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>);</span><br><span class="line"><span class="comment">// \&quot; :一个&quot;</span></span><br><span class="line">System.out.println(<span class="string">&quot;老韩说:\&quot;要好好学习 java,有前途\&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// \&#x27; ：一个&#x27;</span></span><br><span class="line">System.out.println(<span class="string">&quot;老韩说:\&#x27;要好好学习 java,有前途\&#x27;&quot;</span>);</span><br><span class="line"><span class="comment">// \r :一个回车</span></span><br><span class="line">System.out.println(<span class="string">&quot;韩顺平教育\r 北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-7-Java-注释"><a href="#1-7-Java-注释" class="headerlink" title="1.7 Java 注释"></a>1.7 Java 注释</h2><p>键入 <code>/** + Enter</code> 快速生成文档注释</p><p>键入 <code>sout</code> 快速生成 <code>System.out.println();</code></p><p>文档注释不能随便写, 只能使用 <code>Javadoc标签</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 月华.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="comment">//编写一个 main 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//单行注释</span></span><br><span class="line">    <span class="comment">//选中，然后输入 tab 整体右移</span></span><br><span class="line"><span class="comment">//选中，然后输入 shift+tab 整体左移</span></span><br><span class="line"><span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">   多行注释里面不允许有多行注释嵌套</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> n1 + n2;</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javadoc标签:</p><table><thead><tr><th>标签</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>@author</td><td>标识一个类的作者</td><td>@author description</td></tr><tr><td>@deprecated</td><td>指名一个过期的类或成员</td><td>@deprecated description</td></tr><tr><td>{@docRoot}</td><td>指明当前文档根目录的路径</td><td>Directory Path</td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td><td>@exception exception-name explanation</td></tr><tr><td>{@inheritDoc}</td><td>从直接父类继承的注释</td><td>Inherits a comment from the immediate surperclass.</td></tr><tr><td>{@link}</td><td>插入一个到另一个主题的链接</td><td>{@link name text}</td></tr><tr><td>{@linkplain}</td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td>Inserts an in-line link to another topic.</td></tr><tr><td>@param</td><td>说明一个方法的参数</td><td>@param parameter-name explanation</td></tr><tr><td>@return</td><td>说明返回值类型</td><td>@return explanation</td></tr><tr><td>@see</td><td>指定一个到另一个主题的链接</td><td>@see anchor</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td><td>@serial description</td></tr><tr><td>@serialData</td><td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td><td>@serialData description</td></tr><tr><td>@serialField</td><td>说明一个ObjectStreamField组件</td><td>@serialField name type description</td></tr><tr><td>@since</td><td>标记当引入一个特定的变化时</td><td>@since release</td></tr><tr><td>@throws</td><td>和 @exception标签一样.</td><td>The @throws tag has the same meaning as the @exception tag.</td></tr><tr><td>{@value}</td><td>显示常量的值，该常量必须是static属性。</td><td>Displays the value of a constant, which must be a static field.</td></tr><tr><td>@version</td><td>指定类的版本</td><td>@version info</td></tr></tbody></table><hr><h2 id="1-8-DOC-命令"><a href="#1-8-DOC-命令" class="headerlink" title="1.8 DOC 命令"></a>1.8 DOC 命令</h2><h3 id="1-8-1-DOC-基本原理"><a href="#1-8-1-DOC-基本原理" class="headerlink" title="1.8.1 DOC 基本原理"></a>1.8.1 DOC 基本原理</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102192317248.png" alt="DOC基本原理"></p><h3 id="1-8-2-相对路径-amp-绝对路径"><a href="#1-8-2-相对路径-amp-绝对路径" class="headerlink" title="1.8.2 相对路径 &amp; 绝对路径"></a>1.8.2 相对路径 &amp; 绝对路径</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102192346589.png" alt="相对路径 &amp; 绝对路径"></p><h3 id="1-8-3-常用-DOC-命令"><a href="#1-8-3-常用-DOC-命令" class="headerlink" title="1.8.3 常用 DOC 命令"></a>1.8.3 常用 DOC 命令</h3><ul><li><code>dir</code> : 查看当前目录有什么内容</li><li><code>cd</code> : 切换目录、盘符、上一级、根目录 – <code>cd /D c:</code> <code>cd d:\abc\test</code> <code>cd ..</code> <code>cd \</code></li><li><code>tree</code> : 查看目录树</li><li><code>cls</code> : 清屏</li><li><code>exit</code> : 退出 DOS</li><li><code>md </code>: 创建目录</li><li><code>rd</code> : 删除目录</li><li><code>copy</code> : 拷贝文件</li><li><code>del</code> : 删除文件</li><li><code>echo</code> : 输入内容到文件</li><li><code>move</code> : 剪切</li></ul><hr><h1 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h1><h2 id="2-1-底层原理"><a href="#2-1-底层原理" class="headerlink" title="2.1 底层原理"></a>2.1 底层原理</h2><blockquote><p>在内存中开辟一个地址, 将变量放在此地址, 地址指向变量的值</p></blockquote><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102192925529.png" alt="变量基本原理"></p><hr><h2 id="2-2-变量快速入门"><a href="#2-2-变量快速入门" class="headerlink" title="2.2 变量快速入门"></a>2.2 变量快速入门</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">public <span class="type">static</span> <span class="type">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//记录人的信息</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="type">double</span> score = <span class="number">88.9</span>;</span><br><span class="line"><span class="type">char</span> gender = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">String name = <span class="string">&quot;king&quot;</span>;</span><br><span class="line"><span class="comment">//输出信息, 快捷键</span></span><br><span class="line">System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(age);</span><br><span class="line">System.out.println(score);</span><br><span class="line">System.out.println(gender);</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量必须先声明，后使用, 即有顺序</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">50</span>;<span class="comment">//int</span></span><br><span class="line">System.out.println(a);<span class="comment">//50</span></span><br><span class="line"><span class="comment">//该区域的数据/值可以在同一类型范围内不断变化</span></span><br><span class="line"><span class="comment">//a = &quot;jack&quot;; //错</span></span><br><span class="line">a = <span class="number">88</span>; <span class="comment">//对</span></span><br><span class="line">System.out.println(a);<span class="comment">//88</span></span><br><span class="line"><span class="comment">//变量在同一个作用域内不能重名</span></span><br><span class="line"><span class="comment">//int a = 77;//错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">public <span class="type">static</span> <span class="type">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">666</span>;<span class="comment">//对</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-3-程序中的-号"><a href="#2-3-程序中的-号" class="headerlink" title="2.3 程序中的 + 号"></a>2.3 程序中的 <code>+</code> 号</h2><ol><li>当左右两边都是数值类型, 做加法运算</li><li>当左右两边有一个是字符串, 做拼接运算</li><li>运算顺序: 从左到右</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">98</span>); <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>); <span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> + <span class="string">&quot;hello&quot;</span>); <span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span> + <span class="number">3</span>); <span class="comment">//hello1003</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-4-基本数据类型"><a href="#2-4-基本数据类型" class="headerlink" title="2.4 基本数据类型"></a>2.4 基本数据类型</h2><blockquote><p>整数类型</p></blockquote><ul><li><code>byte[1]</code></li><li><code>short[2]</code></li><li><code>int[4]</code></li><li><code>long[8]</code></li></ul><blockquote><p>浮点型</p></blockquote><ul><li><code>float[4]</code></li><li><code>double[8]</code></li></ul><blockquote><p>字符型</p></blockquote><ul><li><code>char[2]</code></li></ul><blockquote><p>布尔型</p></blockquote><ul><li><code>boolean[1]</code></li></ul><hr><h2 id="2-5-整数类型"><a href="#2-5-整数类型" class="headerlink" title="2.5 整数类型"></a>2.5 整数类型</h2><ul><li>Java 整数类型有固定的范围和字段长度, 不受 OS 影响, 保证 Java 的可移植性</li><li>Java 中整型常量默认为 <code>int</code>, 声明 <code>long</code> 时后面加 <code>l</code> 或 <code>L</code></li><li>一般声明 <code>int</code>, 除非太大才用 <code>long</code></li><li>1 byte &#x3D; 8 bit</li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte [字节]</td><td>1 字节</td><td>-128 ~127</td></tr><tr><td>short [短整型]</td><td>2 字节</td><td>-(2^15) ~ 2^15 - 1<br />-32768 ~ 32767</td></tr><tr><td>int [整型]</td><td>4 字节</td><td>-2^31 ~ 2^31 - 1<br />-2147483648 ~ 2147483647</td></tr><tr><td>long [长整型]</td><td>8 字节</td><td>-2^63 ~ 2^63 - 1</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Java 的整型常量（具体值）默认为 int 型，声明 long 型常量须后加‘l’或‘L’</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//4 个字节</span></span><br><span class="line"><span class="comment">//int n2 = 1L;//不对</span></span><br><span class="line"><span class="type">long</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//对</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-6-浮点类型"><a href="#2-6-浮点类型" class="headerlink" title="2.6 浮点类型"></a>2.6 浮点类型</h2><ul><li>关于浮点数在机器中存放形式的简单说明, <code>浮点数 = 符号位 + 指数位 + 尾数位</code></li><li>尾数部分可能丢失，造成精度损失 (小数都是近似值)</li><li>Java 浮点类型也有固定的范围和字段长, 不受 OS 影响</li><li>Java 浮点型常量默认为 <code>double</code>, 声明 <code>float</code> 需要在后面加 <code>f</code> 或 <code>F</code></li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>float [单精度]</td><td>4 字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>double [双精度]</td><td>8 字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Java 的浮点型常量(具体值)默认为 double 型，声明 float 型常量，须后加‘f’或‘F&#x27;</span></span><br><span class="line"><span class="comment">// float num1 = 1.1; //错</span></span><br><span class="line"><span class="type">float</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1.1F</span>; <span class="comment">//对</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">1.1</span>; <span class="comment">//对</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">1.1f</span>; <span class="comment">//对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//十进制数形式：如：5.12 512.0f .512 (必须有小数点）</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">.123</span>; <span class="comment">//等价 0.123</span></span><br><span class="line">System.out.println(num5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法形式:如：5.12e2 [5.12 * 10 的 2 次方 ] 5.12E-2 [5.12 * 10 的 -2 次方]</span></span><br><span class="line">System.out.println(<span class="number">5.12e2</span>);<span class="comment">//512.0</span></span><br><span class="line">System.out.println(<span class="number">5.12E-2</span>);<span class="comment">//0.0512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通常情况下，应该使用 double 型，因为它比 float 型更精确。</span></span><br><span class="line"><span class="comment">//[举例说明]double num9 = 2.1234567851;float num10 = 2.1234567851F;</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num9</span> <span class="operator">=</span> <span class="number">2.1234567851</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">num10</span> <span class="operator">=</span> <span class="number">2.1234567851F</span>;</span><br><span class="line">System.out.println(num9); <span class="comment">//2.1234567851</span></span><br><span class="line">System.out.println(num10); <span class="comment">//2.1234567</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数使用陷阱: 2.7 和 8.1 / 3 比较</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num11</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num12</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>; <span class="comment">//2.7?</span></span><br><span class="line">System.out.println(num11);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num12);<span class="comment">//接近 2.7 的一个小数，而不是 2.7</span></span><br><span class="line"><span class="comment">//得到一个重要的使用点: 当我们对运算结果是小数的进行相等判断是，要小心</span></span><br><span class="line"><span class="comment">//应该是以两个数的差值的绝对值，在某个精度范围类判断</span></span><br><span class="line"><span class="keyword">if</span>( num11 == num12) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num11 == num12 相等&quot;</span>); <span class="comment">//未输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确的写法</span></span><br><span class="line"><span class="comment">//Math.abs()表示取绝对值</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num11 - num12) &lt; <span class="number">0.000001</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值非常小，到我的规定精度，认为相等...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Math.abs(num11 - num12));</span><br><span class="line"><span class="comment">//细节:如果是直接查询得的的小数或者直接赋值，是可以判断相等</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num13</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num14</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="keyword">if</span>( num13 == num14) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;num13 == num14 相等&quot;</span>); <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-字符类型"><a href="#2-7-字符类型" class="headerlink" title="2.7 字符类型"></a>2.7 字符类型</h2><blockquote><p>字符类型可以表示单个字符,字符类型是 <code>char</code>，<code>char</code> 是两个字节(可以存放汉字)，多个字符我们用字符串 <code>String</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//字符常量是用 &#x27;&#x27; 单引号引起来的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在 java 中，char 的本质是一个整数，在默认输出时，是 unicode 码对应的字符</span></span><br><span class="line"><span class="comment">//要输出对应的数字，可以(int)字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line">System.out.println(c1); <span class="comment">// a</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//输出&#x27;a&#x27; 对应的 数字</span></span><br><span class="line">System.out.println((<span class="type">int</span>)c2);</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;韩&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c3);<span class="comment">//38889</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">38889</span>;</span><br><span class="line">System.out.println(c4);<span class="comment">//韩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char 类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码. System.out.println(&#x27;a&#x27; + 10);//107</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span> + <span class="number">1</span>;<span class="comment">//98+1==&gt; 99</span></span><br><span class="line">System.out.println((<span class="type">int</span>)c5); <span class="comment">//99</span></span><br><span class="line">System.out.println(c5); <span class="comment">//99-&gt;对应的字符-&gt;编码表 ASCII(规定好的)=&gt;c</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">在内存中:</span></span><br><span class="line"><span class="comment">存储: &#x27;a&#x27; ===&gt; 97 ===&gt; 二进制(110001) ===&gt; 存储</span></span><br><span class="line"><span class="comment">读取: 二进制(110001) ===&gt; 97 ===&gt; &#x27;a&#x27; ===&gt; 显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Java中允许使用转义字符作为字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c6</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-8-布尔类型"><a href="#2-8-布尔类型" class="headerlink" title="2.8 布尔类型"></a>2.8 布尔类型</h2><ul><li>只允许 <code>true</code> 和 <code>false</code> , 不允许使用 0 或 非0 来取代 (与 C语言 不一样)</li><li>boolean 类型占 1 个字节</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示判断成绩是否通过的案例</span></span><br><span class="line"><span class="comment">//定义一个布尔变量</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isPass</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(isPass == <span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;考试通过，恭喜&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;考试没有通过，下次努力&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-9-字符编码表"><a href="#2-9-字符编码表" class="headerlink" title="2.9 字符编码表"></a>2.9 字符编码表</h2><blockquote><p><code>ASCII</code> 一个字节表示, 共 128 个字符, 实际可以用 256 个, 只用了 128 个</p></blockquote><ul><li>缺点: 不能表示所有字符</li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102201801748.png" alt="ASCII控制字符"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102201837033.png" alt="ASCII可显示字符"></p><blockquote><p><code>Unicode</code> 使用两个字节表示字符, 汉子与字母都是两个字节, 兼容 ASCII 码</p></blockquote><ul><li>优点: 没有乱码问题, 世界上所有符号都有编码</li><li>缺点: 浪费空间</li></ul><blockquote><p><code>uft-8</code> Unicoude 的改进, 字母使用 1 个字节, 汉字使用 3 个字节</p></blockquote><ul><li>优点: 大小可变, 使用 1-6个字节表示一个符号, 根据不同的符号而变化字节长度</li></ul><hr><h2 id="2-10-Java-API-文档"><a href="#2-10-Java-API-文档" class="headerlink" title="2.10 Java API 文档"></a>2.10 Java API 文档</h2><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102204000762.png" alt="Java类的组织形式"></p><hr><h2 id="2-11-基本数据类型自动转换"><a href="#2-11-基本数据类型自动转换" class="headerlink" title="2.11 基本数据类型自动转换"></a>2.11 基本数据类型自动转换</h2><ul><li>进行赋值或运算时, 精度小的类型会自动转为精度大的类型</li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230102210358699.png" alt="自动类型转换"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//细节 1： 有多种类型的数据混合运算时，</span></span><br><span class="line"><span class="comment">//系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//float d1 = n1 + 1.1;//错 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="comment">//double d1 = n1 + 1.1;//对 n1 + 1.1 =&gt; 结果类型是 double</span></span><br><span class="line"><span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> n1 + <span class="number">1.1F</span>;<span class="comment">//对 n1 + 1.1 =&gt; 结果类型是 float</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节 2: 当我们把精度(容量)大 的数据类型赋值给精度(容量)小 的数据类型时，</span></span><br><span class="line"><span class="comment">//就会报错，反之就会进行自动类型转换。</span></span><br><span class="line"><span class="comment">//int n2 = 1.1;//错误 double -&gt; int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节 3: (byte, short) 和 char 之间可以计算, 但是不会相互自动转换</span></span><br><span class="line"><span class="comment">// char c1 = b1; //错误， 原因 byte 不能自动转成 char</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(1)当把具体数赋给 byte 时，先判断该数是否在 byte 范围内，如果是就可以</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//对 , -128 ~ 127</span></span><br><span class="line"><span class="comment">// int n2 = 1; //n2 是 int</span></span><br><span class="line"><span class="comment">//(2)如果是变量赋值，判断类型</span></span><br><span class="line"><span class="comment">// byte b2 = n2; //错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节 4: byte，short，char 他们三者可以计算，在计算时首先转换为 int 类型</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//short s2 = b2 + s1;//错, b2 + s1 =&gt; int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> b2 + s1;<span class="comment">//对, b2 + s1 =&gt; int</span></span><br><span class="line"><span class="comment">//byte b4 = b2 + b3; //错误: b2 + b3 =&gt; int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节5: boolean 不参与转换</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//int num100 = pass;// boolean 不参与类型的自动转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节6: 自动提升原则： 表达式结果的类型自动提升为 操作数中最大的类型</span></span><br><span class="line"><span class="comment">//看一道题</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num200</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">num300</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num500</span> <span class="operator">=</span> b4 + s3 + num200 + num300; <span class="comment">//float -&gt; double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-12-基本数据类型自动转换"><a href="#2-12-基本数据类型自动转换" class="headerlink" title="2.12 基本数据类型自动转换"></a>2.12 基本数据类型自动转换</h2><ul><li><p>自动类型转换的逆过程，<strong>将容量大的数据类型转换为容量小的数据类型</strong>。</p><p>使用时要加上强制转换符 ( )，但可能造成<strong>精度降低或溢出</strong>,格外要注意</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//当数据大小 从 大-&gt;小, 就需要强制转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节1: 强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</span></span><br><span class="line"><span class="comment">//int x = (int)10*3.5+6*1.5;//编译错误： double -&gt; int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">10</span>*<span class="number">3.5</span>+<span class="number">6</span>*<span class="number">1.5</span>);<span class="comment">// (int)44.0 -&gt; 44</span></span><br><span class="line">System.out.println(x);<span class="comment">//44</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节2: char类型可以保存int的常量值, 但是不能保存int的变量值, 需要强转</span></span><br><span class="line"><span class="comment">//char c2 = m; //错误</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m; <span class="comment">//ok</span></span><br><span class="line">System.out.println(c3);<span class="comment">//100 对应的字符, d 字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节3: byte和short, char类型在运算时, 当做int类型处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">判断是否能够通过编译</span><br><span class="line"><span class="number">1.</span>  <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//ok</span></span><br><span class="line">s= s-<span class="number">9</span>; <span class="comment">//错误int -&gt; short</span></span><br><span class="line"><span class="number">2.</span>  byteb = <span class="number">10</span>; <span class="comment">//ok</span></span><br><span class="line">b = b+<span class="number">11</span>; <span class="comment">//错误int-&gt; byte</span></span><br><span class="line">b = (<span class="type">byte</span>)(b+<span class="number">11</span>); <span class="comment">//正确，使用强转</span></span><br><span class="line"><span class="number">3.</span>  <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">//ok</span></span><br><span class="line">floatd = <span class="number">.314F</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> c + i + d; <span class="comment">//ok float- &gt; double</span></span><br><span class="line"><span class="number">4.</span>  <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">14</span>; <span class="comment">//ok</span></span><br><span class="line"><span class="type">short</span> <span class="variable">t</span> <span class="operator">=</span> S + b; <span class="comment">//错误int -&gt; short</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-13-基本数据类型和-String-类型的转换"><a href="#2-13-基本数据类型和-String-类型的转换" class="headerlink" title="2.13 基本数据类型和 String 类型的转换"></a>2.13 基本数据类型和 String 类型的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//基本数据类型-&gt;String</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4.5</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1 + <span class="string">&quot; &quot;</span> + s2 + <span class="string">&quot; &quot;</span> + s3 + <span class="string">&quot; &quot;</span> + s4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//String-&gt;对应的基本数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//会在 OOP 讲对象和方法的时候回详细</span></span><br><span class="line"><span class="comment">//解读 使用 基本数据类型对应的包装类，的相应方法，得到基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num3</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line">System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line">System.out.println(num1);<span class="comment">//123</span></span><br><span class="line">System.out.println(num2);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num3);<span class="comment">//123.0</span></span><br><span class="line">System.out.println(num4);<span class="comment">//123</span></span><br><span class="line">System.out.println(num5);<span class="comment">//123</span></span><br><span class="line">System.out.println(num6);<span class="comment">//123</span></span><br><span class="line">System.out.println(b);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么把字符串转成字符 char --&gt; 其含义是把字符串的 第一个字符 转成 char (只有第一个字符这一个字符)</span></span><br><span class="line"><span class="comment">//解读 s5.charAt(0) 得到 s5 字符串的第一个字符 &#x27;1&#x27;</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//在将 String 类型转成 基本数据类型时，要确保 String 能转成有效的数据类型，</span></span><br><span class="line"><span class="comment">// 比如 我们可以把 &quot;123&quot; , 转成一个整数，但是不能把 &quot;hello&quot; 转成一个整数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//转成 int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n10</span> <span class="operator">=</span> Integer.parseInt(str); <span class="comment">//抛出异常，程序就会终止</span></span><br><span class="line">System.out.println(n1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h1><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><blockquote><p>对数值类型的变量进行运算</p></blockquote><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230103113103503.png" alt="算术运算符"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /使用</span></span><br><span class="line">System.out.println(<span class="number">10</span> / <span class="number">4</span>); <span class="comment">//从数学来看是 2.5, java 中 2</span></span><br><span class="line">System.out.println(<span class="number">10.0</span> / <span class="number">4</span>); <span class="comment">//java 是 2.5</span></span><br><span class="line"><span class="comment">// 注释快捷键 ctrl + /, 再次输入 ctrl + / 取消注释</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;<span class="comment">//java 中 10 / 4 = 2, 2=&gt;2.0</span></span><br><span class="line">System.out.println(d);<span class="comment">// 是 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// % 取模 ,取余</span></span><br><span class="line"><span class="comment">// 在 % 的本质 看一个公式!!!! a % b = a - a / b * b !!!!</span></span><br><span class="line"><span class="comment">// -10 % 3 =&gt; -10 - (-10) / 3 * 3 = -10 + 9 = -1</span></span><br><span class="line"><span class="comment">// 10 % -3 = 10 - 10 / (-3) * (-3) = 10 - 9 = 1</span></span><br><span class="line"><span class="comment">// -10 % -3 = (-10) - (-10) / (-3) * (-3) = -10 + 9 = -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % <span class="number">3</span>); <span class="comment">// -1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % -<span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % -<span class="number">3</span>);<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++的使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">i++;<span class="comment">//自增 等价于 i = i + 1; =&gt; i = 11</span></span><br><span class="line">++i;<span class="comment">//自增 等价于 i = i + 1; =&gt; i = 12</span></span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">//12</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作为表达式使用</span></span><br><span class="line"><span class="comment">前++：++i 先自增后赋值</span></span><br><span class="line"><span class="comment">后++：i++先赋值后自增</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//int k = ++j; //等价 j=j+1;k=j;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j++; <span class="comment">// 等价 k =j;j=j+1;</span></span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span> + k + <span class="string">&quot;j=&quot;</span> + j);<span class="comment">//8 9</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这段是重点</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//i-&gt;1</span></span><br><span class="line"> i1 = i++; <span class="comment">//规则使用临时变量: (1) temp=i;(2) i=i+1;(3)i=temp;</span></span><br><span class="line"> System.out.println(i1); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> i2 = ++i2; <span class="comment">//规则使用临时变量: (1) i=i+1;(2) temp=i;(3)i=temp;</span></span><br><span class="line"> System.out.println(i2); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试输出</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i3++;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;i2=&quot;</span> + i4);<span class="comment">//20</span></span><br><span class="line">i = --i4;</span><br><span class="line">System.out.print(<span class="string">&quot;i=&quot;</span> + i);<span class="comment">//19</span></span><br><span class="line">System.out.println(<span class="string">&quot;i2=&quot;</span> + i4);<span class="comment">//19</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.需求:</span></span><br><span class="line"><span class="comment">//假如还有 59 天放假，问：合 xx 个星期零 xx 天</span></span><br><span class="line"><span class="comment">//2.思路分析</span></span><br><span class="line"><span class="comment">//(1) 使用 int 变量 days 保存 天数</span></span><br><span class="line"><span class="comment">//(2) 一个星期是 7 天 星期数 weeks： days / 7 零 xx 天 leftDays days % 7</span></span><br><span class="line"><span class="comment">//(3) 输出</span></span><br><span class="line"><span class="comment">//3.走代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">25911</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">weeks</span> <span class="operator">=</span> days / <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">leftDays</span> <span class="operator">=</span> days % <span class="number">7</span>;</span><br><span class="line">System.out.println(days + <span class="string">&quot;天 合&quot;</span> + weeks + <span class="string">&quot;星期零&quot;</span> + leftDays + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.需求</span></span><br><span class="line"><span class="comment">//定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为</span></span><br><span class="line"><span class="comment">//：5/9*(华氏温度-100),请求出华氏温度对应的摄氏温度</span></span><br><span class="line"><span class="comment">//2 思路分析</span></span><br><span class="line"><span class="comment">//(1) 先定义一个 double huaShi 变量保存 华氏温度</span></span><br><span class="line"><span class="comment">//(2) 根据给出的公式，进行计算即可 5/9*(华氏温度-100)</span></span><br><span class="line"><span class="comment">// 考虑数学公式和 java 语言的特性</span></span><br><span class="line"><span class="comment">//(3) 将得到的结果保存到 double sheShi</span></span><br><span class="line"><span class="comment">//3 走代码</span></span><br><span class="line"><span class="type">double</span> <span class="variable">huaShi</span> <span class="operator">=</span> <span class="number">1234.6</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sheShi</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">9</span> * (huaShi - <span class="number">100</span>); <span class="comment">//注意是 5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;华氏温度&quot;</span> + huaShi + <span class="string">&quot; 对应的摄氏温度=&quot;</span> + sheShi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-关系-比较-运算符"><a href="#3-2-关系-比较-运算符" class="headerlink" title="3.2 关系(比较)运算符"></a>3.2 关系(比较)运算符</h2><ol><li>关系运算符的结果都是 <code>boolean</code> 型，也就是要么是 <code>true</code>，要么是 <code>false</code></li><li>关系表达式 经常用在 <code>if</code> 结构的条件中或循环结构的条件中</li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230103200303794.png" alt="关系运算符"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//关系运算符组成的表达式，我们称为关系表达式。 a &gt; b</span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">//T</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">//T</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">//F</span></span><br><span class="line">System.out.println(a &lt; b);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//比较运算符&quot;==&quot;不能误写成&quot;=&quot;</span></span><br><span class="line">System.out.println(a == b); <span class="comment">//F</span></span><br><span class="line">System.out.println(a != b); <span class="comment">//T</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> a &gt; b; <span class="comment">//T</span></span><br><span class="line">System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h2><blockquote><p>用于连接多个条件（多个关系表达式），最终的结果也是一个 boolean 值。</p></blockquote><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230103200523651.png" alt="逻辑运算符"></p><blockquote><ol><li><p>a&amp;b : &amp; 叫逻辑与： 规则：当 a 和 b 同时为 true ,则结果为 true, 否则为 false</p></li><li><p>a&amp;&amp;b : &amp;&amp; 叫短路与：规则：当 a 和 b 同时为 true ,则结果为 true,否则为 false</p></li><li><p>a|b : | 叫逻辑或，     规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</p></li><li><p>a||b : || 叫短路或，规则：当 a 和 b ，有一个为 true ,则结果为 true,否则为 false</p></li><li><p>!a : 叫取反，或者非运算。当 a 为 true, 则结果为 false; 当 a 为 false 是，结果为 true</p></li><li><p>a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//&amp;&amp;短路与 和 &amp; 案例演示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> &amp;&amp; age &lt; <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&amp;逻辑与使用</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> &amp; age &lt; <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok200&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="comment">//对于&amp;&amp;短路与而言，如果第一个条件为 false ,后面的条件不再判断</span></span><br><span class="line"><span class="comment">//对于&amp;逻辑与而言，如果第一个条件为 false ,后面的条件仍然会判断</span></span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">1</span> &amp; ++b &lt; <span class="number">50</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b);<span class="comment">// 4 10</span></span><br><span class="line"><span class="comment">// &amp;&amp;短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为 false，效率高</span></span><br><span class="line"><span class="comment">// &amp; 逻辑与：不管第一个条件是否为 false，第二个条件都要判断，效率低</span></span><br><span class="line"><span class="comment">// 开发中， 使用的基本是使用短路与&amp;&amp;, 效率高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ||短路或 和 |逻辑或 案例演示</span></span><br><span class="line"><span class="comment">// || 规则: 两个条件中只要有一个成立，结果为 true,否则为 false</span></span><br><span class="line"><span class="comment">// | 规则: 两个条件中只要有一个成立，结果为 true,否则为 false</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> || age &lt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &amp;逻辑与使用</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">20</span> | age &lt; <span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok200&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看看区别</span></span><br><span class="line"><span class="comment">//(1)||短路或：如果第一个条件为 true，</span></span><br><span class="line"><span class="comment">//则第二个条件不会判断，最终结果为 true，效率高</span></span><br><span class="line"><span class="comment">//(2)| 逻辑或：不管第一个条件是否为 true，第二个条件都要判断，效率低</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>( a &gt; <span class="number">1</span> || ++b &gt; <span class="number">4</span>) &#123; <span class="comment">// 可以换成 | 测试</span></span><br><span class="line">System.out.println(<span class="string">&quot;ok300&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a + <span class="string">&quot; b=&quot;</span> + b); <span class="comment">//4 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ! 取反操作演示</span></span><br><span class="line"><span class="comment">//! 操作是取反 T-&gt;F , F -&gt; T</span></span><br><span class="line">System.out.println(<span class="number">60</span> &gt; <span class="number">20</span>); <span class="comment">//T</span></span><br><span class="line">System.out.println(!(<span class="number">60</span> &gt; <span class="number">20</span>)); <span class="comment">//F</span></span><br><span class="line"><span class="comment">//a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="number">10</span> &gt; <span class="number">1</span>) ^ ( <span class="number">3</span> &gt; <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a^b: 叫逻辑异或，当 a 和 b 不同时，则结果为 true, 否则为 false</span></span><br><span class="line">System.out.println( (<span class="number">4</span> &lt; <span class="number">1</span>) ^ (<span class="number">6</span> &gt; <span class="number">3</span>) ); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-赋值运算符"><a href="#3-4-赋值运算符" class="headerlink" title="3.4 赋值运算符"></a>3.4 赋值运算符</h2><ul><li>基本赋值运算符 <code>=</code></li><li>复合赋值运算符 <code>+= ，-= ，*= ， /= ，%=</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//运算顺序从右往左 int num = a + b + c;</span></span><br><span class="line"><span class="comment">//赋值运算符的左边 只能是变量; 右边 可以是变量、表达式、常量值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>; <span class="type">int</span> num2= <span class="number">78</span> * <span class="number">34</span> - <span class="number">10</span>; <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> a;</span><br><span class="line"><span class="comment">//复合赋值运算符等价于下面的效果</span></span><br><span class="line"><span class="comment">//比如：a+=3;等价于 a=a+3; 其他类推</span></span><br><span class="line"><span class="comment">//复合赋值运算符会进行类型转换。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">n1 += <span class="number">4</span>;<span class="comment">// n1 = n1 + 4;</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 14</span></span><br><span class="line">n1 /= <span class="number">3</span>;<span class="comment">// n1 = n1 / 3;//4</span></span><br><span class="line">System.out.println(n1); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">//复合赋值运算符会进行类型转换</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">//byte b = 2; b+=3; b++;</span></span><br><span class="line">b += <span class="number">2</span>; <span class="comment">// 等价 b = (byte)(b + 2);</span></span><br><span class="line">b++; <span class="comment">// b = (byte)(b+1);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-三元运算符"><a href="#3-5-三元运算符" class="headerlink" title="3.5 三元运算符"></a>3.5 三元运算符</h2><blockquote><p>条件表达式 ? 表达式 1: 表达式 2</p></blockquote><ol><li><p>如果条件表达式为 true，运算后的结果是表达式 1；</p></li><li><p>如果条件表达式为 false，运算后的结果是表达式 2；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="comment">// 解读</span></span><br><span class="line"><span class="comment">// 1. a &gt; b 为 false</span></span><br><span class="line"><span class="comment">// 2. 返回 b--, 先返回 b 的值,然后在 b-1</span></span><br><span class="line"><span class="comment">// 3. 返回的结果是 99</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a++ : b--;</span><br><span class="line">System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span> + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式 1 和表达式 2 要为可以赋给接收变量的类型</span></span><br><span class="line"><span class="comment">//(或可以自动转换/或者强制转换)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> c &gt; d ? (<span class="type">int</span>)<span class="number">1.1</span> : (<span class="type">int</span>)<span class="number">3.4</span>;<span class="comment">//可以的</span></span><br><span class="line"><span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> c &gt; d ? c : d + <span class="number">3</span>;<span class="comment">//可以的，满足 int -&gt; double</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//案例：实现三个数的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">553</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1. 先得到 n1 和 n2 中最大数 , 保存到 max1</span></span><br><span class="line"><span class="comment">//2. 然后再 求出 max1 和 n3 中的最大数，保存到 max2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> n1 &gt; n2 ? n1 : n2;</span><br><span class="line"><span class="type">int</span> <span class="variable">max2</span> <span class="operator">=</span> max1 &gt; n3 ? max1 : n3;</span><br><span class="line">System.out.println(<span class="string">&quot;最大数=&quot;</span> + max2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一条语句实现, 推荐使用上面方法</span></span><br><span class="line"><span class="comment">//提示: 后面我们可以使用更好方法,比如排序</span></span><br><span class="line"><span class="comment">// int max = (n1 &gt; n2 ? n1 : n2) &gt; n3 ?</span></span><br><span class="line"><span class="comment">// (n1 &gt; n2 ? n1 : n2) : n3;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;最大数=&quot; + max);</span></span><br><span class="line"><span class="type">int</span> <span class="variable">abcclass</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);<span class="comment">//40</span></span><br><span class="line">System.out.println(<span class="string">&quot;N=&quot;</span> + N);<span class="comment">//50</span></span><br><span class="line"><span class="comment">// abc 和 aBc 是两个不同变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">abc</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">aBc</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="comment">//int a b = 300;</span></span><br><span class="line"><span class="comment">//int a-b=10;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">goto1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-6-运算符优先级"><a href="#3-6-运算符优先级" class="headerlink" title="3.6 运算符优先级"></a>3.6 运算符优先级</h2><ul><li>只有单目运算符、赋值运算符是从右向左运算的</li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230103210338370.png" alt="运算符优先级"></p><hr><h2 id="3-7-键盘输入语句"><a href="#3-7-键盘输入语句" class="headerlink" title="3.7 键盘输入语句"></a>3.7 键盘输入语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示接受用户的输入</span></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//Scanner 类 表示 简单文本扫描器，在 java.util 包</span></span><br><span class="line"><span class="comment">//1. 引入/导入 Scanner 类所在的包</span></span><br><span class="line"><span class="comment">//2. 创建 Scanner 对象 , new 创建一个对象,体会</span></span><br><span class="line"><span class="comment">// myScanner 就是 Scanner 类的对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//3. 接收用户输入了， 使用 相关的方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line"><span class="comment">//当程序执行到 next 方法时，会等待用户输入~~~</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入 int</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入薪水&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入 double</span></span><br><span class="line">System.out.println(<span class="string">&quot;人的信息如下:&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;名字=&quot;</span> + name + <span class="string">&quot; 年龄=&quot;</span> + age + <span class="string">&quot; 薪水=&quot;</span> + sal);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        nextLine()用法总结：</span></span><br><span class="line"><span class="comment">        1、以回车符作为结束标识符，获取到的是回车符前输入的所有字符串（包括空格）。</span></span><br><span class="line"><span class="comment">        2、读取结束后，该方法会将我们的鼠标定位在我们输入数据的那一行的下一行。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> myScanner.nextLine(); <span class="comment">//接收用户输入字符串, 以 回车符 作为结束符</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        next()用法总结：</span></span><br><span class="line"><span class="comment">        1. 一定要读取到有效字符后才可以结束输入。</span></span><br><span class="line"><span class="comment">        2. 对输入的有效字符之前所遇到的空白，会自动将其去除。</span></span><br><span class="line"><span class="comment">        3. 只有输入的有效字符后才将其后面输入的空白作为结束符。</span></span><br><span class="line"><span class="comment">        4. next()不能得到带有空格的字符串。</span></span><br><span class="line"><span class="comment">        5. 读取结束后，该方法会将我们的鼠标定位在我们输入数据的那一行。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> myScanner.next(); <span class="comment">//接收用户输入字符串, 以 空格符 作为结束符</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        先使用nextLine()再使用next()、nextInt()等没问题，</span></span><br><span class="line"><span class="comment">        但是先使用next()和nextInt()等之后就不可以再紧跟nextLine()使用。（这一点很重要！！！）</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        这是因为next()等这些方法读取结束后会紧跟一个回车符，</span></span><br><span class="line"><span class="comment">        而nextLine会直接读取到这个回车符，</span></span><br><span class="line"><span class="comment">        这就导致出现我们还没有来得及输入我们想要输入的数据，</span></span><br><span class="line"><span class="comment">        nextLine就以为我们已经输入完了这样的情况！</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        解决办法也很简单：我们直接在next()使用后加两个nextLine()就OK了，</span></span><br><span class="line"><span class="comment">        这样第一个nextLine()就会当一个‘替死鬼’，</span></span><br><span class="line"><span class="comment">        第二个nextLine()我们就可以输入自己想要输入的数据啦！</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span> a1= myScanner.nextByte(); <span class="comment">//接收用户输入 byte</span></span><br><span class="line">        <span class="type">short</span> a2= myScanner.nextShort(); <span class="comment">//接收用户输入 short</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> myScanner.nextInt(); <span class="comment">//接收用户输入 int</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">a4</span> <span class="operator">=</span> myScanner.nextLong(); <span class="comment">//接收用户输入 long</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">a5</span> <span class="operator">=</span> myScanner.nextFloat(); <span class="comment">//接收用户输入 float</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">a6</span> <span class="operator">=</span> myScanner.nextDouble(); <span class="comment">//接收用户输入 double</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a7</span> <span class="operator">=</span> myScanner.nextBoolean(); <span class="comment">//接收用户输入 boolean</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用完Scanner后，一定要记得将它关闭!</span></span><br><span class="line">        <span class="comment">//因为使用Scanner本质上是打开了一个IO流，如果不关闭的话，它将会一直占用系统资源。</span></span><br><span class="line">        sc.close();</span><br><span class="line">        <span class="comment">//但是一旦关闭后，就算在sc.close()这行代码后你再重新new Scanner(System.in)，</span></span><br><span class="line">        <span class="comment">//那也不能重新再打开一个扫描器了，程序会报错</span></span><br><span class="line">        <span class="comment">//所以一定要在用不到扫描器之后再关闭，即把sc.close()代码放到最后。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-8-进制"><a href="#3-8-进制" class="headerlink" title="3.8 进制"></a>3.8 进制</h2><ul><li>二进制：0,1 ，满 2 进 1.以 0b 或 0B 开头。</li><li>十进制：0-9 ，满 10 进 1。</li><li>八进制：0-7 ，满 8 进 1. 以数字 0 开头表示。</li><li>十六进制：0-9 及 A(10)-F(15)，满 16 进 1. 以 <strong>0x</strong> <strong>或</strong> <strong>0X</strong> 开头表示。此处的 A-F 不区分大小写</li></ul><h3 id="3-8-1-各种进制转十进制"><a href="#3-8-1-各种进制转十进制" class="headerlink" title="3.8.1 各种进制转十进制"></a>3.8.1 各种进制转十进制</h3><ul><li>二 转 十</li></ul><blockquote><p>从最低位 (右边) 开始, 将每个位上的数提取出来, 乘以 <code>2</code> 的 (位数 - 1)次方, 然后求和</p></blockquote><ul><li>八 转 十</li></ul><blockquote><p>从最低位 (右边) 开始, 将每个位上的数提取出来, 乘以 <code>8</code> 的 (位数 - 1)次方, 然后求和</p></blockquote><ul><li>十六 转 十</li></ul><blockquote><p>从最低位 (右边) 开始, 将每个位上的数提取出来, 乘以 <code>16</code> 的 (位数 - 1)次方, 然后求和</p></blockquote><h3 id="3-8-2-十进制转各种进制"><a href="#3-8-2-十进制转各种进制" class="headerlink" title="3.8.2 十进制转各种进制"></a>3.8.2 十进制转各种进制</h3><blockquote><p>短除</p></blockquote><ul><li>十 转 二</li></ul><blockquote><p>将该数不断除以 <code>2</code>, 直到商为 0 为止, 然后将每步得到的余数倒过来, 就是对应二进制</p></blockquote><ul><li>十 转 八</li></ul><blockquote><p>将该数不断除以 <code>8</code>, 直到商为 0 为止, 然后将每步得到的余数倒过来, 就是对应八进制</p></blockquote><ul><li>十 转 十六</li></ul><blockquote><p>将该数不断除以 <code>16</code>, 直到商为 0 为止, 然后将每步得到的余数倒过来, 就是对应十六进制</p></blockquote><h3 id="3-8-3-二进制转各种进制"><a href="#3-8-3-二进制转各种进制" class="headerlink" title="3.8.3 二进制转各种进制"></a>3.8.3 二进制转各种进制</h3><ul><li>二 转 八</li></ul><blockquote><p>从低位开始,将二进制数每 <code>3</code> 位一组，转成对应的八进制数即可</p></blockquote><ul><li>二 转 十六</li></ul><blockquote><p>从低位开始，将二进制数每 <code>4</code> 位一组，转成对应的十六进制数即可</p></blockquote><h3 id="3-8-4-各种进制转二进制"><a href="#3-8-4-各种进制转二进制" class="headerlink" title="3.8.4 各种进制转二进制"></a>3.8.4 各种进制转二进制</h3><ul><li>八 转 二</li></ul><blockquote><p>将八进制数每 1 位，转成对应的一个 <code>3 </code>位的二进制数即可</p></blockquote><ul><li>十六 转 二</li></ul><blockquote><p>将十六进制数每 1 位，转成对应的 <code>4</code> 位的一个二进制数即可</p></blockquote><hr><h2 id="3-9-原码、反码、补码"><a href="#3-9-原码、反码、补码" class="headerlink" title="3.9 原码、反码、补码"></a>3.9 原码、反码、补码</h2><p>对于有符号的而言:</p><ol><li>二进制的最高位是符号位: 0表示正数，1表示负数</li><li>正数的原码，反码，补码都一样 (三码合一)</li><li>负数的反码 &#x3D; 它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0)</li><li>负数的补码 &#x3D; 它的反码 + 1，负数的反码 &#x3D; 负数的补码 - 1</li><li>0的反码，补码都是0</li><li>java没有无符号数，换言之，java中的数都是有符号的</li><li>在计算机运算的时候，都是以<strong>补码的方式来运算</strong>的.</li><li>当我们看运算结果的时候，要看他的原码 (重点)</li></ol><hr><h2 id="3-10-位运算符"><a href="#3-10-位运算符" class="headerlink" title="3.10 位运算符"></a>3.10 位运算符</h2><ul><li>按位与 <code>&amp;</code>: 两位全为 1 , 结果为 1 , 否则为 0</li><li>按位或 <code>|</code>: 两位有一个为 1 ,  结果为 1 , 否则为 0</li><li>按位异或 <code>^</code>: 两位一个为 0 , 一个为 1 , 结果为 1 , 否则为 0</li><li>按位取反 <code>~</code>: 0-&gt;1 ,1-&gt;0</li><li>算术右移 <code>&gt;&gt;</code>：低位溢出, 符号位不变, 并用符号位补溢出的高位</li><li>算术左移 <code>&lt;&lt;</code>: 符号位不变, 低位补 0</li><li>逻辑右移 &#x2F; 无符号右移 <code>&gt;&gt;&gt;</code>: 低位溢出，高位补 0</li><li>特别说明：没有 <code>&lt;&lt;&lt;</code> 符号</li></ul><hr><h1 id="四、程序控制结构"><a href="#四、程序控制结构" class="headerlink" title="四、程序控制结构"></a>四、程序控制结构</h1><h2 id="4-1-顺序控制"><a href="#4-1-顺序控制" class="headerlink" title="4.1 顺序控制"></a>4.1 顺序控制</h2><p>从上到下执行, 变量采取<strong>前向引用</strong>的格式</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230119172712621.png" alt="前向引用"></p><hr><h2 id="4-2-分支控制"><a href="#4-2-分支控制" class="headerlink" title="4.2 分支控制"></a>4.2 分支控制</h2><ul><li>如果<strong>判断的具体数值不多</strong>，而且符合 byte、 short 、int、 char, enum[枚举], String 这 6 种类型。虽然两个语句都可以使用，建议使用 swtich 语句</li><li>其他情况：对区间判断，对结果为 boolean 类型判断，使用 if，if 的使用范围更广</li></ul><h3 id="4-2-1-if-else"><a href="#4-2-1-if-else" class="headerlink" title="4.2.1 if-else"></a>4.2.1 if-else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单分支 if</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">If01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//编写一个程序,可以输入人的年龄,如果该同志的年龄大于18岁,</span></span><br><span class="line"><span class="comment">//则输出 &quot;你年龄大于18,要对自己的行为负责,送入监狱&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 接收输入的年龄, 应该定义一个Scanner 对象</span></span><br><span class="line"><span class="comment">//2. 把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="comment">//3. 使用 if 判断，输出对应信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应该定义一个Scanner 对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="comment">//把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//使用 if 判断，输出对应信息</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你年龄大于18,要对自己的行为负责,送入监狱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双分支 if-else</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">If02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//编写一个程序,可以输入人的年龄,如果该同志的年龄大于18岁,</span></span><br><span class="line"><span class="comment">//则输出 &quot;你年龄大于18,要对</span></span><br><span class="line"><span class="comment">//自己的行为负责, 送入监狱&quot;。否则 ,输出&quot;你的年龄不大这次放过你了.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 接收输入的年龄, 应该定义一个Scanner 对象</span></span><br><span class="line"><span class="comment">//2. 把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="comment">//3. 使用 if-else 判断，输出对应信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应该定义一个Scanner 对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="comment">//把年龄保存到一个变量 int age</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//使用 if-else 判断，输出对应信息</span></span><br><span class="line"><span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你年龄大于18,要对自己的行为负责,送入监狱&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//双分支</span></span><br><span class="line">System.out.println(<span class="string">&quot;你的年龄不大这次放过你了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;程序继续...&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单分支和双分支的练习</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写程序，声明2个double型变量并赋值。</span></span><br><span class="line"><span class="comment">//判断第一个数大于10.0，且第2个数小于20.0，打印两数之和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">33.5</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">2.6</span>;</span><br><span class="line"><span class="keyword">if</span>(d1 &gt; <span class="number">10.0</span> &amp;&amp; d2 &lt; <span class="number">20.0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;两个数和=&quot;</span> + (d1 + d2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【课后自己练】定义两个变量int，判断二者的和，</span></span><br><span class="line"><span class="comment">//是否能被3又能被5整除，打印提示信息</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 定义两个变量int num1, num2</span></span><br><span class="line"><span class="comment">//2. 定义一个变量 int sum = num1 + num2;</span></span><br><span class="line"><span class="comment">//3. sum % 3 , 5 后 等于0 说明可以整除</span></span><br><span class="line"><span class="comment">//4. 使用 if - else 来提示对应信息</span></span><br><span class="line"><span class="comment">//走代码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line"><span class="keyword">if</span>(sum % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; sum % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;和可以被3又能被5整除&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;和不能被3和5整除..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个年份是否是闰年，闰年的条件是符合下面二者之一：</span></span><br><span class="line"><span class="comment">//(1)年份能被4整除，但不能被100整除；(2)能被400整除</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 定义 int year 保存年</span></span><br><span class="line"><span class="comment">//2. 年份能被4整除，但不能被100整除, </span></span><br><span class="line"><span class="comment">//   =&gt; year % 4 == 0 &amp;&amp; year % 100 != 0 </span></span><br><span class="line"><span class="comment">//3. 能被400整除 =&gt; year % 400 == 0</span></span><br><span class="line"><span class="comment">//4. 上面的 2 和  3 是 或的关系 </span></span><br><span class="line"><span class="comment">//代码实现</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">2028</span>;</span><br><span class="line"><span class="keyword">if</span>( (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) ||  year % <span class="number">400</span> == <span class="number">0</span> ) &#123;</span><br><span class="line">System.out.println(year + <span class="string">&quot; 是 闰年&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(year + <span class="string">&quot; 不是 闰年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多分支 if-else if-else</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">If03</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入保国同志的芝麻信用分：</span></span><br><span class="line"><span class="comment">如果：</span></span><br><span class="line"><span class="comment">信用分为100分时，输出 信用极好；</span></span><br><span class="line"><span class="comment">信用分为(80，99]时，输出 信用优秀；</span></span><br><span class="line"><span class="comment">信用分为[60,80]时，输出 信用一般；</span></span><br><span class="line"><span class="comment">其它情况 ，输出 信用 不及格 </span></span><br><span class="line"><span class="comment">请从键盘输入保国的芝麻信用分，并加以判断</span></span><br><span class="line"><span class="comment">假定信用分数为int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//接收用户输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入信用分(1-100):&quot;</span>);</span><br><span class="line"><span class="comment">//请思考：如果小伙伴输入的不是整数，而是hello..</span></span><br><span class="line"><span class="comment">//==&gt;这里我们后面可以使用异常处理机制搞定-》老师点一下</span></span><br><span class="line"><span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//先对输入的信用分，进行一个范围的有效判断 1-100, 否则提示输入错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(grade &gt;=<span class="number">1</span> &amp;&amp; grade &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">//因为有4种情况，所以使用多分支</span></span><br><span class="line"><span class="keyword">if</span>(grade == <span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;信用极好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &gt; <span class="number">80</span> &amp;&amp; grade &lt;= <span class="number">99</span>) &#123; <span class="comment">//信用分为(80，99]时，输出 信用优秀；</span></span><br><span class="line">System.out.println(<span class="string">&quot;信用优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (grade &gt;= <span class="number">60</span> &amp;&amp; grade &lt;= <span class="number">80</span>) &#123;<span class="comment">//信用分为[60,80]时，输出 信用一般</span></span><br><span class="line">System.out.println(<span class="string">&quot;信用一般&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//其它情况 ，输出 信用 不及格 </span></span><br><span class="line">System.out.println(<span class="string">&quot;信用不及格&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;信用分需要在1-100,请重新输入:)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套分支 (最好不要超过 3 层, 不然可读性不好)</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NestedIf</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参加歌手比赛，如果初赛成绩大于8.0进入决赛，</span></span><br><span class="line"><span class="comment">否则提示淘汰。并且根据性别提示进入男子组或女子组。</span></span><br><span class="line"><span class="comment">输入成绩和性别，进行判断和输出信息。</span></span><br><span class="line"><span class="comment">[NestedIf.java]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">提示: double score; char gender; </span></span><br><span class="line"><span class="comment">接收字符: char gender = scanner.next().charAt(0)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 创建Scanner对象，接收用户输入</span></span><br><span class="line"><span class="comment">//2. 接收 成绩保存到 double score</span></span><br><span class="line"><span class="comment">//3. 使用 if-else 判断 如果初赛成绩大于8.0进入决赛，否则提示淘汰</span></span><br><span class="line"><span class="comment">//4. 如果进入到 决赛，再接收 char gender, 使用 if-else 输出信息</span></span><br><span class="line"><span class="comment">//代码实现 =&gt; 思路 --&gt; java代码</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入该歌手的成绩&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> myScanner.nextDouble();</span><br><span class="line"><span class="keyword">if</span>( score &gt; <span class="number">8.0</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入性别&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">if</span>( gender == <span class="string">&#x27;男&#x27;</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入男子组&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(gender == <span class="string">&#x27;女&#x27;</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入女子组&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你的性别有误，不能参加决赛~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sorry ,你被淘汰了~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-switch"><a href="#4-2-2-switch" class="headerlink" title="4.2.2 switch"></a>4.2.2 switch</h3><ol><li>switch 表达式的数据类型要与 case 后的常量类型一致, 或者是可以进行隐式转换 (表达式类型转常量类型) 的类型, 不然怎么比较</li><li>switch 表达式的返回值必须是 <code>byte, short, int, char, enum, String</code></li><li>case 后的值必须是常量, 不能是变量</li><li>default 可选, 但是必须加上</li><li>如果没有在 case 分支后写 break, 就会从当前分支一直执行到底, 除非中途碰到 break</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Switch01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例：Switch01.java</span></span><br><span class="line"><span class="comment">请编写一个程序，该程序可以接收一个字符，比如:a,b,c,d,e,f,g</span></span><br><span class="line"><span class="comment">a表示星期一，b表示星期二 …</span></span><br><span class="line"><span class="comment">根据用户的输入显示相应的信息.要求使用 switch 语句完成</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 接收一个字符 , 创建Scanner对象</span></span><br><span class="line"><span class="comment">2. 使用switch 来完成匹配,并输出对应信息</span></span><br><span class="line"><span class="comment">代码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个字符(a-g)&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);<span class="comment">//</span></span><br><span class="line"><span class="comment">//在java中，只要是有值返回，就是一个表达式</span></span><br><span class="line"><span class="keyword">switch</span>(c1) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> : </span><br><span class="line">System.out.println(<span class="string">&quot;今天星期一,猴子穿新衣&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> : </span><br><span class="line">System.out.println(<span class="string">&quot;今天星期二,猴子当小二&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span> : </span><br><span class="line">System.out.println(<span class="string">&quot;今天星期三,猴子爬雪山..&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的字符不正确，没有匹配的&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;退出了switch ,继续执行程序&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//细节1</span></span><br><span class="line"><span class="comment">//表达式数据类型，应和case 后的常量类型一致，</span></span><br><span class="line"><span class="comment">//或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是 int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节2</span></span><br><span class="line"><span class="comment">//switch(表达式)中表达式的返回值必须是：</span></span><br><span class="line"><span class="comment">//(byte,short,int,char,enum[枚举],String)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//细节3</span></span><br><span class="line"><span class="comment">//case子句中的值必须是常量(1,&#x27;a&#x27;)或者是常量表达式,而不能是变量</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//细节4</span></span><br><span class="line"><span class="comment">//default子句是可选的，当没有匹配的case时，执行default</span></span><br><span class="line"><span class="comment">//如果没有default 子句，有没有匹配任何常量，则没有输出</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//细节5</span></span><br><span class="line"><span class="comment">//break语句用来在执行完一个case分支后使程序跳出switch语句块；</span></span><br><span class="line"><span class="comment">//如果没有写break，程序会顺序执行到switch结尾,除非执行到break</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span>(c) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>  :</span><br><span class="line">System.out.println(<span class="string">&quot;ok2&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;ok3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;退出了switch,继续执行..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 switch 把小写类型的 </span></span><br><span class="line"><span class="comment">//char型转为大写(键盘输入)。只转换 a-&gt;A, b-&gt;B, c, d, e. </span></span><br><span class="line"><span class="comment">//其它的输出 &quot;other&quot;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Scanner对象</span></span><br><span class="line"><span class="comment">// Scanner myScanner = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;请输入a-e&quot;);</span></span><br><span class="line"><span class="comment">// char c1 = myScanner.next().charAt(0);</span></span><br><span class="line"><span class="comment">// switch(c1) &#123;</span></span><br><span class="line"><span class="comment">// case &#x27;a&#x27; :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;A&quot;);</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// case &#x27;b&#x27; :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;B&quot;);</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// case &#x27;c&#x27; :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;C&quot;);</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// case &#x27;d&#x27; :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;D&quot;);</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// case &#x27;e&#x27; :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;E&quot;);</span></span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="comment">// default :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;你的输入有误~&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对学生成绩大于60分的，输出&quot;合格&quot;。低于60分的，</span></span><br><span class="line"><span class="comment">//输出&quot;不合格&quot;。(注：输入的成绩不能大于100), 提示 成绩/60</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 这道题，可以使用 分支来完成， 但是要求使用switch</span></span><br><span class="line"><span class="comment">//2. 这里我们需要进行一个转换, 编程思路 : </span></span><br><span class="line"><span class="comment">//   如果成绩在 [60,100] , (int)(成绩/60) = 1 </span></span><br><span class="line"><span class="comment">//   如果成绩在 [0,60) , (int)(成绩/60) = 0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用if-else 保证输入的成绩有有效的 0-100</span></span><br><span class="line"><span class="comment">//看了当老师的分析和代码演示后，自己一定要独立完成（不看老韩代码，也能写）</span></span><br><span class="line"><span class="keyword">if</span>( score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> ((<span class="type">int</span>)(score / <span class="number">60</span>)) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// default :</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;输入有误&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;输入的成绩在0-100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用于指定月份，</span></span><br><span class="line"><span class="comment">//打印该月份所属的季节。</span></span><br><span class="line"><span class="comment">//3,4,5 春季 6,7,8 夏季  9,10,11 秋季 12, 1, 2 冬季 </span></span><br><span class="line"><span class="comment">//[课堂练习, 提示 使用穿透 ] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//1. 创建Scanner对象， 接收用户输入</span></span><br><span class="line"><span class="comment">//2. 使用 int month 接收</span></span><br><span class="line"><span class="comment">//3. 使用switch 来匹配 ,使用穿透来完成，比较简洁</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入月份&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="keyword">switch</span>(month) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: </span><br><span class="line">System.out.println(<span class="string">&quot;这是春季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: </span><br><span class="line">System.out.println(<span class="string">&quot;这是夏季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: </span><br><span class="line">System.out.println(<span class="string">&quot;这是秋季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>: </span><br><span class="line">System.out.println(<span class="string">&quot;这是冬季&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的月份不对(1-12)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-3-循环控制"><a href="#4-3-循环控制" class="headerlink" title="4.3 循环控制"></a>4.3 循环控制</h2><h3 id="4-3-1-for"><a href="#4-3-1-for" class="headerlink" title="4.3.1 for"></a>4.3.1 for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDetail</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(;循环判断条件;) </span></span><br><span class="line"><span class="comment">//中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环控制</span></span><br><span class="line"><span class="comment">// int i = 1;//循环变量初始化</span></span><br><span class="line"><span class="comment">// for( ; i &lt;= 10 ; ) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;hello，韩顺平教育&quot; + i);</span></span><br><span class="line"><span class="comment">// i++;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;i=&quot; + i);//11 ok</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// int j = 1;</span></span><br><span class="line"><span class="comment">// //补充</span></span><br><span class="line"><span class="comment">// for(;;) &#123; //表示一个无限循环,死循环</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;ok~&quot; + (j++));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，</span></span><br><span class="line"><span class="comment">//循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = <span class="number">0</span>;  i &lt; count; i++, j += <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot; j=&quot;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//打印1~100之间所有是9的倍数的整数，统计个数  及 总和.[化繁为简,先死后活]</span></span><br><span class="line"><span class="comment">//老韩的两个编程思想(技巧)</span></span><br><span class="line"><span class="comment">//1. 化繁为简 : 即将复杂的需求，拆解成简单的需求，逐步完成</span></span><br><span class="line"><span class="comment">//2. 先死后活 : 先考虑固定的值，然后转成可以灵活变化的值</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析</span></span><br><span class="line"><span class="comment">//打印1~100之间所有是9的倍数的整数，统计个数  及 总和</span></span><br><span class="line"><span class="comment">//化繁为简</span></span><br><span class="line"><span class="comment">//(1) 完成 输出 1-100的值</span></span><br><span class="line"><span class="comment">//(2) 在输出的过程中，进行过滤，只输出9的倍数  i % 9 ==0</span></span><br><span class="line"><span class="comment">//(3) 统计个数 定义一个变量 int count = 0; 当 条件满足时 count++;</span></span><br><span class="line"><span class="comment">//(4) 总和 , 定义一个变量 int sum = 0; 当条件满足时累积 sum += i;</span></span><br><span class="line"><span class="comment">//先死后活</span></span><br><span class="line"><span class="comment">//(1) 为了适应更好的需求，把范围的开始的值和结束的值，做出变量</span></span><br><span class="line"><span class="comment">//(2) 还可以更进一步 9 倍数也做成变量 int t = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//统计9的倍数个数 变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 倍数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>( i % t == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">count++;</span><br><span class="line">sum += i;<span class="comment">//累积</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-while"><a href="#4-3-2-while" class="headerlink" title="4.3.2 while"></a>4.3.2 while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileExercise</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印1—100之间所有能被3整除的数 </span></span><br><span class="line"><span class="comment">// 化繁为简, 先死后活</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">endNum</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>( i &lt;= endNum) &#123;</span><br><span class="line"><span class="keyword">if</span>( i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i++;<span class="comment">//变量自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印40—200之间所有的偶数</span></span><br><span class="line"><span class="comment">// 化繁为简, 先死后活(利于思考)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">40</span>; <span class="comment">//变量初始化</span></span><br><span class="line"><span class="keyword">while</span> ( j &lt;= <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span>( j % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;j=&quot;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line">j++;<span class="comment">//循环变量的迭代</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-do-while"><a href="#4-3-3-do-while" class="headerlink" title="4.3.3 do-while"></a>4.3.3 do-while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//统计1---200之间能被5整除但不能被3整除的 个数</span></span><br><span class="line"><span class="comment">//化繁为简</span></span><br><span class="line"><span class="comment">//(1) 使用do-while输出 1-200</span></span><br><span class="line"><span class="comment">//(2) 过滤 能被5整除但不能被3整除的数 %</span></span><br><span class="line"><span class="comment">//(3) 统计满足条件的个数 int count = 0; </span></span><br><span class="line"><span class="comment">//先死后活</span></span><br><span class="line"><span class="comment">//(1) 范围的值 1-200 你可以做出变量</span></span><br><span class="line"><span class="comment">//(2) 能被5整除但不能被3整除的 , 5 和 3 可以改成变量 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//统计满足条件的个数</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>( i % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">3</span> != <span class="number">0</span> ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span> + i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">200</span>); <span class="comment">// 后面的分号不能落</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;count=&quot;</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileExercise02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果李三不还钱，则老韩将一直使出五连鞭，直到李三说还钱为</span></span><br><span class="line"><span class="comment">//[System.out.println(&quot;老韩问：还钱吗？y/n&quot;)]   do...while ..</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//化繁为简</span></span><br><span class="line"><span class="comment">//(1) 不停的问还钱吗?</span></span><br><span class="line"><span class="comment">//(2) 使用char answer 接收回答, 定义一个Scanner对象</span></span><br><span class="line"><span class="comment">//(3) 在do-while 的while 判断如果是 y 就不在循环</span></span><br><span class="line"><span class="comment">//一定自己动脑筋..</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">char</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老韩使出五连鞭~&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;老韩问：还钱吗？y/n&quot;</span>);</span><br><span class="line">answer = myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;他的回答是&quot;</span> + answer);</span><br><span class="line">&#125;<span class="keyword">while</span>(answer != <span class="string">&#x27;y&#x27;</span>);<span class="comment">//判断条件很关键</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;李三还钱了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-4-多重循环控制"><a href="#4-4-多重循环控制" class="headerlink" title="4.4 多重循环控制"></a>4.4 多重循环控制</h2><p>最多不要超过 3 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MulForExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//统计3个班成绩情况，每个班有5名同学，</span></span><br><span class="line"><span class="comment">//求出各个班的平均分和所有班级的平均分[学生的成绩从键盘输入]。</span></span><br><span class="line"><span class="comment">//统计三个班及格人数，每个班有5名同学。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//思路分析:</span></span><br><span class="line"><span class="comment">//化繁为简</span></span><br><span class="line"><span class="comment">//(1) 先计算一个班 , 5个学生的成绩和平均分 , 使用for</span></span><br><span class="line"><span class="comment">//1.1 创建 Scanner 对象然后，接收用户输入</span></span><br><span class="line"><span class="comment">//1.2 得到该班级的平均分 , 定义一个 doubel sum 把该班级5个学生的成绩累积 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(2) 统计3个班(每个班5个学生) 平均分</span></span><br><span class="line"><span class="comment">//(3) 所有班级的平均分</span></span><br><span class="line"><span class="comment">//3.1 定义一个变量，double totalScore 累积所有学生的成绩</span></span><br><span class="line"><span class="comment">//3.2 当多重循环结束后，totalScore / (3 * 5) </span></span><br><span class="line"><span class="comment">//(4) 统计三个班及格人数</span></span><br><span class="line"><span class="comment">//4.1 定义变量 int passNum = 0; 当有一个学生成绩&gt;=60, passNum++</span></span><br><span class="line"><span class="comment">//4.2 如果 &gt;= 60 passNum++</span></span><br><span class="line"><span class="comment">//(5) 可以优化[效率，可读性, 结构]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 Scanner 对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">double</span> <span class="variable">totalScore</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//累积所有学生的成绩</span></span><br><span class="line"><span class="type">int</span> <span class="variable">passNum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//累积 及格人数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">classNum</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">//班级个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">stuNum</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//学生个数</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= classNum; i++) &#123;<span class="comment">//i 表示班级</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//一个班级的总分</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= stuNum; j++) &#123;<span class="comment">//j 表示学生</span></span><br><span class="line">System.out.println(<span class="string">&quot;请数第&quot;</span>+i+<span class="string">&quot;个班的第&quot;</span>+j+<span class="string">&quot;个学生的成绩&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> myScanner.nextDouble();</span><br><span class="line"><span class="comment">//当有一个学生成绩&gt;=60, passNum++</span></span><br><span class="line"><span class="keyword">if</span>(score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">passNum++;</span><br><span class="line">&#125;</span><br><span class="line">sum += score; <span class="comment">//累积</span></span><br><span class="line">System.out.println(<span class="string">&quot;成绩为&quot;</span> + score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为sum 是 5个学生的总成绩</span></span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot; 平均分=&quot;</span> + (sum / stuNum));</span><br><span class="line"><span class="comment">//把 sum 累积到 totalScore</span></span><br><span class="line">totalScore += sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;三个班总分=&quot;</span>+ totalScore </span><br><span class="line">+ <span class="string">&quot; 平均分=&quot;</span> + totalScore / (classNum*stuNum));</span><br><span class="line">System.out.println(<span class="string">&quot;及格人数=&quot;</span> + passNum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-5-打印金字塔"><a href="#4-5-打印金字塔" class="headerlink" title="4.5 打印金字塔"></a>4.5 打印金字塔</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stars</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">  *  *</span></span><br><span class="line"><span class="comment"> *    *</span></span><br><span class="line"><span class="comment">********</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">化繁为简</span></span><br><span class="line"><span class="comment">1. 先打印一个矩形</span></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"><span class="comment">*****</span></span><br><span class="line"><span class="comment">2. 打印半个金字塔</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*    //第1层 有 1个*</span></span><br><span class="line"><span class="comment">**   //第2层 有 2个*</span></span><br><span class="line"><span class="comment">***//第3层 有 3个*</span></span><br><span class="line"><span class="comment">****    //第4层 有 4个*</span></span><br><span class="line"><span class="comment">*****   //第5层 有 5个*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 打印整个金字塔</span></span><br><span class="line"><span class="comment">*       //第1层 有 1个*   2 * 1 -1   有4=(总层数-1)个空格</span></span><br><span class="line"><span class="comment">   ***      //第2层 有 3个*   2 * 2 -1   有3=(总层数-2)个空格</span></span><br><span class="line"><span class="comment">  *****     //第3层 有 5个*   2 * 3 -1   有2=(总层数-3)个空格</span></span><br><span class="line"><span class="comment"> *******    //第4层 有 7个*   2 * 4 -1   有1=(总层数-4)个空格</span></span><br><span class="line"><span class="comment">*********   //第5层 有 9个*   2 * 5 -1   有0=(总层数-5)个空格</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 打印空心的金字塔 [最难的]</span></span><br><span class="line"><span class="comment">    *       //第1层 有 1个*   当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">   * *      //第2层 有 2个*   当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">  *   *     //第3层 有 2个*   当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment"> *     *    //第4层 有 2个*   当前行的第一个位置是*,最后一个位置也是*</span></span><br><span class="line"><span class="comment">*********   //第5层 有 9个*   全部输出*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">先死后活</span></span><br><span class="line"><span class="comment">5 层数做成变量 int totalLevel = 5;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">totalLevel</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">//层数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= totalLevel; i++) &#123; <span class="comment">//i 表示层数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在输出*之前，还有输出 对应空格 = 总层数-当前层</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= totalLevel - i; k++ ) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制打印每层的*个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= <span class="number">2</span> * i - <span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="comment">//当前行的第一个位置是*,最后一个位置也是*, 最后一层全部 *</span></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span> || i == totalLevel) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//其他情况输出空格</span></span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每打印完一层的*后，就换行 println本身会换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-6-跳转控制语句"><a href="#4-6-跳转控制语句" class="headerlink" title="4.6 跳转控制语句"></a>4.6 跳转控制语句</h2><h3 id="4-6-1-break"><a href="#4-6-1-break" class="headerlink" title="4.6.1 break"></a>4.6.1 break</h3><p>要知道标签是什么东西, 编程的时候一般不写, 但是要知道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">abc1: <span class="comment">// 标签</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;<span class="comment">//外层for</span></span><br><span class="line">abc2: <span class="comment">// 标签</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;<span class="comment">//内层for</span></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//break  ;//等价 break abc2</span></span><br><span class="line"><span class="keyword">break</span> abc1 ; <span class="comment">// 退出哪个标签下的循环</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakExercise02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现登录验证，有3次机会，如果用户名为&quot;丁真&quot; ,密码&quot;666&quot;提示登录成功，</span></span><br><span class="line"><span class="comment">//否则提示还有几次机会，请使用for+break完成</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 思路分析</span></span><br><span class="line"><span class="comment">// 1. 创建Scanner对象接收用户输入  </span></span><br><span class="line"><span class="comment">// 2. 定义 String name ; String passwd; 保存用户名和密码</span></span><br><span class="line"><span class="comment">// 3. 最多循环3次[登录3次]，如果 满足条件就提前退出</span></span><br><span class="line"><span class="comment">// 4. 定义一般变量 int chance 记录还有几次登录机会</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">chance</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">//登录一次 ，就减少一次</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;<span class="comment">//3次登录机会</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">name = myScanner.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">passwd = myScanner.next();</span><br><span class="line"><span class="comment">//比较输入的名字和密码是否正确</span></span><br><span class="line"><span class="comment">//补充说明字符串 的内容 比较 使用的 方法 equals</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;丁真&quot;</span>.equals(name) &amp;&amp; <span class="string">&quot;666&quot;</span>.equals(passwd)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;恭喜你，登录成功~&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录的机会就减少一次</span></span><br><span class="line">chance--;</span><br><span class="line">System.out.println(<span class="string">&quot;你还有&quot;</span> + chance + <span class="string">&quot;次登录机会&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-2-continue"><a href="#4-6-2-continue" class="headerlink" title="4.6.2 continue"></a>4.6.2 continue</h3><p>也有标签这个东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContinueDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">label1:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;</span><br><span class="line">label2:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//看看分别输出什么值，并分析</span></span><br><span class="line"><span class="comment">//continue ; //等价于 continue label2</span></span><br><span class="line"><span class="comment">//continue label2;//等价 continue;</span></span><br><span class="line"><span class="keyword">continue</span> label1; <span class="comment">//输出 2次[0,1]</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);<span class="comment">//输出2次[0,1,3,4,5,6,7,8,9]</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-3-return"><a href="#4-6-3-return" class="headerlink" title="4.6.3 return"></a>4.6.3 return</h3><p>方法中的 return 表示退出方法</p><p>main 函数中的 return 表示结束程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Return01</span> &#123; </span><br><span class="line"></span><br><span class="line">   <span class="comment">//编写一个main方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(i==<span class="number">3</span>) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;韩顺平教育 &quot;</span>+i);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//当return用在方法时，表示跳出方法，如果使用在main,表示退出程序</span></span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;go on..&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="五、数组、排序和查找"><a href="#五、数组、排序和查找" class="headerlink" title="五、数组、排序和查找"></a>五、数组、排序和查找</h1><h2 id="5-1-数组"><a href="#5-1-数组" class="headerlink" title="5.1 数组"></a>5.1 数组</h2><h3 id="5-1-1-数组基础"><a href="#5-1-1-数组基础" class="headerlink" title="5.1.1 数组基础"></a>5.1.1 数组基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//演示 数据类型 数组名[]=new 数据类型[大小]</span></span><br><span class="line"><span class="comment">//循环输入5个成绩，保存到double数组,并输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//1. 创建一个 double 数组，大小 5</span></span><br><span class="line"><span class="comment">//静态初始化就是直接在数组中定义数组内容</span></span><br><span class="line"><span class="comment">//(1) 第一种动态分配方式</span></span><br><span class="line"><span class="comment">//double scores[] = new double[5];</span></span><br><span class="line"><span class="comment">//(2) 第2种动态分配方式， 先声明数组，再 new 分配空间</span></span><br><span class="line"><span class="type">double</span> scores[] ; <span class="comment">//声明数组， 这时 scores 是 null</span></span><br><span class="line">scores = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">5</span>]; <span class="comment">// 分配内存空间，可以存放数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 循环输入</span></span><br><span class="line"><span class="comment">//   scores.length 表示数组的大小/长度</span></span><br><span class="line"><span class="comment">//   </span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入第&quot;</span>+ (i+<span class="number">1</span>) +<span class="string">&quot;个元素的值&quot;</span>);</span><br><span class="line">scores[i] = myScanner.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出，遍历数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;==数组的元素/值的情况如下:===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+ (i+<span class="number">1</span>) +<span class="string">&quot;个元素的值=&quot;</span> + scores[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDetail</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1. 数组是多个相同类型数据的组合，实现对这些数据的统一管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int[] arr1 = &#123;1, 2, 3, 60,&quot;hello&quot;&#125;;//String -&gt;int</span></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">60.6</span>, <span class="number">100</span>&#125;;<span class="comment">//int -&gt;double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</span></span><br><span class="line">String[] arr3 = &#123;<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;milan&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 数组创建后，如果没有赋值，有默认值</span></span><br><span class="line"><span class="comment">//int 0，short 0, byte 0, long 0, </span></span><br><span class="line"><span class="comment">//float 0.0,double 0.0，char \u0000，</span></span><br><span class="line"><span class="comment">//boolean false，String null</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">short</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">short</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(<span class="string">&quot;=====数组arr4=====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr4.length; i++) &#123;</span><br><span class="line">System.out.println(arr4[i]);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//4. 使用数组的步骤 1. 声明数组并开辟空间 2 给数组各个元素赋值 3 使用数组</span></span><br><span class="line">        <span class="comment">//5. 数组的下标是从 0 开始的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 数组下标必须在指定范围内使用，否则报：下标越界异常，比如 </span></span><br><span class="line"><span class="comment">//int [] arr=new int[5]; 则有效下标为 0-4 </span></span><br><span class="line"><span class="comment">//即数组的下标/索引 最小 0 最大 数组长度-1(4)</span></span><br><span class="line"><span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//System.out.println(arr[5]);//数组越界</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//7. 数组属引用类型，数组型数据是对象(object)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-数组赋值机制-※"><a href="#5-1-2-数组赋值机制-※" class="headerlink" title="5.1.2 数组赋值机制 (※)"></a>5.1.2 数组赋值机制 (※)</h3><p>没有 <code>new</code> 过 (初始化) 的数组没有独立空间, 只是声明了而已</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAssign</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型赋值, 赋值方式为值拷贝</span></span><br><span class="line"><span class="comment">//n2的变化，不会影响到n1的值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1;</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">80</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n2=&quot;</span> + n2);<span class="comment">//80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</span></span><br><span class="line"><span class="comment">//是一个地址 , arr2变化会影响到 arr1</span></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1;<span class="comment">//把 arr1赋给 arr2</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看看arr1的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr1的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">System.out.println(arr1[i]);<span class="comment">//10, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;====arr2的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">System.out.println(arr2[i]);<span class="comment">//10, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230125214546419.png" alt="数组内存图"></p><h3 id="5-1-3-数组拷贝"><a href="#5-1-3-数组拷贝" class="headerlink" title="5.1.3 数组拷贝"></a>5.1.3 数组拷贝</h3><p>新建一个数组, 开辟一个独立的空间, 将原数组的值赋值到新的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCopy</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 int[] arr1 = &#123;10,20,30&#125;; 拷贝到 arr2数组, </span></span><br><span class="line"><span class="comment">//要求数据空间是独立的.</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的数组arr2,开辟新的数据空间</span></span><br><span class="line"><span class="comment">//大小 arr1.length;</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历 arr1 ，把每个元素拷贝到arr2对应的元素位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">arr2[i] = arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师修改 arr2， 不会对arr1有影响.</span></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出arr1 </span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr1的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">System.out.println(arr1[i]);<span class="comment">//10,20,30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr2的元素====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">System.out.println(arr2[i]);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-数组翻转"><a href="#5-1-4-数组翻转" class="headerlink" title="5.1.4 数组翻转"></a>5.1.4 数组翻转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1：通过找规律反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//规律</span></span><br><span class="line"><span class="comment">//1. 把 arr[0] 和 arr[5] 进行交换 &#123;66,22,33,44,55,11&#125;</span></span><br><span class="line"><span class="comment">//2. 把 arr[1] 和 arr[4] 进行交换 &#123;66,55,33,44,22,11&#125;</span></span><br><span class="line"><span class="comment">//3. 把 arr[2] 和 arr[3] 进行交换 &#123;66,55,44,33,22,11&#125;</span></span><br><span class="line"><span class="comment">//4. 一共要交换 3 次 = arr.length / 2</span></span><br><span class="line"><span class="comment">//5. 每次交换时，对应的下标 是 arr[i] 和 arr[arr.length - 1 -i]</span></span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length; <span class="comment">//计算数组的长度</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">temp = arr[len - <span class="number">1</span> - i];<span class="comment">//保存</span></span><br><span class="line">arr[len - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">arr[i] = temp; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;===翻转后数组===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);<span class="comment">//66,55,44,33,22,11</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 2：使用逆序赋值方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//使用逆序赋值方式 </span></span><br><span class="line"><span class="comment">//1. 先创建一个新的数组 arr2 ,大小 arr.length</span></span><br><span class="line"><span class="comment">//2. 逆序遍历 arr ,将 每个元素拷贝到 arr2的元素中(顺序拷贝)</span></span><br><span class="line"><span class="comment">//3. 建议增加一个循环变量 j -&gt; 0 -&gt; 5</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"><span class="comment">//逆序遍历 arr</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">arr2[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4. 当for循环结束，arr2就是一个逆序的数组 &#123;66, 55, 44,33, 22, 11&#125; </span></span><br><span class="line"><span class="comment">//5. 让 arr 指向 arr2数据空间, 此时 arr原来的数据空间就没有变量引用</span></span><br><span class="line"><span class="comment">//   会被当做垃圾，销毁</span></span><br><span class="line">arr = arr2;</span><br><span class="line">System.out.println(<span class="string">&quot;====arr的元素情况=====&quot;</span>);</span><br><span class="line"><span class="comment">//6. 输出 arr 看看</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-5-数组扩容"><a href="#5-1-5-数组扩容" class="headerlink" title="5.1.5 数组扩容"></a>5.1.5 数组扩容</h3><p>新建一个数组之后扩容, 再将原数组名指向新的数组, 原数组空间被垃圾回收机制回收销毁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要求：实现动态的给数组添加元素效果，实现对数组扩容。ArrayAdd.java</span></span><br><span class="line"><span class="comment">1.原始数组使用静态分配 int[] arr = &#123;1,2,3&#125;</span></span><br><span class="line"><span class="comment">2.增加的元素4，直接放在数组的最后 arr = &#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="comment">3.用户可以通过如下方法来决定是否继续添加，添加成功，是否继续？y/n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 定义初始数组 int[] arr = &#123;1,2,3&#125;//下标0-2</span></span><br><span class="line"><span class="comment">2. 定义一个新的数组 int[] arrNew = new int[arr.length+1];</span></span><br><span class="line"><span class="comment">3. 遍历 arr 数组，依次将arr的元素拷贝到 arrNew数组</span></span><br><span class="line"><span class="comment">4. 将 4 赋给 arrNew[arrNew.length - 1] = 4;把4赋给arrNew最后一个元素</span></span><br><span class="line"><span class="comment">5. 让 arr 指向 arrNew ;  arr = arrNew; 那么 原来arr数组就被销毁</span></span><br><span class="line"><span class="comment">6. 创建一个 Scanner可以接受用户输入</span></span><br><span class="line"><span class="comment">7. 因为用户什么时候退出，不确定，老师使用 do-while + break来控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//遍历 arr 数组，依次将arr的元素拷贝到 arrNew数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arrNew[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你要添加的元素&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//把addNum赋给arrNew最后一个元素</span></span><br><span class="line">arrNew[arrNew.length - <span class="number">1</span>] = addNum;</span><br><span class="line"><span class="comment">//让 arr 指向 arrNew, </span></span><br><span class="line">arr = arrNew;</span><br><span class="line"><span class="comment">//输出arr 看看效果</span></span><br><span class="line">System.out.println(<span class="string">&quot;====arr扩容后元素情况====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//问用户是否继续</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否继续添加 y/n&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>( key == <span class="string">&#x27;n&#x27;</span>) &#123; <span class="comment">//如果输入n ,就结束</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;你退出了添加...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-1-6-数组缩减"><a href="#5-1-6-数组缩减" class="headerlink" title="5.1.6 数组缩减"></a>5.1.6 数组缩减</h3><p>新建一个数组之后缩减, 再将原数组名指向新的数组, 原数组空间被垃圾回收机制回收销毁</p><h3 id="5-1-7-应用案例"><a href="#5-1-7-应用案例" class="headerlink" title="5.1.7 应用案例"></a>5.1.7 应用案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建一个char类型的26个元素的数组，分别 放置&#x27;A&#x27;-&#x27;Z&#x27;。</span></span><br><span class="line"><span class="comment">使用for循环访问所有元素并打印出来。</span></span><br><span class="line"><span class="comment">提示：char类型数据运算 &#x27;A&#x27;+1 -&gt; &#x27;B&#x27;  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 定义一个 数组  char[] chars = new char[26]</span></span><br><span class="line"><span class="comment">2. 因为 &#x27;A&#x27; + 1 = &#x27;B&#x27; 类推，所以老师使用for来赋值</span></span><br><span class="line"><span class="comment">3. 使用for循环访问所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;<span class="comment">//循环26次</span></span><br><span class="line"><span class="comment">//chars 是 char[] </span></span><br><span class="line"><span class="comment">//chars[i] 是 char</span></span><br><span class="line">chars[i] = (<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span> + i); <span class="comment">//&#x27;A&#x27; + i 是int , 需要强制转换</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;===chars数组===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;<span class="comment">//循环26次</span></span><br><span class="line">System.out.print(chars[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayExercise02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求出一个数组int[]的最大值 &#123;4,-1,9, 10,23&#125;，并得到对应的下标</span></span><br><span class="line"><span class="comment">//老韩思路分析</span></span><br><span class="line"><span class="comment">//1. 定义一个int数组 int[] arr = &#123;4,-1,9, 10,23&#125;;</span></span><br><span class="line"><span class="comment">//2. 假定 max = arr[0] 是最大值 , maxIndex=0;</span></span><br><span class="line"><span class="comment">//3. 从下标 1 开始遍历arr， 如果max &lt; 当前元素，说明max 不是真正的</span></span><br><span class="line"><span class="comment">//   最大值, 我们就 max=当前元素; maxIndex=当前元素下标</span></span><br><span class="line"><span class="comment">//4. 当我们遍历这个数组arr后 , max就是真正的最大值，maxIndex最大值</span></span><br><span class="line"><span class="comment">//   对应的下标</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">4</span>,-<span class="number">1</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];<span class="comment">//假定第一个元素就是最大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;<span class="comment">//从下标 1 开始遍历arr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(max &lt; arr[i]) &#123;<span class="comment">//如果max &lt; 当前元素</span></span><br><span class="line">max = arr[i]; <span class="comment">//把max 设置成 当前元素</span></span><br><span class="line">maxIndex = i; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//当我们遍历这个数组arr后 , max就是真正的最大值，maxIndex最大值下标</span></span><br><span class="line">System.out.println(<span class="string">&quot;max=&quot;</span> + max + <span class="string">&quot; maxIndex=&quot;</span> + maxIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework04</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序, 比如:  </span></span><br><span class="line"><span class="comment">[10， 12， 45， 90],  添加23 后, 数组为 [10， 12，23， 45， 90]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路 本质数组扩容 + 定位</span></span><br><span class="line"><span class="comment">1. 我们先确定 添加数应该插入到哪个索引</span></span><br><span class="line"><span class="comment">2. 然后扩容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义原数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">90</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">insertNum</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">//index就是要插入的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历 arr数组， 如果发现 insertNum&lt;=arr[i], 说明 i 就是要插入的位置</span></span><br><span class="line"><span class="comment">//使用 index 保留 index = i;</span></span><br><span class="line"><span class="comment">//如果遍历完后，没有发现 insertNum&lt;=arr[i]， 说明 index = arr.length</span></span><br><span class="line"><span class="comment">//即：添加到arr的最后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(insertNum &lt;= arr[i]) &#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//找到位置后，就退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断index 的值</span></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123; <span class="comment">//说明没有还没有找到位置</span></span><br><span class="line">index = arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="comment">//先创建一个新的数组，大小 arr.length + 1</span></span><br><span class="line"><span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">//下面老师准备将arr的元素拷贝到 arrNew ,并且要跳过 index位置</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">int[] arr = &#123;10, 12, 45, 90&#125;;</span></span><br><span class="line"><span class="comment">arrNew = &#123;              &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//i 控制arrNew的下标  , j用来控制arr数组的下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; arrNew.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( i != index ) &#123; <span class="comment">//说明可以把 arr的元素拷贝到 arrNew</span></span><br><span class="line">arrNew[i] = arr[j];</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//i这个位置就是要插入的数</span></span><br><span class="line">arrNew[i] = insertNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让arr 指向 arrNew , 原来的数组，就成为垃圾，被销毁</span></span><br><span class="line">arr = arrNew;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;======插入后，arr数组的元素情况======&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-2-排序"><a href="#5-2-排序" class="headerlink" title="5.2 排序"></a>5.2 排序</h2><h3 id="5-2-1-内部排序"><a href="#5-2-1-内部排序" class="headerlink" title="5.2.1 内部排序"></a>5.2.1 内部排序</h3><p>指将需要处理的所有数据都加载到内部存储器中进行排序。</p><p>包括 (交换式排序法、选择式排序法和插入式排序法)；</p><h3 id="5-2-2-外部排序"><a href="#5-2-2-外部排序" class="headerlink" title="5.2.2 外部排序"></a>5.2.2 外部排序</h3><p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</p><p>包括 (合并排序法和直接合并排序法)</p><h3 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老韩 化繁为简，先死后活</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组 [24,69,80,57,13]</span></span><br><span class="line"><span class="comment">第1轮排序: 目标把最大数放在最后</span></span><br><span class="line"><span class="comment">第1次比较[24,69,80,57,13]</span></span><br><span class="line"><span class="comment">第2次比较[24,69,80,57,13]</span></span><br><span class="line"><span class="comment">第3次比较[24,69,57,80,13]</span></span><br><span class="line"><span class="comment">第4次比较[24,69,57,13,80]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>, -<span class="number">1</span>, <span class="number">30</span>, <span class="number">200</span>, -<span class="number">110</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//用于辅助交换的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将多轮排序使用外层循环包括起来即可</span></span><br><span class="line"><span class="comment">//先死后活 =》 4就是 arr.length - 1</span></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;<span class="comment">//外层循环是4次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;<span class="comment">//4次比较-3次-2次-1次</span></span><br><span class="line"><span class="comment">//如果前面的数&gt;后面的数，就交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n==第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;轮==&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">System.out.print(arr[j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一下是一个一个循环, 两层循环的前一个版本</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// for( int j = 0; j &lt; 4; j++) &#123;//4次比较</span></span><br><span class="line"><span class="comment">// //如果前面的数&gt;后面的数，就交换</span></span><br><span class="line"><span class="comment">// if(arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">// temp = arr[j];</span></span><br><span class="line"><span class="comment">// arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">// arr[j+1] = temp;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;==第1轮==&quot;);</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(arr[j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// /*</span></span><br><span class="line"><span class="comment">// 第2轮排序: 目标把第二大数放在倒数第二位置</span></span><br><span class="line"><span class="comment">// 第1次比较[24,69,57,13,80]</span></span><br><span class="line"><span class="comment">// 第2次比较[24,57,69,13,80]</span></span><br><span class="line"><span class="comment">// 第3次比较[24,57,13,69,80]</span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for( int j = 0; j &lt; 3; j++) &#123;//3次比较</span></span><br><span class="line"><span class="comment">// //如果前面的数&gt;后面的数，就交换</span></span><br><span class="line"><span class="comment">// if(arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">// temp = arr[j];</span></span><br><span class="line"><span class="comment">// arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">// arr[j+1] = temp;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;\n==第2轮==&quot;);</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(arr[j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第3轮排序: 目标把第3大数放在倒数第3位置</span></span><br><span class="line"><span class="comment">// 第1次比较[24,57,13,69,80]</span></span><br><span class="line"><span class="comment">// 第2次比较[24,13,57,69,80]</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// for( int j = 0; j &lt; 2; j++) &#123;//2次比较</span></span><br><span class="line"><span class="comment">// //如果前面的数&gt;后面的数，就交换</span></span><br><span class="line"><span class="comment">// if(arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">// temp = arr[j];</span></span><br><span class="line"><span class="comment">// arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">// arr[j+1] = temp;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;\n==第3轮==&quot;);</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(arr[j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /*</span></span><br><span class="line"><span class="comment">// 第4轮排序: 目标把第4大数放在倒数第4位置</span></span><br><span class="line"><span class="comment">// 第1次比较[13,24,57,69,80]</span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for( int j = 0; j &lt; 1; j++) &#123;//1次比较</span></span><br><span class="line"><span class="comment">// //如果前面的数&gt;后面的数，就交换</span></span><br><span class="line"><span class="comment">// if(arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">// temp = arr[j];</span></span><br><span class="line"><span class="comment">// arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">// arr[j+1] = temp;  </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(&quot;\n==第4轮==&quot;);</span></span><br><span class="line"><span class="comment">// for(int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class="line"><span class="comment">// System.out.print(arr[j] + &quot;\t&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-3-查找"><a href="#5-3-查找" class="headerlink" title="5.3 查找"></a>5.3 查找</h2><p>常用查找:</p><ul><li>顺序查找</li><li>二分查找</li></ul><h3 id="5-3-1-顺序查找"><a href="#5-3-1-顺序查找" class="headerlink" title="5.3.1 顺序查找"></a>5.3.1 顺序查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：</span></span><br><span class="line"><span class="comment">从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】 </span></span><br><span class="line"><span class="comment">要求: 如果找到了，就提示找到，并给出下标值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析</span></span><br><span class="line"><span class="comment">1. 定义一个字符串数组</span></span><br><span class="line"><span class="comment">2. 接收用户输入, 遍历数组，逐一比较，如果有，则提示信息，并退出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个字符串数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;白眉鹰王&quot;</span>, <span class="string">&quot;金毛狮王&quot;</span>, <span class="string">&quot;紫衫龙王&quot;</span>, <span class="string">&quot;青翼蝠王&quot;</span>&#125;;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); </span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，逐一比较，如果有，则提示信息，并退出</span></span><br><span class="line"><span class="comment">//这里老师给大家一个编程思想/技巧, 一个经典的方法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line"><span class="comment">//比较 字符串比较 equals, 如果要找到名字就是当前元素</span></span><br><span class="line"><span class="keyword">if</span>(findName.equals(names[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;恭喜你找到 &quot;</span> + findName);</span><br><span class="line">System.out.println(<span class="string">&quot;下标为= &quot;</span> + i);</span><br><span class="line"><span class="comment">//把i 保存到 index</span></span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//退出 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123; <span class="comment">//没有找到</span></span><br><span class="line">System.out.println(<span class="string">&quot;sorry ,没有找到 &quot;</span> + findName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-4-二维数组"><a href="#5-4-二维数组" class="headerlink" title="5.4 二维数组"></a>5.4 二维数组</h2><h3 id="5-4-1-二维数组基础"><a href="#5-4-1-二维数组基础" class="headerlink" title="5.4.1 二维数组基础"></a>5.4.1 二维数组基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArray01</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">请用二维数组输出如下图形</span></span><br><span class="line"><span class="comment">0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">0 0 1 0 0 0</span></span><br><span class="line"><span class="comment">0 2 0 3 0 0</span></span><br><span class="line"><span class="comment">0 0 0 0 0 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//什么是二维数组： </span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. 从定义形式上看 int[][]</span></span><br><span class="line"><span class="comment">//2. 可以这样理解，原来的一维数组的每个元素是一维数组, 就构成二维数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = &#123; &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">2</span>,  <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, </span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于二维数组的关键概念</span></span><br><span class="line"><span class="comment">//(1)</span></span><br><span class="line">System.out.println(<span class="string">&quot;二维数组的元素个数=&quot;</span> + arr.length);</span><br><span class="line"><span class="comment">//(2) 二维数组的每个元素是一维数组, 所以如果需要得到每个一维数组的值</span></span><br><span class="line"><span class="comment">//    还需要再次遍历</span></span><br><span class="line"><span class="comment">//(3) 如果我们要访问第 (i+1)个一维数组的第j+1个值 arr[i][j];</span></span><br><span class="line"><span class="comment">//    举例 访问 3, =》 他是第3个一维数组的第4个值 arr[2][3]</span></span><br><span class="line">System.out.println(<span class="string">&quot;第3个一维数组的第4个值=&quot;</span> + arr[<span class="number">2</span>][<span class="number">3</span>]); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出二维图形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">//遍历二维数组的每个元素</span></span><br><span class="line"><span class="comment">//遍历二维数组的每个元素(数组)</span></span><br><span class="line"><span class="comment">//1. arr[i] 表示 二维数组的第i+1个元素 比如arr[0]：二维数组的第一个元素</span></span><br><span class="line"><span class="comment">//2. arr[i].length 得到 对应的 每个一维数组的长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>); <span class="comment">//输出了一维数组</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-二维数组赋值机制-※"><a href="#5-4-2-二维数组赋值机制-※" class="headerlink" title="5.4.2 二维数组赋值机制 (※)"></a>5.4.2 二维数组赋值机制 (※)</h3><p>允许列不相等, 即 <code>new</code> 的时候必须把行确定出来, 列可以后续开辟</p><p>本质上是一维数组的每一个元素都是一维数组, 这时候就要把外层的一维数组确定出来</p><p>而内层的一维数组可以后续进行创建, 如果没创建, 内存默认为 <code>null</code>, 无伤大雅, 啥都不影响</p><p>因此可以动态定义每一行的列数, 没有定义的列均为 <code>null</code></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230126132258325.png" alt="二维数组赋值机制"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArray02</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int arr[][] = new int[2][3];</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[][]; <span class="comment">//声明二维数组</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//再开空间 </span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//遍历arr数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;<span class="comment">//对每个一维数组遍历</span></span><br><span class="line">System.out.print(arr[i][j] +<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列数不确定性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArray03</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看一个需求：动态创建下面二维数组，并输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> i = 0:1</span></span><br><span class="line"><span class="comment"> i = 1:22</span></span><br><span class="line"><span class="comment"> i = 2:333</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 一个有三个一维数组, 每个一维数组的元素是不一样的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 二维数组，一个有3个一维数组，但是每个一维数组还没有开数据空间</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">//遍历arr每个一维数组</span></span><br><span class="line"><span class="comment">//给每个一维数组开空间 new</span></span><br><span class="line"><span class="comment">//如果没有给一维数组 new ,那么 arr[i]就是null</span></span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一维数组，并给一维数组的每个元素赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  j &lt; arr[i].length; j++) &#123;</span><br><span class="line">arr[i][j] = i + <span class="number">1</span>;<span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=====arr元素=====&quot;</span>);</span><br><span class="line"><span class="comment">//遍历arr输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//输出arr的每个一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态初始化就是直接在定义时赋值</p><p><code>类型 数组名[][] = &#123;&#123;值 1,值 2..&#125;,&#123;值 1,值 2..&#125;,&#123;值 1,值 2..&#125;&#125;</code></p><h3 id="5-4-3-杨辉三角"><a href="#5-4-3-杨辉三角" class="headerlink" title="5.4.3 杨辉三角"></a>5.4.3 杨辉三角</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YangHui</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用二维数组打印一个 10 行杨辉三角</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 3  1</span></span><br><span class="line"><span class="comment">1 4 6  4  1</span></span><br><span class="line"><span class="comment">1 5 10 10 5 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">规律</span></span><br><span class="line"><span class="comment"> 1.第一行有 1 个元素, 第 n 行有 n 个元素</span></span><br><span class="line"><span class="comment"> 2. 每一行的第一个元素和最后一个元素都是 1</span></span><br><span class="line"><span class="comment"> 3. 从第三行开始, 对于非第一个元素和最后一个元素的元素的值. arr[i][j] </span></span><br><span class="line"><span class="comment">  arr[i][j]  =  arr[i-1][j] + arr[i-1][j-1]; //必须找到这个规律</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>[][] yangHui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yangHui.length; i++) &#123;<span class="comment">//遍历yangHui的每个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给每个一维数组(行) 开空间</span></span><br><span class="line">yangHui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//给每个一维数组(行) 赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yangHui[i].length; j++)&#123;</span><br><span class="line"><span class="comment">//每一行的第一个元素和最后一个元素都是1</span></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span> || j == yangHui[i].length - <span class="number">1</span>) &#123;</span><br><span class="line">yangHui[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//中间的元素</span></span><br><span class="line">yangHui[i][j]  =  yangHui[i-<span class="number">1</span>][j] + yangHui[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出杨辉三角</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yangHui.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yangHui[i].length; j++) &#123;<span class="comment">//遍历输出该行</span></span><br><span class="line">System.out.print(yangHui[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-二维数组使用细节"><a href="#5-4-4-二维数组使用细节" class="headerlink" title="5.4.4 二维数组使用细节"></a>5.4.4 二维数组使用细节</h3><ol><li><p>一维数组的声明方式有: <code>int[] x 或者 int x[]</code></p></li><li><p>二维数组的声明方式有: <code>int[][] y 或者 int[] y[] 或者 int y</code>[][]</p></li><li><p>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同。</p><p>比如： map[][] 是一个二维数组 <code>int map [][] = &#123;&#123;1,2&#125;,&#123;3,4,5&#125;&#125;</code></p><p>由 map[0] 是一个含有两个元素的一维数组 ，map[1] 是一个含有三个元素的一维数组构成，我们也称为列数不等的二维数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML 类图与对象间的关系</title>
      <link href="/2023/01/18/UML%20%E7%B1%BB%E5%9B%BE%E4%B8%8E%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2023/01/18/UML%20%E7%B1%BB%E5%9B%BE%E4%B8%8E%E5%AF%B9%E8%B1%A1%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="UML-类图与对象间的关系"><a href="#UML-类图与对象间的关系" class="headerlink" title="UML 类图与对象间的关系"></a>UML 类图与对象间的关系</h1><h1 id="一、UML"><a href="#一、UML" class="headerlink" title="一、UML"></a>一、UML</h1><blockquote><p>UML——Unified modeling language UML (统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用<br>于帮助软件开发人员进行思考和记录思路的结果</p></blockquote><h2 id="1-1-UML-图的分类"><a href="#1-1-UML-图的分类" class="headerlink" title="1.1 UML 图的分类"></a>1.1 UML 图的分类</h2><ol><li>用例图(use case)</li><li>静态结构图：类图、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ol><p>类图用于描述<strong>类(对象)本身的组成和类(对象)之间的各种静态关系</strong>, 最重要</p><h2 id="1-2-类图的使用"><a href="#1-2-类图的使用" class="headerlink" title="1.2 类图的使用"></a>1.2 类图的使用</h2><p>我们借助画图网站中的元素来了解类图的使用</p><blockquote><p><a href="https://app.diagrams.net/">https://app.diagrams.net/</a></p></blockquote><p>书写格式: <code>属性名\方法名: 类型</code></p><p>就是正常在代码里用的时候反过来</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118153821028.png" alt="创建一个类"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118153901253.png" alt="创建一个只有属性的类"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154630361.png" alt="创建一个空白的类"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154650042.png" alt="创建一个无属性无方法的类"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154732067.png" alt="创建一个有属性有方法的类"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154050354.png" alt="在一个类中添加一个属性或方法"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154137727.png" alt="添加一个分割线"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118153802069.png" alt="创建一个接口"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118154757768.png" alt="创建一个啥都有的接口"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155201370.png" alt="依赖关系"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155043427.png" alt="关联关系（1 对 1"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155250136.png" alt="关联关系（双向）"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155438870.png" alt="关联关系(单向)"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155216238.png" alt="泛化（继承）关系"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155346819.png" alt="实现关系"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155119549.png" alt="聚合关系(一对多)"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155407954.png" alt="聚合关系(一对一)"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155139963.png" alt="组合关系(一对多)"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118155419516.png" alt="组合关系(一对一)"></p><hr><h1 id="二、依赖关系-Dependence"><a href="#二、依赖关系-Dependence" class="headerlink" title="二、依赖关系 (Dependence)"></a>二、依赖关系 (Dependence)</h1><blockquote><p>只要是在<strong>类中用到了对方</strong>，那么他们之间<strong>就存在依赖关系</strong>。如果没有对方，连编绎都通过不了。</p></blockquote><ul><li><strong>类中</strong>用到了对方</li><li>如果是<strong>类的成员属性</strong></li><li>如果是<strong>方法的返回类型</strong></li><li>是<strong>方法接收的参数类型</strong></li><li><strong>方法中</strong>使用到</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> IDCard <span class="title function_">getIDCard</span><span class="params">(Integer personid)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonDao</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118173949591.png" alt="依赖"></p><h1 id="三、泛化（继承）关系-generalization"><a href="#三、泛化（继承）关系-generalization" class="headerlink" title="三、泛化（继承）关系 (generalization)"></a>三、泛化（继承）关系 (generalization)</h1><blockquote><p>泛化关系实际上就是<strong>继承</strong>关系，他是依赖关系的特例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DaoSupport</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object entity)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Object id)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title class_">Daosupport</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118174427049.png" alt="泛化(继承)"></p><hr><h1 id="四、实现关系-Implementation"><a href="#四、实现关系-Implementation" class="headerlink" title="四、实现关系 (Implementation)"></a>四、实现关系 (Implementation)</h1><blockquote><p>实现关系实际上就是 <strong>A 类实现 B 接口</strong>，他是<strong>依赖关系的特例</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Interger id)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Interger id)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118174613790.png" alt="实现"></p><hr><h1 id="五、关联关系（Association）"><a href="#五、关联关系（Association）" class="headerlink" title="五、关联关系（Association）"></a>五、关联关系（Association）</h1><blockquote><p>关联关系实际上就是<strong>类与类之间的联系，他是依赖关系的特例</strong></p></blockquote><p>关联的导航性：单向 或者 双向</p><p>关联的多重性: 一对一, 一对多 或者 多对多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个人有一个身份证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118174843437.png" alt="单向一对一"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个人有一个身份证, 一个身份证属于一个人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Person person</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118175003934.png" alt="双向一对一"></p><hr><h1 id="六、聚合关系（Aggregation）"><a href="#六、聚合关系（Aggregation）" class="headerlink" title="六、聚合关系（Aggregation）"></a>六、聚合关系（Aggregation）</h1><blockquote><p>表示<strong>整体和部分的关系</strong>，整体与部分<strong>可以分开</strong>。聚合关系是<strong>关联关系的特例</strong>, 也有导航性与多重性</p></blockquote><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118175241872.png" alt="鼠标和键盘可以从电脑上分离"></p><hr><h1 id="七、组合关系（Composition）"><a href="#七、组合关系（Composition）" class="headerlink" title="七、组合关系（Composition）"></a>七、组合关系（Composition）</h1><blockquote><p>表示<strong>整体与部分的关系</strong>，但是<strong>整体与部分不可以分开</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在程序中我们定义实体：Person 与 IDCard、Head, </span></span><br><span class="line"><span class="comment">// 那么 Head 和 Person 就是 组合，IDCard 和 Person 就是聚合。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard card;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Head</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Head</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 但是如果在程序中 Person 实体中定义了对 IDCard 进行级联删除，即删除 Person 时连同 IDCard 一起删除，</span></span><br><span class="line"><span class="comment">// 那么 IDCard 和 Person 就是组合</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118180717093.png" alt="组合 or 聚合"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(); <span class="comment">//鼠标可以和 computer 不能分离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Moniter</span> <span class="variable">moniter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Moniter</span>();<span class="comment">//显示器可以和 Computer 不能分离</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoniter</span><span class="params">(Moniter moniter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.moniter = moniter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Moniter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230118180839962.png" alt="组合"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> UML </tag>
            
            <tag> 类图 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式 -- 七大基本原则</title>
      <link href="/2023/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20--%20%E4%B8%83%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/"/>
      <url>/2023/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20--%20%E4%B8%83%E5%A4%A7%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式-–-七大基本原则"><a href="#设计模式-–-七大基本原则" class="headerlink" title="设计模式 – 七大基本原则"></a>设计模式 – 七大基本原则</h1><h1 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h1><ul><li>找出应用中可<strong>能需要变化之处</strong>，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>针对<strong>接口编程</strong>，而不是针对实现编程。</li><li>为了交互对象之间的<strong>松耦合</strong>设计而努力</li></ul><hr><h1 id="一、单一职责原则（SRP）"><a href="#一、单一职责原则（SRP）" class="headerlink" title="一、单一职责原则（SRP）"></a>一、单一职责原则（SRP）</h1><blockquote><p>对类来说的，即<strong>一个类应该只负责一项职责</strong>。</p><p>如类 A 负责两个不同职责：职责 1，职责 2。</p><p>当职责 1 需求变更而改变 A 时，可能造成职责 2 执行错误，所以需要将类 A 的粒度分解为 A1，A2</p></blockquote><p>可以分别在<strong>类</strong>的级别上与<strong>方法</strong>的级别上遵循单依职责原则</p><p>但是最好是在类的级别上， 在方法级别上一般都是<strong>一个类的方法比较少</strong>或者<strong>逻辑真的很简单</strong>的时候</p><p>核心思想是少用 <code>if else</code> 语句, 否则会增加代码耦合性</p><ol><li><p>降低类的复杂度，一个类只负责一项职责。</p></li><li><p>提高类的可读性，可维护性</p></li><li><p>降低变更引起的风险</p></li><li><p>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则；</p><p>只有类中方法数量足够少，可以在方法级别保持单一职责原则</p></li></ol><h2 id="违反单一职责原则"><a href="#违反单一职责原则" class="headerlink" title="违反单一职责原则"></a>违反单一职责原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.singleresponsibility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">vehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交通工具类</span></span><br><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="comment">// 1. 在方式1 的run方法中，违反了单一职责原则</span></span><br><span class="line"><span class="comment">// 2. 解决的方案非常的简单，根据交通工具运行方法不同，分解成不同类即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在公路上运行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类级别实现单一职责原则"><a href="#类级别实现单一职责原则" class="headerlink" title="类级别实现单一职责原则"></a>类级别实现单一职责原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.singleresponsibility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">RoadVehicle</span> <span class="variable">roadVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoadVehicle</span>();</span><br><span class="line">roadVehicle.run(<span class="string">&quot;摩托车&quot;</span>);</span><br><span class="line">roadVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">AirVehicle</span> <span class="variable">airVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AirVehicle</span>();</span><br><span class="line"></span><br><span class="line">airVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方案2的分析</span></span><br><span class="line"><span class="comment">//1. 遵守单一职责原则</span></span><br><span class="line"><span class="comment">//2. 但是这样做的改动很大，即将类分解，同时修改客户端</span></span><br><span class="line"><span class="comment">//3. 改进：直接修改Vehicle 类，改动的代码会比较少=&gt;方案3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoadVehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;公路运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AirVehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;天空运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterVehicle</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot;水中运行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法级别实现单一职责原则"><a href="#方法级别实现单一职责原则" class="headerlink" title="方法级别实现单一职责原则"></a>方法级别实现单一职责原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.singleresponsibility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleResponsibility3</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Vehicle2</span> <span class="variable">vehicle2</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle2</span>();</span><br><span class="line">vehicle2.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">vehicle2.runWater(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">vehicle2.runAir(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3的分析</span></span><br><span class="line"><span class="comment">//1. 这种修改方法没有对原来的类做大的修改，只是增加方法</span></span><br><span class="line"><span class="comment">//2. 这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line"><span class="comment">//处理</span></span><br><span class="line"></span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在公路上运行....&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runAir</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在天空上运行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runWater</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">System.out.println(vehicle + <span class="string">&quot; 在水中行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2.</span></span><br><span class="line"><span class="comment">//..</span></span><br><span class="line"><span class="comment">//..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="二、接口隔离原则-（ISP）"><a href="#二、接口隔离原则-（ISP）" class="headerlink" title="二、接口隔离原则 （ISP）"></a>二、接口隔离原则 （ISP）</h1><blockquote><p>客户端不应该依赖它不需要的接口，即<strong>一个类对另一个类的依赖应该建立在最小的接口</strong>上</p></blockquote><p>一个接口可能有许多需要实现的方法, 但是一个类如果通过一个接口来依赖另一个类的时候可能就回需要实现那个它不需要的方法</p><p>这时候我们就要将一个大接口拆分成几个小接口, 让它们物尽其用, 让一个类只依赖那个它们需要的最小接口即可</p><h2 id="违反实现接口隔离原则"><a href="#违反实现接口隔离原则" class="headerlink" title="违反实现接口隔离原则"></a>违反实现接口隔离原则</h2><p>类 A 通过接口 Interface1 依赖类 B，类 C 通过接口 Interface1 依赖类 D，</p><p>如果接口 Interface1 对于类 A 和类 C来说不是最小接口，那么类 B 和类 D 必须去实现他们不需要的方法</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117134334649.png" alt="不满足接口隔离"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.segregation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="comment">//A 类通过接口Interface1 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123; <span class="comment">//C 类通过接口Interface1 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遵循接口隔离原则"><a href="#遵循接口隔离原则" class="headerlink" title="遵循接口隔离原则"></a>遵循接口隔离原则</h2><p>将接口 Interface1 <strong>拆分</strong>为独立的几个接口(<strong>这里我们拆分成 3 个接口</strong>)，</p><p>类 A 和类 C 分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117134505230.png" alt="通过接口隔离原则拆分"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.segregation.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 使用一把</span></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>()); <span class="comment">// A类通过接口去依赖B类</span></span><br><span class="line">a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line"></span><br><span class="line">c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>()); <span class="comment">// C类通过接口去依赖(使用)D类</span></span><br><span class="line">c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口1</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口2</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface2</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口3</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface3</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface2 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation3</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 实现了 operation3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface3 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation4</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation5</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;D 实现了 operation5&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="comment">// A 类通过接口Interface1,Interface2 依赖(使用) B类，但是只会用到1,2,3方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">i.operation2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface2 i)</span> &#123;</span><br><span class="line">i.operation3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123; <span class="comment">// C 类通过接口Interface1,Interface3 依赖(使用) D类，但是只会用到1,4,5方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 i)</span> &#123;</span><br><span class="line">i.operation1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">i.operation4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface3 i)</span> &#123;</span><br><span class="line">i.operation5();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、依赖倒转原则（DIP）"><a href="#三、依赖倒转原则（DIP）" class="headerlink" title="三、依赖倒转原则（DIP）"></a>三、依赖倒转原则（DIP）</h1><blockquote><ul><li>高层模块不应该依赖低层模块，二者都应该依赖其<strong>抽象</strong></li><li><strong>抽象不应该依赖细节，细节应该依赖抽象</strong></li><li>依赖倒转(倒置)的中心思想是<strong>面向接口编程</strong></li></ul></blockquote><p>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，</p><p>把展现细节的任务交给他们的实现类去完成</p><p>每个子类都应该有它的上层接口或抽象， 抽象指的就是接口或者<strong>抽象类</strong>， 细节就是实现类</p><p>为了增强代码的稳定性， 尽量每个子类（底层模块）都有抽象类或接口， 两者都有更稳定</p><p>抽象的作用相当于在实现类和变量引用中加了一层缓冲， </p><p>这样我们在对细节进行修改或扩展的时候就可以避免在变量引用中进行修改导致代码冗杂</p><h2 id="违反依赖倒转原则"><a href="#违反依赖倒转原则" class="headerlink" title="违反依赖倒转原则"></a>违反依赖倒转原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成Person接收消息的功能</span></span><br><span class="line"><span class="comment">//方式1分析</span></span><br><span class="line"><span class="comment">//1. 简单，比较容易想到</span></span><br><span class="line"><span class="comment">//2. 如果我们获取的对象是 微信，短信等等，则新增类，同时Perons也要增加相应的接收方法</span></span><br><span class="line"><span class="comment">//3. 解决思路：引入一个抽象的接口IReceiver, 表示接收者, 这样Person类与接口IReceiver发生依赖</span></span><br><span class="line"><span class="comment">//   因为Email, WeiXin 等等属于接收的范围，他们各自实现IReceiver 接口就ok, 这样我们就符号依赖倒转原则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email )</span> &#123;</span><br><span class="line">System.out.println(email.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用接口传递实现依赖倒转"><a href="#使用接口传递实现依赖倒转" class="headerlink" title="使用接口传递实现依赖倒转"></a>使用接口传递实现依赖倒转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependecyInversion</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//客户端无需改变</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line"></span><br><span class="line">person.receive(<span class="keyword">new</span> <span class="title class_">WeiXin</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加微信</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeiXin</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;微信信息: hello,ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="comment">//这里我们是对接口的依赖</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(IReceiver receiver )</span> &#123;</span><br><span class="line">System.out.println(receiver.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用构造器或-setter-方法实现依赖倒转原则"><a href="#使用构造器或-setter-方法实现依赖倒转原则" class="headerlink" title="使用构造器或 setter 方法实现依赖倒转原则"></a>使用构造器或 setter 方法实现依赖倒转原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DependencyPass</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">ChangHong</span> <span class="variable">changHong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangHong</span>();</span><br><span class="line"><span class="comment">//OpenAndClose openAndClose = new OpenAndClose();</span></span><br><span class="line"><span class="comment">//openAndClose.open(changHong);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器进行依赖传递</span></span><br><span class="line"><span class="comment">//OpenAndClose openAndClose = new OpenAndClose(changHong);</span></span><br><span class="line"><span class="comment">//openAndClose.open();</span></span><br><span class="line"><span class="comment">//通过setter方法进行依赖传递</span></span><br><span class="line"><span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">openAndClose.setTv(changHong);</span><br><span class="line">openAndClose.open();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1： 通过接口传递实现依赖</span></span><br><span class="line"><span class="comment">// 开关的接口</span></span><br><span class="line"><span class="comment">// interface IOpenAndClose &#123;</span></span><br><span class="line"><span class="comment">// public void open(ITV tv); //抽象方法,接收接口</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// interface ITV &#123; //ITV接口</span></span><br><span class="line"><span class="comment">// public void play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// class ChangHong implements ITV &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void play() &#123;</span></span><br><span class="line"><span class="comment">//// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;长虹电视机，打开&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//// 实现接口</span></span><br><span class="line"><span class="comment">// class OpenAndClose implements IOpenAndClose&#123;</span></span><br><span class="line"><span class="comment">// public void open(ITV tv)&#123;</span></span><br><span class="line"><span class="comment">// tv.play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2: 通过构造方法依赖传递</span></span><br><span class="line"><span class="comment">// interface IOpenAndClose &#123;</span></span><br><span class="line"><span class="comment">// public void open(); //抽象方法</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// interface ITV &#123; //ITV接口</span></span><br><span class="line"><span class="comment">// public void play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// class OpenAndClose implements IOpenAndClose&#123;</span></span><br><span class="line"><span class="comment">// public ITV tv; //成员</span></span><br><span class="line"><span class="comment">// public OpenAndClose(ITV tv)&#123; //构造器</span></span><br><span class="line"><span class="comment">// this.tv = tv;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// public void open()&#123;</span></span><br><span class="line"><span class="comment">// this.tv.play();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式3 , 通过setter方法传递</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123; <span class="comment">// ITV接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line"><span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.tv = tv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.tv.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;长虹电视机，打开&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="四、里氏代换原则（LSP）"><a href="#四、里氏代换原则（LSP）" class="headerlink" title="四、里氏代换原则（LSP）"></a>四、里氏代换原则（LSP）</h1><blockquote><p> 继承所带来的问题:</p></blockquote><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有<br>的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</p><p><strong>继承在给程序设计带来便利的同时，也带来了弊端</strong>。比如使用继承会给程序带来<strong>侵入性</strong>，程序的可移植性降低，<br>增加对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且<br>父类修改后，所有涉及到子类的功能都有可能产生故障</p><blockquote><p>如果对每个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，</p><p>使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><p>换句话说，<strong>所有引用基类的地方必须能透明地使用其子类的对象</strong>。</p></blockquote><p>在使用继承时，遵循里氏替换原则，<strong>在子类中尽量不要重写父类的方法</strong></p><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可以通过<strong>聚合，组合，依赖</strong> 来<br>解决问题</p><p>就是说继承的时候子类可能会<strong>无意间重写父类方法,</strong> 结果导致使用的时候出错</p><p>解决方法是<strong>将继承关系拆解</strong>, 子类不再是子类, 父类不再是父类</p><p>将他们需要的方法提出来到一个第三类, 原子类和原父类均继承这个第三类, </p><p>然后通过<strong>聚合, 组合, 依赖</strong>等方式重新构建这两个类的关系, 根本思路是减少这两个类的耦合性</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117195138477.png" alt="拆解继承关系"></p><h2 id="违反里氏代换原则"><a href="#违反里氏代换原则" class="headerlink" title="违反里氏代换原则"></a>违反里氏代换原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.liskov;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11-3</span></span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1-8</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="遵循里氏代换原则"><a href="#遵循里氏代换原则" class="headerlink" title="遵循里氏代换原则"></a>遵循里氏代换原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.liskov.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"><span class="comment">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span></span><br><span class="line"><span class="comment">//调用完成的功能就会很明确</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11+3</span></span><br><span class="line">System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1+8</span></span><br><span class="line">System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用组合仍然可以使用到A类相关方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func3(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">// 这里本意是求出11-3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">//把更加基础的方法和成员写到Base类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">// 返回两个数的差</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="comment">//如果B需要使用A类的方法,使用组合关系</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们仍然想使用A的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.a.func1(a, b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="五、开闭原则（OCP）"><a href="#五、开闭原则（OCP）" class="headerlink" title="五、开闭原则（OCP）"></a>五、开闭原则（OCP）</h1><p>开闭原则是编程中<strong>最基础、最重要</strong>的设计原则</p><p>所有其他原则以及设计模式都是为了实现开闭原则</p><blockquote><p>一个软件实体如类，模块和函数应该**对扩展开放(对提供方方法)**，对修改关闭(对使用方方法)。</p><p>用抽象构建框架，用实现扩展细节</p></blockquote><p>就是在后期修改时, 尽量不要去修改原来的代码, 只是在原来的代码上进行添加及扩展</p><p>如果改了代码谁知道会对哪个功能产生影响, 这样就可以减少耦合性</p><h2 id="违反开闭原则"><a href="#违反开闭原则" class="headerlink" title="违反开闭原则"></a>违反开闭原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1) 优点是比较好理解，简单易操作。</span></span><br><span class="line"><span class="comment">2) 缺点是违反了设计模式的 ocp 原则，即对扩展开放(提供方)，对修改关闭(使用方)。</span></span><br><span class="line"><span class="comment">即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</span></span><br><span class="line"><span class="comment">3) 比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line"><span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line"><span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.m_type == <span class="number">1</span>)</span><br><span class="line">drawRectangle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>)</span><br><span class="line">drawCircle(s);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>)</span><br><span class="line">drawTriangle(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawTriangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="type">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Triangle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="遵循开闭原则"><a href="#遵循开闭原则" class="headerlink" title="遵循开闭原则"></a>遵循开闭原则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">把创建 Shape 类做成抽象类，并提供一个抽象的 draw 方法，让子类去实现即可，</span></span><br><span class="line"><span class="comment">这样我们有新的图形种类时，只需要让新的图形类继承 Shape，并实现 draw 方法即可，使用方的代码就不需要修 -&gt; 满足了开闭原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line"><span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">OtherGraphic</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line"><span class="comment">//接收 Shape 对象，调用 draw 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">s.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Shape 类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="type">int</span> m_type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">Triangle() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OtherGraphic</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">OtherGraphic() &#123;</span><br><span class="line"><span class="built_in">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制其它图形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="六、迪米特法则（最少知道原则）"><a href="#六、迪米特法则（最少知道原则）" class="headerlink" title="六、迪米特法则（最少知道原则）"></a>六、迪米特法则（最少知道原则）</h1><blockquote><p>一个对象应该对其他对象保持<strong>最少的</strong>了解</p></blockquote><p>类与类关系越密切，耦合度越大<br>迪米特法则又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。</p><p>对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息<br>迪米特法则更简单的定义：只与<strong>直接朋友</strong>通信</p><p><strong>直接朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间<br>是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现<strong>成员变量，方法参数，方法返</strong><br><strong>回值</strong>中的<strong>类</strong>为直接朋友，而出现在<strong>局部变量</strong>中的类不是直接朋友。</p><p><strong>陌生的类最好不要以局部变量的形式出现在类的内部。</strong></p><p>两个类总会有耦合, 我们只是尽可能降低它们之前的耦合</p><p>迪米特法则的本质是<strong>避免类中出现非直接朋友关系的耦合</strong></p><h2 id="违反迪米特法则"><a href="#违反迪米特法则" class="headerlink" title="违反迪米特法则"></a>违反迪米特法则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个学校，下属有各个学院和总部，现要求打印出学校总部员工 ID 和学院员工的 id</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.principle.demeter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line"><span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line"><span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line"><span class="comment">//返回学院的所有员工</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line"><span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line"><span class="comment">//返回学校总部的员工</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析问题</span></span><br><span class="line"><span class="comment">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span></span><br><span class="line"><span class="comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span></span><br><span class="line"><span class="comment">//3. 违反了 迪米特法则 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到学院员工</span></span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="遵循迪米特法则"><a href="#遵循迪米特法则" class="headerlink" title="遵循迪米特法则"></a>遵循迪米特法则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.demeter.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;~~~使用迪米特法则的改进~~~&quot;</span>);</span><br><span class="line"><span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line"><span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line"><span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line"><span class="comment">//返回学院的所有员工</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line"><span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出学院员工的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEmployee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//获取到学院员工</span></span><br><span class="line">List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line"><span class="comment">//返回学校总部的员工</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">list.add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析问题</span></span><br><span class="line"><span class="comment">//1. 将输出学院的员工方法，封装到CollegeManager</span></span><br><span class="line">sub.printEmployee();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取到学校总部员工</span></span><br><span class="line">List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">System.out.println(e.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="七、合成-x2F-聚合复用原则（CARP）"><a href="#七、合成-x2F-聚合复用原则（CARP）" class="headerlink" title="七、合成 &#x2F; 聚合复用原则（CARP）"></a>七、合成 &#x2F; 聚合复用原则（CARP）</h1><blockquote><p>尽量使用合成&#x2F;聚合的方式，而不是使用继承</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言基础 - 基础语法</title>
      <link href="/2023/01/15/Go%20%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%20-%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/01/15/Go%20%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%20-%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-语言基础-基础语法"><a href="#Go-语言基础-基础语法" class="headerlink" title="Go 语言基础 - 基础语法"></a>Go 语言基础 - 基础语法</h1><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-1-什么是-Go-语言"><a href="#1-1-什么是-Go-语言" class="headerlink" title="1.1 什么是 Go 语言"></a>1.1 什么是 Go 语言</h2><ol><li>高性能、高并发</li><li>语法简单、学习曲线平缓</li><li>丰富的标准库</li><li>完善的工具链</li><li>静态链接</li><li>快速编译</li><li>跨平台</li><li>垃圾回收</li></ol><hr><h1 id="二、Go-语言入门"><a href="#二、Go-语言入门" class="headerlink" title="二、Go 语言入门"></a>二、Go 语言入门</h1><h2 id="2-1-安装-Golang"><a href="#2-1-安装-Golang" class="headerlink" title="2.1 安装 Golang"></a>2.1 安装 Golang</h2><ol><li>下载 Go <code>https://go.dev/</code></li><li>配置 Go 语言开发环境 VScode <code>https://go.dev/</code> 或 Goland <code>https://www.jetbrains.com/zh-cn/go/</code></li></ol><hr><h2 id="2-2-基础语法"><a href="#2-2-基础语法" class="headerlink" title="2.2 基础语法"></a>2.2 基础语法</h2><h3 id="2-2-1-Hello-World"><a href="#2-2-1-Hello-World" class="headerlink" title="2.2.1 Hello World"></a>2.2.1 Hello World</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230114182853884.png" alt="命令行执行"></p><h3 id="2-2-2-变量"><a href="#2-2-2-变量" class="headerlink" title="2.2.2 变量"></a>2.2.2 变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 的常见变量类型包括 字符串 整数 浮点型 布尔型 等</span></span><br><span class="line"><span class="comment">// go 语言中, 大部分运算符的使用和优先级都和 C 或 C++ 类似</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种变量声明方式其一: var 变量名 数据类型 = 变量值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;initial&quot;</span> <span class="comment">//go 一般会自动推导变阿玲类型, 有需要的话也可以写上</span></span><br><span class="line"><span class="comment">//字符串类型 string 要用 &quot;&quot; 引起来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b, c <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span> <span class="comment">//同时声明两个整型, 写了数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span> <span class="comment">//布尔型, 没写数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未指定类型定义浮点型时, 模式类型是 float64</span></span><br><span class="line"><span class="keyword">var</span> e <span class="type">float64</span> <span class="comment">//声明了一个浮点型变量 e, 但是没有赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两种变量声明方式其二: 变量名 := 变量值</span></span><br><span class="line">f := <span class="type">float32</span>(e) <span class="comment">//定义一个 float32 类型, 将变量 e 强转</span></span><br><span class="line"></span><br><span class="line">g := a + <span class="string">&quot;foo&quot;</span>                <span class="comment">//go 语言中字符串是内置类型, 可以直接通过加号拼接, 也可以直接用等于号比较两个字符串</span></span><br><span class="line">fmt.Println(a, b, c, d, e, f) <span class="comment">// initial 1 2 true 0 0</span></span><br><span class="line">fmt.Println(g)                <span class="comment">// initialapple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常量的声明就是把 var 改成 const</span></span><br><span class="line"><span class="comment">//go 语言中的常量没有确定的类型, 会根据使用的上下文来自动确定类型</span></span><br><span class="line"><span class="keyword">const</span> s <span class="type">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line"><span class="keyword">const</span> h = <span class="number">500000000</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="number">3e20</span> / h</span><br><span class="line"><span class="comment">//sin 表示正弦</span></span><br><span class="line">fmt.Println(s, h, i, math.Sin(h), math.Sin(i)) <span class="comment">//constant 500000000 6e+11 -0.28470407323754404 0.7591864109375384</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-循环"><a href="#2-2-3-循环" class="headerlink" title="2.2.3 循环"></a>2.2.3 循环</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go 语言中只有 for 循环</span></span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="comment">//什么限制条件都不写, 表示一个死循环</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line"><span class="keyword">break</span> <span class="comment">//循环途中可以使用 break 跳出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经典 C 循环</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">7</span>; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">fmt.Println(j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n := <span class="number">0</span>; n &lt; <span class="number">5</span>; n++ &#123;</span><br><span class="line"><span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">//可以使用 continue 跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">3</span> &#123; <span class="comment">//经典 C 循环的任意一段都可以省略</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-4-if-语句"><a href="#2-2-4-if-语句" class="headerlink" title="2.2.4 if 语句"></a>2.2.4 if 语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go 语言中 if 后面没有小括号, 就算写了编译的时候也会被去掉</span></span><br><span class="line"><span class="comment">//其他的跟 C 一样</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span> == <span class="number">0</span> &#123; <span class="comment">//go 中的 if 必须加大括号, 不能将 if 中的语句与 if 写在同一行</span></span><br><span class="line">fmt.Println(<span class="string">&quot;7 is even&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;7 is odd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">8</span>%<span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;8 is divisible by 4&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num := <span class="number">9</span>; num &lt; <span class="number">0</span> &#123; <span class="comment">//表示先定义一个 num 变量赋值 9, 再执行 if else 语句, 相当于在 if 语句外的定义</span></span><br><span class="line">fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-5-switch-语句"><a href="#2-2-5-switch-语句" class="headerlink" title="2.2.5 switch 语句"></a>2.2.5 switch 语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">a := <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> a &#123; <span class="comment">//switch 后面的变量名 并不需要括号</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;one&quot;</span>) <span class="comment">//go 中不加 break 也不会跑完所有 case, 只会执行相应的 case</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;four or five&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t := time.Now()</span><br><span class="line"><span class="comment">//go 中的 swtich 功能很强大, 可以使用任意的变量类型, 甚至可以取代 if else 语句</span></span><br><span class="line"><span class="comment">//如何取代 if else 语句</span></span><br><span class="line"><span class="keyword">switch</span> &#123; <span class="comment">//switch 后不加任何变量</span></span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>: <span class="comment">//在 case 中写条件分支</span></span><br><span class="line">fmt.Println(<span class="string">&quot;It&#x27;s before noon&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;It&#x27;s after noon&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上的代码会比 if else 逻辑更加清晰</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-6-数组"><a href="#2-2-6-数组" class="headerlink" title="2.2.6 数组"></a>2.2.6 数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为不能任意更改长度, 使用较少</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span>                <span class="comment">//声明一个整型数组</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span>                  <span class="comment">//给数组其中一个变量赋值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;get:&quot;</span>, a[<span class="number">2</span>])   <span class="comment">//get: 0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;get:&quot;</span>, a[<span class="number">4</span>])   <span class="comment">//get: 100</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(a)) <span class="comment">//len: 5</span></span><br><span class="line"></span><br><span class="line">b := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">//声明并初始化一个整型数组</span></span><br><span class="line">fmt.Println(b)             <span class="comment">//[1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span>       <span class="comment">//声明一个整型二位数组</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123; <span class="comment">//for 循环初始化二维数组</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">twoD[i][j] = i + j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Println相当于输出了两个拼接的变量 先输出 2d: 再输出 twoD</span></span><br><span class="line">fmt.Println(<span class="string">&quot;2d: &quot;</span>, twoD) <span class="comment">//2d:  [[0 1 2] [1 2 3]]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-7-切片"><a href="#2-2-7-切片" class="headerlink" title="2.2.7 切片"></a>2.2.7 切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片相比数组可以任意更改长度, 有更多丰富的操作</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>) <span class="comment">//用 make 创建一个长度为 3 的 string 型切片</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;get:&quot;</span>, s[<span class="number">2</span>])   <span class="comment">// c</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(s)) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//append(原数组, &quot;追加值&quot;), 可以使用 append 来给切片追加值</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;d&quot;</span>) <span class="comment">//将 append 的结果赋值到原切片</span></span><br><span class="line"><span class="comment">//slice 的原理是一个切片存储了一个长度 + 一个容量 + 一个指向一个数组的指针, 执行 append 时如果容量不够, 会扩容并返回新的切片</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>)</span><br><span class="line">fmt.Println(s) <span class="comment">// [a b c d e f]</span></span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="built_in">len</span>(s)) <span class="comment">//指定长度为切片 s 的长度</span></span><br><span class="line"><span class="built_in">copy</span>(c, s)                  <span class="comment">//将切片 s 拷贝到切片 c</span></span><br><span class="line">fmt.Println(c)              <span class="comment">// [a b c d e f]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不同于 Python, 不支持负数索引</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment">// [c d e] 取出 2~5 的元素</span></span><br><span class="line">fmt.Println(s[:<span class="number">5</span>])  <span class="comment">// [a b c d e] 取出 0~5 的元素</span></span><br><span class="line">fmt.Println(s[<span class="number">2</span>:])  <span class="comment">// [c d e f] 取出 2~end 的元素</span></span><br><span class="line"></span><br><span class="line">good := []<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;d&quot;</span>&#125; <span class="comment">// 定义并赋值, 相当于一个数组, 但是也可以是 slice</span></span><br><span class="line">fmt.Println(good)                    <span class="comment">// [g o o d]</span></span><br><span class="line">good = <span class="built_in">append</span>(good, <span class="string">&quot;d&quot;</span>)             <span class="comment">// 追加值</span></span><br><span class="line">fmt.Println(good)                    <span class="comment">// [g o o d d]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-8-map"><a href="#2-2-8-map" class="headerlink" title="2.2.8 map"></a>2.2.8 map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">map ~ 哈希 ~ 字典 ~ 键值对</span></span><br><span class="line"><span class="comment">是实际使用最频繁的数据结构</span></span><br><span class="line"><span class="comment">go 中的 map 是完全无序的, 遍历的时候既不会按照字母顺序也不会按照插入顺序, 而是随机顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">//使用 make 创建一个空 map, key 是 string, value 是 int</span></span><br><span class="line">m[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span>              <span class="comment">//赋值一个键值对</span></span><br><span class="line">m[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">fmt.Println(m)           <span class="comment">// map[one:1 two:2]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(m))      <span class="comment">// 2</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;one&quot;</span>])    <span class="comment">// 1</span></span><br><span class="line">fmt.Println(m[<span class="string">&quot;unknow&quot;</span>]) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">r, ok := m[<span class="string">&quot;unknow&quot;</span>] <span class="comment">// 获取键值对时在变量后加一个 ok 来判断这个 key 是否存在</span></span><br><span class="line">fmt.Println(r, ok)   <span class="comment">// 0 false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;one&quot;</span>) <span class="comment">// 删除键值对</span></span><br><span class="line"></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;    <span class="comment">// 定义并初始化</span></span><br><span class="line"><span class="keyword">var</span> m3 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125; <span class="comment">// 定义并初始化</span></span><br><span class="line">fmt.Println(m2, m3)                         <span class="comment">// map[one:1 two:2] map[one:1 two:2]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-9-range"><a href="#2-2-9-range" class="headerlink" title="2.2.9 range"></a>2.2.9 range</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 可以用 range 快速遍历 slice 或 map, 使代码更加简洁</span></span><br><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// 定义一个数组 或 slice</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">i 表示切片的角标, num 表示切片的值</span></span><br><span class="line"><span class="comment">可以这么理解, 一个切片有两个为定值 nums[i] = num</span></span><br><span class="line"><span class="comment">map 中的键值对也是需要两个变量, 一个表示 key, 一个表示 value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123; <span class="comment">// 注意写法, 中间是 :=</span></span><br><span class="line">sum += num</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">2</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;index:&quot;</span>, i, <span class="string">&quot;num:&quot;</span>, num) <span class="comment">// index: 0 num: 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum) <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;B&quot;</span>&#125; <span class="comment">// 定义一个 map</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;                      <span class="comment">// 注意写法, 中间是 :=</span></span><br><span class="line">fmt.Println(k, v) <span class="comment">// a A \n b B</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123; <span class="comment">// 只遍历 key</span></span><br><span class="line">fmt.Println(<span class="string">&quot;key&quot;</span>, k) <span class="comment">// key a \n key b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-10-函数"><a href="#2-2-10-函数" class="headerlink" title="2.2.10 函数"></a>2.2.10 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// func 定义一个函数, 函数的数据类型是后置的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 两个数相加</span></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; <span class="comment">// 两个数相加, 省略一个数据类型</span></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 中函数原生支持多个返回值, 实际业务逻辑代码中几乎所有的函数都能返回两个值, 第一个是真正的结果, 第二个是一个错误信息</span></span><br><span class="line"><span class="comment">// (v string, ok bool) 这个位置本来是函数的数据类型, 这里需要返回的是两个变量, 所以直接这样写, 如果没有返回值的话这部分直接省略即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> (v <span class="type">string</span>, ok <span class="type">bool</span>) &#123;</span><br><span class="line">v, ok = m[k]</span><br><span class="line"><span class="keyword">return</span> v, ok <span class="comment">// 两个返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从主函数进入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(res) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map[string]string&#123;&quot;a&quot;: &quot;A&quot;&#125; 是 m, &quot;a&quot; 是 k</span></span><br><span class="line">v, ok := exists(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>&#125;, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">fmt.Println(v, ok) <span class="comment">// A True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-11-指针"><a href="#2-2-11-指针" class="headerlink" title="2.2.11 指针"></a>2.2.11 指针</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无效修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针, 有小修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2ptr</span><span class="params">(n *<span class="type">int</span>)</span></span> &#123; <span class="comment">// 指针函数也是, 数据类型后置</span></span><br><span class="line">*n += <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 里的指针类似于 C 中的指针, 只不过操作更加有限</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">5</span></span><br><span class="line">add2(n)</span><br><span class="line">fmt.Println(n) <span class="comment">// 5</span></span><br><span class="line">add2ptr(&amp;n)    <span class="comment">// 加个取地址符 &amp; 使类型匹配</span></span><br><span class="line">fmt.Println(n) <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-12-结构体"><a href="#2-2-12-结构体" class="headerlink" title="2.2.12 结构体"></a>2.2.12 结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体是带类型的字段的集合</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name     <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125; <span class="comment">// 结构体初始化, 注意需要传入每个字段的初始值</span></span><br><span class="line">b := user&#123;<span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">c := user&#123;name: <span class="string">&quot;wang&quot;</span>&#125;</span><br><span class="line">c.password = <span class="string">&quot;1024&quot;</span> <span class="comment">// 分开初始化</span></span><br><span class="line"><span class="keyword">var</span> d user          <span class="comment">// 定义一个 user 结构体变量, 然后分别初始化</span></span><br><span class="line">d.name = <span class="string">&quot;wang&quot;</span>     <span class="comment">// 相当于键值对, 可以只对一部分字段进行初始化</span></span><br><span class="line">d.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d)                 <span class="comment">// &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125; &#123;wang 1024&#125;</span></span><br><span class="line">fmt.Println(checkPassword(a, <span class="string">&quot;haha&quot;</span>))   <span class="comment">// false</span></span><br><span class="line">fmt.Println(checkPassword2(&amp;a, <span class="string">&quot;haha&quot;</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝的结构体修改, 开销大</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助指针实现对于结构体的修改, 避免结构体的拷贝开销</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword2</span><span class="params">(u *user, password <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-13-结构体方法"><a href="#2-2-13-结构体方法" class="headerlink" title="2.2.13 结构体方法"></a>2.2.13 结构体方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 user 结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name     <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从上一个例子中的普通函数, 修改为结构体方法</span></span><br><span class="line"><span class="comment">具体的代码修改是把第一个参数加上括号写到函数名称前面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func checkPassword(u user, password string) bool &#123;</span></span><br><span class="line"><span class="comment">return u.password == password</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> checkPassword(password <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.password == password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">从上一个例子中的普通函数, 修改为结构体方法</span></span><br><span class="line"><span class="comment">具体的代码修改是把第一个参数加上括号写到函数名称前面</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func checkPassword2(u *user, password string) bool &#123;</span></span><br><span class="line"><span class="comment">return u.password == password</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> resetPassword(password <span class="type">string</span>) &#123; <span class="comment">// 修改 password 变量</span></span><br><span class="line">u.password = password <span class="comment">// 这个函数不需要返回值, 所有函数定义的时候没有声明返回值类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := user&#123;name: <span class="string">&quot;wang&quot;</span>, password: <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">a.resetPassword(<span class="string">&quot;2048&quot;</span>)              <span class="comment">// 目的是可以以这种形式调用方法 (类似面向对象)</span></span><br><span class="line">fmt.Println(a.checkPassword(<span class="string">&quot;2048&quot;</span>)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-14-异常处理"><a href="#2-2-14-异常处理" class="headerlink" title="2.2.14 异常处理"></a>2.2.14 异常处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">name     <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 的语言习惯是使用一个单独的返回值来传递错误信息</span></span><br><span class="line"><span class="comment">// 在函数定义中, 在函数的返回值类型中加一个 error, 就代表这个函数可能会返回错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(users []user, name <span class="type">string</span>)</span></span> (v *user, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line"><span class="keyword">if</span> u.name == name &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;u, <span class="literal">nil</span> <span class="comment">// 返回值 1, nil 代表零值, 相当于 null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不同于 Java 与 C++ 中的异常处理</span></span><br><span class="line"><span class="comment">go 的处理方式可以很清晰地知道哪个函数返回了错误, 并且可以食用菌简单的 if else 来处理错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数实现的时候 return 需要同时 return 两个值</span></span><br><span class="line"><span class="comment">报错的话 return nil, error</span></span><br><span class="line"><span class="comment">没报错的话 return 结果, nil</span></span><br><span class="line"><span class="comment">说白了就是结果和 error 只能有一个, 另一个为空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;not found&quot;</span>) <span class="comment">// 返回值 2, 报错 error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u, err := findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;&#125;, <span class="string">&quot;wang&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(u.name) <span class="comment">// wang</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> u, err := findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;&#125;, <span class="string">&quot;li&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err) <span class="comment">// not found</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(u.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-15-字符串操作"><a href="#2-2-15-字符串操作" class="headerlink" title="2.2.15 字符串操作"></a>2.2.15 字符串操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span> <span class="comment">// 以下常用字符串工具函数都来自这个包</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">// 判断一个字符串里是否包含另外一个字符串</span></span><br><span class="line">fmt.Println(strings.Contains(a, <span class="string">&quot;ll&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 字符串中字符计数</span></span><br><span class="line">fmt.Println(strings.Count(a, <span class="string">&quot;l&quot;</span>)) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 判断字符串是否以 prefix 开头</span></span><br><span class="line">fmt.Println(strings.HasPrefix(a, <span class="string">&quot;he&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 判断字符串是否以 prefix 结尾</span></span><br><span class="line">fmt.Println(strings.HasSuffix(a, <span class="string">&quot;llo&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 查找某个字符串的位置, 从 0 开始  -1 表示不包含</span></span><br><span class="line">fmt.Println(strings.Index(a, <span class="string">&quot;ll&quot;</span>)) <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 连接多个字符串</span></span><br><span class="line">fmt.Println(strings.Join([]<span class="type">string</span>&#123;<span class="string">&quot;he&quot;</span>, <span class="string">&quot;llo&quot;</span>&#125;, <span class="string">&quot;-&quot;</span>)) <span class="comment">// he-llo</span></span><br><span class="line"><span class="comment">// 重复多个字符串</span></span><br><span class="line">fmt.Println(strings.Repeat(a, <span class="number">2</span>)) <span class="comment">// hellohello</span></span><br><span class="line"><span class="comment">// 替换字符串中的字符, n 表示前 n 个字符串, n = -1 表示全替换</span></span><br><span class="line">fmt.Println(strings.Replace(a, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="number">-1</span>)) <span class="comment">// hEllo</span></span><br><span class="line"><span class="comment">// 字符串分割</span></span><br><span class="line">fmt.Println(strings.Split(<span class="string">&quot;a-b-c&quot;</span>, <span class="string">&quot;-&quot;</span>)) <span class="comment">// [a b c]</span></span><br><span class="line"><span class="comment">// 全转小写</span></span><br><span class="line">fmt.Println(strings.ToLower(a)) <span class="comment">// hello</span></span><br><span class="line"><span class="comment">// 全转大写</span></span><br><span class="line">fmt.Println(strings.ToUpper(a)) <span class="comment">// HELLO</span></span><br><span class="line"><span class="comment">// 求字符串长度</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a)) <span class="comment">// 5</span></span><br><span class="line">b := <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment">// 中文跟英文长度不一样</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(b)) <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-16-字符串格式化"><a href="#2-2-16-字符串格式化" class="headerlink" title="2.2.16 字符串格式化"></a>2.2.16 字符串格式化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">n := <span class="number">123</span></span><br><span class="line">p := point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// Printf 与 Println 都可以用, 分别是 C 与 Java中的格式</span></span><br><span class="line">fmt.Println(s, n) <span class="comment">// hello 123</span></span><br><span class="line">fmt.Println(p)    <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// %v 可以打印任意类型的变量, 不需要区分数字字符串等</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%v\n&quot;</span>, s) <span class="comment">// s=hello</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;n=%v\n&quot;</span>, n) <span class="comment">// n=123</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p) <span class="comment">// p=&#123;1 2&#125;</span></span><br><span class="line"><span class="comment">// %+v 打印详细结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%+v\n&quot;</span>, p) <span class="comment">// p=&#123;x:1 y:2&#125;</span></span><br><span class="line"><span class="comment">// %+v 打印更详细结果</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%#v\n&quot;</span>, p) <span class="comment">// p=main.point&#123;x:1, y:2&#125;</span></span><br><span class="line"></span><br><span class="line">f := <span class="number">3.141592653</span></span><br><span class="line">fmt.Println(f) <span class="comment">// 3.141592653</span></span><br><span class="line"><span class="comment">// 保留小数点后两位</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, f) <span class="comment">// 3.14</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-17-JSON-处理"><a href="#2-2-17-JSON-处理" class="headerlink" title="2.2.17 JSON 处理"></a>2.2.17 JSON 处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结构体每个字段的首字母大写表示公开字段, 这个结构体就可以用 JSON.marshal 序列化变成一个 JSON 字符串</span></span><br><span class="line"><span class="comment">// 默认序列化出来的字符串风格是大写字母开头而不是下划线, 可以在后面用 json tag 等语法修改输出的 JSON 结果里面的字段名</span></span><br><span class="line"><span class="keyword">type</span> userInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">Hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := userInfo&#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">18</span>, Hobby: []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;TypeScript&quot;</span>&#125;&#125;</span><br><span class="line">buf, err := json.Marshal(a)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 错误处理</span></span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf)         <span class="comment">// [123 34 78 97...]</span></span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// &#123;&quot;Name&quot;:&quot;wang&quot;,&quot;age&quot;:18,&quot;Hobby&quot;:[&quot;Golang&quot;,&quot;TypeScript&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line">buf, err = json.MarshalIndent(a, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t&quot;</span>) <span class="comment">// 每个字段序列化后用 \t 分开</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化到一个空变量中</span></span><br><span class="line"><span class="keyword">var</span> b userInfo</span><br><span class="line">err = json.Unmarshal(buf, &amp;b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, b) <span class="comment">// main.userInfo&#123;Name:&quot;wang&quot;, Age:18, Hobby:[]string&#123;&quot;Golang&quot;, &quot;TypeScript&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-18-时间处理"><a href="#2-2-18-时间处理" class="headerlink" title="2.2.18 时间处理"></a>2.2.18 时间处理</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">now := time.Now() <span class="comment">// 获取当前时间</span></span><br><span class="line">fmt.Println(now)  <span class="comment">// 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933</span></span><br><span class="line"><span class="comment">// 构造一个带时区的时间</span></span><br><span class="line">t := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">t2 := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">fmt.Println(t)                                                  <span class="comment">// 2022-03-27 01:25:36 +0000 UTC</span></span><br><span class="line">fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) <span class="comment">// 2022 March 27 1 25</span></span><br><span class="line"><span class="comment">// &quot;2006-01-02 15:04:05&quot; 是固定的, 输出一个这样格式的现在时间</span></span><br><span class="line">fmt.Println(t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)) <span class="comment">// 2022-03-27 01:25:36</span></span><br><span class="line"><span class="comment">// 对两段时间做减法, 得到一个时间段</span></span><br><span class="line">diff := t2.Sub(t)</span><br><span class="line"><span class="comment">// 这个时间段有几小时几分钟几秒</span></span><br><span class="line">fmt.Println(diff)                           <span class="comment">// 1h5m0s</span></span><br><span class="line">fmt.Println(diff.Minutes(), diff.Seconds()) <span class="comment">// 65 3900</span></span><br><span class="line">t3, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2022-03-27 01:25:36&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(t3 == t) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// .Unix 获取时间戳</span></span><br><span class="line">fmt.Println(now.Unix()) <span class="comment">// 1648738080</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-19-数字解析"><a href="#2-2-19-数字解析" class="headerlink" title="2.2.19 数字解析"></a>2.2.19 数字解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span> <span class="comment">// 关于字符串和数字类型之间的转换方法都在这个包下</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果输入不合法, 以下所有函数都会输出 error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ParseFloat 解析一个字符串, 解析成 float64</span></span><br><span class="line"><span class="comment">// _ 表示 err</span></span><br><span class="line">f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f) <span class="comment">// 1.234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseFloat 解析一个字符串, 解析成 int 10进制</span></span><br><span class="line">n, _ := strconv.ParseInt(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">n, _ = strconv.ParseInt(<span class="string">&quot;0x1000&quot;</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">// 4096</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Atoi 把一个十进制字符串转成数字</span></span><br><span class="line"><span class="comment">// iotA 把一个数字转换成字符串</span></span><br><span class="line">n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(n2) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">n2, err := strconv.Atoi(<span class="string">&quot;AAA&quot;</span>) <span class="comment">// 输入不合法</span></span><br><span class="line">fmt.Println(n2, err)           <span class="comment">// 0 strconv.Atoi: parsing &quot;AAA&quot;: invalid syntax</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-20-进程信息"><a href="#2-2-20-进程信息" class="headerlink" title="2.2.20 进程信息"></a>2.2.20 进程信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// os.Args 得到程序执行时指定的命令行参数</span></span><br><span class="line"><span class="comment">// go run example/20-env/main.go a b c d</span></span><br><span class="line">fmt.Println(os.Args) <span class="comment">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]</span></span><br><span class="line"><span class="comment">// 读取环境变量</span></span><br><span class="line">fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>)) <span class="comment">// /usr/local/go/bin...</span></span><br><span class="line">fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>))</span><br><span class="line"></span><br><span class="line">buf, err := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;/etc/hosts&quot;</span>).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// 127.0.0.1       localhost</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h1><h2 id="3-1-猜谜游戏"><a href="#3-1-猜谜游戏" class="headerlink" title="3.1 猜谜游戏"></a>3.1 猜谜游戏</h2><blockquote><p>程序首先会生成一个介于 1 到 100 之间的随机整数, 然后提示玩家进行猜测</p><p>玩家每次输入一个数字, 程序就回告诉玩家这个猜测的值是高于还是低于随机数</p><p>猜对了就告诉玩家胜利并退出程序</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano()) <span class="comment">// time.Now().UnixNano() 通过时间戳来生成一个随机数种子</span></span><br><span class="line"><span class="comment">// 使用 rand.Intn() 的时候要设置随机数种子, 否则每次都会生成相同的随机数序列</span></span><br><span class="line">secretNumber := rand.Intn(maxNum) <span class="comment">// 上限为 maxNum, 下限是 0 (默认), 就生成了一个 0 ~ 100 的随机数</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;The secret number is &quot;, secretNumber)</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每个程序执行的时候都会打开几个文件, stdin stdout stderr</span></span><br><span class="line"><span class="comment">stdin 文件可以使用 os.Stdin 得到</span></span><br><span class="line"><span class="comment">但是直接操作这个 stdin 文件不方便, 就用 bufio.NewReader 方法把文件转换成一个 reader 变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">reader := bufio.NewReader(os.Stdin) <span class="comment">// 转成一个只读的流, 这个流里有很多行</span></span><br><span class="line"><span class="keyword">for</span> &#123;                               <span class="comment">// 猜不出来就一直猜</span></span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 用 ReadString 方法读取流中的一行</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                       <span class="comment">// 读取流失败 -- 打印错误 退出循环</span></span><br><span class="line">fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">input = strings.Trim(input, <span class="string">&quot;\r\n&quot;</span>) <span class="comment">// ReadString 方法返回值包含结尾的换行符, 去掉</span></span><br><span class="line"></span><br><span class="line">guess, err := strconv.Atoi(input) <span class="comment">// 将读取的结果转换成数字</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                   <span class="comment">// 转换数字失败 -- 打印错误并退出</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line"><span class="comment">// 开始比较大小</span></span><br><span class="line"><span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// 之道猜对了跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="3-2-在线词典"><a href="#3-2-在线词典" class="headerlink" title="3.2 在线词典"></a>3.2 在线词典</h2><blockquote><p>用户可以在命令行中查询一个单词, 我们通过调用第三方 API 查询单词的翻译并打印出来</p><p>使用 Go 来发送 HTTP 请求, 解析 JSON, 并使用代码生成来提高开发效率</p></blockquote><h3 id="3-2-1-抓包"><a href="#3-2-1-抓包" class="headerlink" title="3.2.1 抓包"></a>3.2.1 抓包</h3><p>先找到一个第三方 API</p><blockquote><p><a href="https://fanyi.caiyunapp.com/">https://fanyi.caiyunapp.com</a></p></blockquote><ol><li>随便输入一个单词</li><li>点击翻译按钮</li><li>按 F12 进入开发者工具</li><li>在 Network 项中找到 All</li><li>左侧边栏从下向上找到最近的 dict ( 上面的都是之前请求的, 最下面的是最新的 )</li><li>检查请求头 Headers 中的请求形式应为 POST</li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115173649793.png" alt="第三方 API"></p><p>Payload 中是一个 JSON 代码段</p><p>source 表示要翻译的词</p><p>trans_type 表示的是从英文翻译到中文</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115173920478.png" alt="Payload"></p><p>Preview 中显示的是这个词的翻译等</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115174153665.png" alt="Preview"></p><h3 id="3-2-2-代码生成"><a href="#3-2-2-代码生成" class="headerlink" title="3.2.2 代码生成"></a>3.2.2 代码生成</h3><p>右键 dict 一次选择 <code>copy -&gt; copy as cURL (bash)</code> 复制所有请求头到一个空文件中</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115174720225.png" alt="右键这个"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115174747547.png" alt="随便复制到一个空文件中"></p><p>在这个网站中将拿到的 JSON 准换成 Go 语言</p><blockquote><p><a href="https://curlconverter.com/go/">https://curlconverter.com/go/</a></p></blockquote><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115180028169.png" alt="JSON to Go"></p><p>将转换完成的代码粘贴回编译器是可以正常运行的, 可以看到返回了一大串 JSON</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115190839125.png" alt="生成代码运行"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个 HTTP client, 创建的时候可以指定很多参数, 包括是否启用请求超时的 cookie 等 (这里没有设置是否超时)</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">// 将请求体设置为一个只读流</span></span><br><span class="line"><span class="keyword">var</span> data = strings.NewReader(<span class="string">`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;infer&quot;&#125;`</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http.NewRequest 构造一个 HTTP 请求</span></span><br><span class="line"><span class="comment">第一个参数 http 的方法 POST, 第二个参数是 URL, 第三个参数是 body</span></span><br><span class="line"><span class="comment">由于 body 可能很大, 放在内存里会影响程序效率, 所以将 body 设置成一个只读流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一堆请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">// 发起请求并得到 response</span></span><br><span class="line"><span class="comment">// response 有自己的 HTTP 状态码, response header 和 body</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// response 的 body 也是一个流, 为了避免资源泄露需要手动添加一个 defer 方法来关闭这个流</span></span><br><span class="line"><span class="comment">// defer 函数会在函数运行之后从下往上执行, 这里只有一个 defer 所有只执行这一个</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 使用 ioutil.ReadAll 来读取 response 的 body 流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到整个 body 后用 print 打印出来</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bodyText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-3-生成-request-body"><a href="#3-2-3-生成-request-body" class="headerlink" title="3.2.3 生成 request body"></a>3.2.3 生成 request body</h3><p>go 语言中生成一段 JSON 常用的方式是先构造一个结构体, 结构体与 JSON 结构是一一对应的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个结构体, 用来解析 JSON</span></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span> <span class="comment">// 其实这个字段用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个 HTTP client, 创建的时候可以指定很多参数, 包括是否启用请求超时的 cookie 等 (这里没有设置是否超时)</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化结构体成员</span></span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;good&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 序列化字符串</span></span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将请求体设置为一个只读流</span></span><br><span class="line"><span class="comment">//var data = strings.NewReader(`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;infer&quot;&#125;`)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于这里是字节数组, 所以不用 string.NewReader</span></span><br><span class="line"><span class="comment">因为我们请求的应该是用一个变量作为一个请求体, 如果是 string 的话就相当于直接写死了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用 bytes.NewReader 来构造 request 的请求体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http.NewRequest 构造一个 HTTP 请求</span></span><br><span class="line"><span class="comment">第一个参数 http 的方法 POST, 第二个参数是 URL, 第三个参数是 body</span></span><br><span class="line"><span class="comment">由于 body 可能很大, 放在内存里会影响程序效率, 所以将 body 设置成一个只读流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 以下代码没变</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一堆请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">// 发起请求并得到 response</span></span><br><span class="line"><span class="comment">// response 有自己的 HTTP 状态码, response header 和 body</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// response 的 body 也是一个流, 为了避免资源泄露需要手动添加一个 defer 方法来关闭这个流</span></span><br><span class="line"><span class="comment">// defer 函数会在函数运行之后从下往上执行, 这里只有一个 defer 所有只执行这一个</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 使用 ioutil.ReadAll 来读取 response 的 body 流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到整个 body 后用 print 打印出来</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bodyText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-4-解析-response-body"><a href="#3-2-4-解析-response-body" class="headerlink" title="3.2.4 解析 response body"></a>3.2.4 解析 response body</h3><p>go 语言是强语言类型, 不建议直接用 map 从 body 中取值</p><p>更常用的方法是和 request 一样写一个结构体, 然后把返回的 JSON 反序列化到结构体里面</p><blockquote><p> <a href="https://oktools.net/json2go">https://oktools.net/json2go</a></p></blockquote><p>将 Preview 中的 JSON 字符串复制到上述网站</p><p><code>右键 -&gt; copy value</code></p><p>一定要是 <code>rc</code> 开头的整个这个东西, 不然之后生成的结构体会有问题</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115195852511.png" alt="复制 JSON"></p><p>转换-展开 生成多个独立的结构体</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115195940932.png" alt="转换-展开"></p><p>转换-嵌套 生成一个单独的结构体</p><p>因为这个小项目不需要对数据进行单独的操作所以生成嵌套的即可</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115195957114.png" alt="转换-嵌套"></p><p>运行一下是这个效果, 已经可以将翻译的结果输出了</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115200213777.png" alt="解析请求体"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个结构体, 用来解析 JSON</span></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span> <span class="comment">// 其实这个字段用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将生成的结构体改名并粘贴到这里</span></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个 HTTP client, 创建的时候可以指定很多参数, 包括是否启用请求超时的 cookie 等 (这里没有设置是否超时)</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化结构体成员</span></span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;infer&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 序列化字符串</span></span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将请求体设置为一个只读流</span></span><br><span class="line"><span class="comment">//var data = strings.NewReader(`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;infer&quot;&#125;`)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于这里是字节数组, 所以不用 string.NewReader</span></span><br><span class="line"><span class="comment">因为我们请求的应该是用一个变量作为一个请求体, 如果是 string 的话就相当于直接写死了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用 bytes.NewReader 来构造 request 的请求体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http.NewRequest 构造一个 HTTP 请求</span></span><br><span class="line"><span class="comment">第一个参数 http 的方法 POST, 第二个参数是 URL, 第三个参数是 body</span></span><br><span class="line"><span class="comment">由于 body 可能很大, 放在内存里会影响程序效率, 所以将 body 设置成一个只读流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 以下代码没变</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一堆请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">// 发起请求并得到 response</span></span><br><span class="line"><span class="comment">// response 有自己的 HTTP 状态码, response header 和 body</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// response 的 body 也是一个流, 为了避免资源泄露需要手动添加一个 defer 方法来关闭这个流</span></span><br><span class="line"><span class="comment">// defer 函数会在函数运行之后从下往上执行, 这里只有一个 defer 所有只执行这一个</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 使用 ioutil.ReadAll 来读取 response 的 body 流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到整个 body 后用 print 打印出来</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;%s\n&quot;, bodyText)</span></span><br><span class="line"><span class="comment">// 定义一个大结构体变量</span></span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line"><span class="comment">// 将 JSON 的值反序列化到这个新定义的变量中, 注意 &amp; 这样才能写入结构体</span></span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用最详细的方式打印</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, dictResponse)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-5-打印结果"><a href="#3-2-5-打印结果" class="headerlink" title="3.2.5 打印结果"></a>3.2.5 打印结果</h3><p>在一堆结果中截取我们想要的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个结构体, 用来解析 JSON</span></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span> <span class="comment">// 其实这个字段用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将生成的结构体改名并粘贴到这里</span></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个 HTTP client, 创建的时候可以指定很多参数, 包括是否启用请求超时的 cookie 等 (这里没有设置是否超时)</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化结构体成员</span></span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;infer&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 序列化字符串</span></span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将请求体设置为一个只读流</span></span><br><span class="line"><span class="comment">//var data = strings.NewReader(`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;infer&quot;&#125;`)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于这里是字节数组, 所以不用 string.NewReader</span></span><br><span class="line"><span class="comment">因为我们请求的应该是用一个变量作为一个请求体, 如果是 string 的话就相当于直接写死了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用 bytes.NewReader 来构造 request 的请求体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http.NewRequest 构造一个 HTTP 请求</span></span><br><span class="line"><span class="comment">第一个参数 http 的方法 POST, 第二个参数是 URL, 第三个参数是 body</span></span><br><span class="line"><span class="comment">由于 body 可能很大, 放在内存里会影响程序效率, 所以将 body 设置成一个只读流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 以下代码没变</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一堆请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">// 发起请求并得到 response</span></span><br><span class="line"><span class="comment">// response 有自己的 HTTP 状态码, response header 和 body</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// response 的 body 也是一个流, 为了避免资源泄露需要手动添加一个 defer 方法来关闭这个流</span></span><br><span class="line"><span class="comment">// defer 函数会在函数运行之后从下往上执行, 这里只有一个 defer 所有只执行这一个</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 使用 ioutil.ReadAll 来读取 response 的 body 流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">相当于环日志编程</span></span><br><span class="line"><span class="comment">得到的 response 不一定使我们想要的那个 response</span></span><br><span class="line"><span class="comment">如果状态码不是 200, 就直接报错并打印出状态码以及报文</span></span><br><span class="line"><span class="comment">这样方便我们在出错后排查问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到整个 body 后用 print 打印出来</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;%s\n&quot;, bodyText)</span></span><br><span class="line"><span class="comment">// 定义一个大结构体变量</span></span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line"><span class="comment">// 将 JSON 的值反序列化到这个新定义的变量中, 注意 &amp; 这样才能写入结构体</span></span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用最详细的方式打印</span></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;%#v\n&quot;, dictResponse)</span></span><br><span class="line"><span class="keyword">var</span> word <span class="type">string</span> <span class="comment">// 定义一个变量 word</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于上一段代码中输出的值并不都是我们想要的, 我们只想要音标以及翻译</span></span><br><span class="line"><span class="comment">所以我们使用 dictResponse.Dictionary.Prons.En 来获取英式音标, ictResponse.Dictionary.Prons.EnUs 获取美式音标</span></span><br><span class="line"><span class="comment">然后再通过 range 对 dictResponse.Dictionary.Explanations 字典中的翻译进行循环打印, 输出所有的翻译</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-6-优化代码"><a href="#3-4-6-优化代码" class="headerlink" title="3.4.6 优化代码"></a>3.4.6 优化代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个结构体, 用来解析 JSON</span></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span> <span class="comment">// 其实这个字段用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将生成的结构体改名并粘贴到这里</span></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(word <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个 HTTP client, 创建的时候可以指定很多参数, 包括是否启用请求超时的 cookie 等 (这里没有设置是否超时)</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="comment">// 初始化结构体成员</span></span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;infer&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 序列化字符串</span></span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 bytes.NewReader 来构造 request 的请求体</span></span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line"><span class="comment">// http.NewRequest 构造一个 HTTP 请求</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置一堆请求头</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;authority&quot;</span>, <span class="string">&quot;api.interpreter.caiyunai.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;accept-language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-fetch-site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;x-authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line"><span class="comment">// 发起请求并得到 response</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// response 的 body 也是一个流, 为了避免资源泄露需要手动添加一个 defer 方法来关闭这个流</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="comment">// 使用 ioutil.ReadAll 来读取 response 的 body 流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于环日志编程, 方便我们在出错后排查问题</span></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个大结构体变量</span></span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line"><span class="comment">// 将 JSON 的值反序列化到这个新定义的变量中, 注意 &amp; 这样才能写入结构体</span></span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印出我们想要的部分的结果</span></span><br><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="comment">// 循环遍历翻译</span></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// os.Args 判断命令和参数的个数</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123; <span class="comment">// 如果不是两个就报错, 提醒正确的运行格式</span></span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">`usage: simpleDict WORD</span></span><br><span class="line"><span class="string">example: simpleDict hello</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">word := os.Args[<span class="number">1</span>] <span class="comment">// 如果是正确的就抓取第二个, 也就是我们需要翻译的单词</span></span><br><span class="line">query(word)        <span class="comment">// 查询翻译</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">到目前为止是需要命令行输入指令才能运行</span></span><br><span class="line"><span class="comment">后期可以试着优化一下直接读取键盘输入</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230115202928676.png" alt="运行演示"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习</title>
      <link href="/2023/01/01/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/01/01/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言复习"><a href="#C语言复习" class="headerlink" title="C语言复习"></a>C语言复习</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1cq4y1U7sg?p=1&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2">https://www.bilibili.com/video/BV1cq4y1U7sg?p=1&amp;vd_source=594d36a0860080a36fe599e0b84e5fb2</a></p></blockquote><blockquote><ol><li>必须实践敲代码 (不是抄写 ! 抄写没有意义)</li></ol><ul><li>理清别人代码的思路</li><li>不看别人的代码, 按照代码的思路, 自己写代码</li><li>写注释 ! 写注释 ! 写注释 !</li></ul><ol start="2"><li><p>必须画图, 理解内存布局</p></li><li><p>要不断调试</p></li><li><p>多写, 多刷题</p></li></ol><ul><li>牛客 PTA 力扣</li></ul></blockquote><h1 id="一、初识C语言"><a href="#一、初识C语言" class="headerlink" title="一、初识C语言"></a>一、初识C语言</h1><h2 id="1-1-第一个C语言程序"><a href="#1-1-第一个C语言程序" class="headerlink" title="1.1 第一个C语言程序"></a>1.1 第一个C语言程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C语言从主函数main开始执行 (必须要有main函数且一个工程中只能有一个main函数)</span></span><br><span class="line"><span class="comment">//printf属于一个库函数</span></span><br><span class="line"><span class="comment">//编译+运行快捷键: ctrl+F5</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//引用头文件stdio.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-2-C语言数据类型"><a href="#1-2-C语言数据类型" class="headerlink" title="1.2 C语言数据类型"></a>1.2 C语言数据类型</h2><ul><li><code>char</code> 字符数据类型</li><li><code>short</code> 短整型</li><li><code>int</code> 整型</li><li><code>long</code> 长整型</li><li><code>long long</code> 长长整型</li><li><code>float</code> 单精度浮点数</li><li><code>double</code> 双精度浮点数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//printf(&quot;hello world&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof--关键字 (操作符 !!不是函数!! ) --计算类型或变量所占空间大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果 (单位: 字节)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="comment">//sizeof(long) &gt;= sizeof(int)</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p>计算机中的单位</p><ul><li><code>bit</code> 比特位</li><li><code>byte</code> 字节 1 byte &#x3D; 8 bit</li><li><code>KB</code> 1 KB &#x3D; 1024 byte</li><li><code>MB</code> 1 MB &#x3D; 1024 KB</li><li><code>GB</code> 1 GB &#x3D; 1024 MB</li><li><code>TB</code> 1 TB &#x3D; 1024 GB</li><li><code>PB</code> 1 PB &#x3D; 1024 TB</li></ul></blockquote><hr><h2 id="1-3-常量-amp-变量"><a href="#1-3-常量-amp-变量" class="headerlink" title="1.3 常量&amp;变量"></a>1.3 常量&amp;变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//%d - 整型</span></span><br><span class="line"><span class="comment">//%f - float</span></span><br><span class="line"><span class="comment">//%lf - double</span></span><br><span class="line">    <span class="comment">//%s - 字符串</span></span><br><span class="line">    <span class="comment">//%p - 按地址格式打印, 十六进制的打印</span></span><br><span class="line">    <span class="comment">//%u - 无符号10进制整数</span></span><br><span class="line">    <span class="comment">//%x,%X 读入十六进制整数</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> weight = <span class="number">80</span>;</span><br><span class="line">age = age + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, weight);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部变量-amp-全局变量"><a href="#局部变量-amp-全局变量" class="headerlink" title="局部变量&amp;全局变量"></a>局部变量&amp;全局变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量 - &#123;&#125;外定义</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部变量 - &#123;&#125;内定义</span></span><br><span class="line"><span class="comment">局部变量与全局变量名字冲突时, 局部优先</span></span><br><span class="line"><span class="comment">但是不能使局部变量与全局变量名字相同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义变量的同时必须给变量初始化 (赋值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//scanf 输入函数, 括号中间的分隔符是什么, 输入时候的分隔符就是什么 (本段代码中为空格)</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代码在VScode中报错</span></span><br><span class="line"><span class="comment">C4996&#x27;scanf&#x27;: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在整个.c文件第一行加#define _CRT_SECURE_NO_WARNINGS 1即可解决</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的作用域和生命周期"><a href="#变量的作用域和生命周期" class="headerlink" title="变量的作用域和生命周期"></a>变量的作用域和生命周期</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 局部变量作用域: 变量所在的局部范围</span></span><br><span class="line"><span class="comment">* 全局变量作用域: 整个工程(但是需要引入)</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* extern int year //该语句用来引入其他文件中的全局变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> year = <span class="number">2022</span>; <span class="comment">//变量的命名可以写在函数外, 其他运行代码必须写在函数体外</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;年: %d\n&quot;</span>, year);</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> month = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;月: %d\n&quot;</span>, month);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 变量的生命周期: 变量的创建和销毁之间的时间段</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 局部变量生命周期: 进入局部范围开始, 出局部范围结束</span></span><br><span class="line"><span class="comment">* 全局变量生命周期: 程序的生命周期</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>字面常量</p></li><li><p><code>const</code> 修饰的常变量, 变量被 <code>const</code> 修饰后变量值就不允许被修改</p><blockquote><p>const修饰指针变量的时候：</p><ol><li><code>const</code> 如果放在 <code>*</code> 的左边，修饰的是指针指向的内容，保证指针指向的内容不能通过指针来改</li></ol><p>变。但是指针变量本身的内容可变。</p><ol start="2"><li><code>const</code> 如果放在 <code>*</code> 的右边，修饰的是指针变量本身，保证了指针变量的内容不能修改，但是指</li></ol><p>针指向的内容，可以通过指针改变。</p></blockquote></li><li><p><code>#define</code> 定义的标识符常量</p></li><li><p>枚举常量</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 一万 10000;</span></span><br><span class="line"><span class="comment">//枚举声明语句 枚举变量的所有可能取值</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Ocean</span> &#123;</span></span><br><span class="line">    <span class="comment">//枚举常量的第一个常量可以给其赋初值 PACIFIC = 6, 则此后常量值从6开始</span></span><br><span class="line">PACIFIC, <span class="comment">//注意逗号</span></span><br><span class="line">INDIAN_OCEAN,</span><br><span class="line">ATLANTIC,</span><br><span class="line">ARCTIC_OCEAN <span class="comment">//注意没有逗号</span></span><br><span class="line">&#125;; <span class="comment">//注意分号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//字面常量</span></span><br><span class="line"><span class="number">12345</span>; <span class="comment">//整型</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>; <span class="comment">//字符</span></span><br><span class="line"><span class="string">&quot;abcsde&quot;</span>; <span class="comment">//字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的常变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> num = <span class="number">123</span>; <span class="comment">//如果要修改num值, 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define定义的标识符常量</span></span><br><span class="line"><span class="type">int</span> one_h = 一万;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, one_h);</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举常量 (可以一一列举的常量)</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Ocean</span> <span class="title">place</span> =</span> ATLANTIC; <span class="comment">//枚举赋值语句</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, PACIFIC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, INDIAN_OCEAN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ATLANTIC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ARCTIC_OCEAN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10000</span></span><br><span class="line"><span class="number">0</span> <span class="comment">//枚举常量是常量, 默认从0开始</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-4-字符串"><a href="#1-4-字符串" class="headerlink" title="1.4 字符串"></a>1.4 字符串</h2><ul><li><p>字符串就是一串字符 (用 <code>&quot;&quot;</code> 扩起来的字符) </p><blockquote><p>字符串在结尾的位置隐藏了一个 <code>\0</code> 字符作为字符串的结束标志, </p><p>通过 <code>strlen()</code> 函数字符串长度时不算在里面</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//使用 strlen() 函数做引入头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> <span class="built_in">array</span>[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> array2[] = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">//求两个字符数组的长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="built_in">array</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n\n&quot;</span>, <span class="built_in">strlen</span>(array2));</span><br><span class="line"><span class="comment">//打印出两个字符数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n\n&quot;</span>, array2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改第二个数组</span></span><br><span class="line"><span class="type">char</span> array3[] = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//求修改后两个字符数组的长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(<span class="built_in">array</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n\n&quot;</span>, <span class="built_in">strlen</span>(array3));</span><br><span class="line"><span class="comment">//打印出修改后两个字符数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n\n&quot;</span>, array3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">65</span> <span class="comment">//随机值</span></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">hello烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫虁鯵?</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221221172200680.png" alt="image-20221221172200680"></p><hr><h2 id="1-5-转义字符"><a href="#1-5-转义字符" class="headerlink" title="1.5 转义字符"></a>1.5 转义字符</h2><table><thead><tr><th><strong>转义字符 释义</strong></th><th></th></tr></thead><tbody><tr><td>?</td><td>在书写连续多个问号时使用，防止他们被解析成三字母词</td></tr><tr><td>\‘</td><td>用于表示字符常量’</td></tr><tr><td>\“</td><td>用于表示一个字符串内部的双引号</td></tr><tr><td>\\</td><td>用于表示一个反斜杠，防止它被解释为一个转义序列符。</td></tr><tr><td>\a</td><td>警告字符，蜂鸣</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>进纸符</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\ddd</td><td><code>ddd</code> 表示1~3个八进制的数字。 如： \130 X</td></tr><tr><td>\xdd</td><td><code>dd</code> 表示2个十六进制数字。 如： \x30 0</td></tr></tbody></table><hr><h2 id="1-6-选择语句"><a href="#1-6-选择语句" class="headerlink" title="1.6 选择语句"></a>1.6 选择语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> complete = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天的任务完成了吗? ( 1 or 0 ) :&gt; &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;complete);</span><br><span class="line"><span class="keyword">if</span> (complete == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;恭喜你!!!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不要摆啊!!!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-7-循环语句"><a href="#1-7-循环语句" class="headerlink" title="1.7 循环语句"></a>1.7 循环语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (age &lt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You are alive, %d\n&quot;</span>, age);</span><br><span class="line">age++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (age = <span class="number">100</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You died&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-8-函数"><a href="#1-8-函数" class="headerlink" title="1.8 函数"></a>1.8 函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须把 函数定义 写在 函数使用 之前</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">sum = multiply(num1, num2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-9-数组"><a href="#1-9-数组" class="headerlink" title="1.9 数组"></a>1.9 数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> array_int[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="type">char</span> array_char[<span class="number">5</span>] = &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> &#125;; <span class="comment">//不完全初始化, 默认赋0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, array_int[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, array_char[j]); <span class="comment">//将未赋值的部分输出为空格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">a b c   end</span><br></pre></td></tr></table></figure><hr><h2 id="1-10-操作符"><a href="#1-10-操作符" class="headerlink" title="1.10 操作符"></a>1.10 操作符</h2><blockquote><p>整数的二进制表示</p><ul><li>原码</li><li>反码 – 符号位不变, 其余位置按位取反</li><li>补码 (整数在内存中的存储) – 反码 + 1</li></ul></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">整数二进制共 4 * 8 = 32 位 (整型 4 个字节)</span><br><span class="line">最高位表示符号位 0 表示正数, 1 表示负数</span><br><span class="line"></span><br><span class="line">正整数的原码、反码、补码相同（规定）</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-1:</span><br><span class="line">10000000000000000000000000000001 (原码)</span><br><span class="line">11111111111111111111111111111110 (反码)</span><br><span class="line">11111111111111111111111111111111 (补码)</span><br></pre></td></tr></table></figure><ul><li><p>算数操作符</p><blockquote><p><code>+</code> </p><p><code>-</code> </p><p><code>*</code> </p><p><code>/</code> </p><p><code>%</code></p></blockquote></li><li><p>移位操作符 (移动二进制位)</p><blockquote><p>左移运算符: <code>&lt;&lt;</code> 低位补 <code>0</code></p><p>右移运算符: <code>&gt;&gt;</code></p></blockquote></li><li><p>位操作符</p><blockquote><p>按位与: <code>&amp;</code></p><p>按位或: <code>|</code></p><p>按位异或: <code>^</code></p></blockquote></li><li><p>赋值操作符</p><blockquote><p><code>=</code> </p><p><code>+</code> </p><p><code>=</code> </p><p><code>-=</code> </p><p><code>*=</code> </p><p><code>/=</code> </p><p><code>&amp;=</code> </p><p><code>^=</code> </p><p><code>|=</code>  </p><p><code>&gt;&gt;=</code> </p><p><code>&lt;&lt;=</code> </p></blockquote></li><li><p>单目操作符 (只有一个操作数)</p><table><thead><tr><th align="center">操作符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">逻辑反操作</td></tr><tr><td align="center">-</td><td align="center">负值</td></tr><tr><td align="center">+</td><td align="center">正值</td></tr><tr><td align="center">&amp;</td><td align="center">取地址</td></tr><tr><td align="center"><code>sizeof</code></td><td align="center">操作数的类型长度（以字节为单位）</td></tr><tr><td align="center">~</td><td align="center">对一个数的二进制按位取反</td></tr><tr><td align="center">–</td><td align="center">前置、后置–</td></tr><tr><td align="center">++</td><td align="center">前置、后置++</td></tr><tr><td align="center">*</td><td align="center">间接访问操作符(解引用操作符)</td></tr><tr><td align="center">(类型)</td><td align="center">强制类型转换</td></tr></tbody></table></li><li><p>关系操作符</p><blockquote><p><code>&gt;</code></p><p><code>&gt;=</code></p><p><code>&lt;</code></p><p><code>&lt;=</code></p><p><code>!=</code></p><p><code>==</code></p></blockquote></li><li><p>逻辑操作符</p><blockquote><p><code>&amp;&amp;</code></p><p><code>||</code></p></blockquote></li><li><p>条件操作符 (三目运算符)</p><blockquote><p><code>exp1 ? exp2 : exp3</code></p><p>如果 <code>exp1</code> 为 true, 表达式的值为 <code>exp2</code>; 为 false, 表达式的值为 <code>exp3</code></p></blockquote></li><li><p>逗号表达式</p><blockquote><p><code>exp1, exp2, exp3 ... expN</code> </p><p>从左往右运算, 逗号表达式的值为最后一个表达式 <code>expN</code> 的值</p></blockquote></li><li><p>下标引用</p><blockquote><p><code>[]</code></p></blockquote></li><li><p>函数调用</p><blockquote><p><code>()</code></p></blockquote></li><li><p>结构成员</p><blockquote><p><code>.</code></p><p><code>-&gt;</code></p></blockquote></li></ul><hr><h2 id="1-11-常见关键字"><a href="#1-11-常见关键字" class="headerlink" title="1.11 常见关键字"></a>1.11 常见关键字</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">auto  自动创建, 自动销毁, 所有局部变量都是auto</span><br><span class="line">break   case  char  const   continue  default  do   double else  enum   </span><br><span class="line">extern 用来生命外部符号</span><br><span class="line">float  for   goto  if   int   long  </span><br><span class="line">register    寄存器关键字 (大量频繁被使用的数据, 放在寄存器中提高效率)</span><br><span class="line">return   short  </span><br><span class="line">signed有符号的</span><br><span class="line">unsigned   无符号的</span><br><span class="line">sizeof   </span><br><span class="line">static静态的</span><br><span class="line">struct  switch  typedef </span><br><span class="line">union联合体 (共用体)</span><br><span class="line">void空</span><br><span class="line">volatile  while</span><br></pre></td></tr></table></figure><ul><li><code>typedef</code> 类型重命名</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给基本数据类型起一个别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> t_int;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">t_int a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>static</code> 修饰变量与函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* static修饰局部变量</span></span><br><span class="line"><span class="comment">*改变了变量的生命周期——本质是改变了变量的存储类型</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* static修饰全局变量</span></span><br><span class="line"><span class="comment">*使被修饰的全局变量只能在自己所在的源文件内部使用</span></span><br><span class="line"><span class="comment">*之所以可以在其他文件中使用，是因为全局变量具有外部链接属性</span></span><br><span class="line"><span class="comment">*被static修饰之后，就变成了内部链接属性，其他源文件无法连接此全局变量</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* static修饰函数</span></span><br><span class="line"><span class="comment">* 使被修饰的函数只能在自己所在的源文件内部使用</span></span><br><span class="line"><span class="comment">*之所以可以在其他文件中使用，是因为函数具有外部链接属性</span></span><br><span class="line"><span class="comment">*被static修饰之后，就变成了内部链接属性，其他源文件无法连接此函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_common</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test_static</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">test_common();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">test_static();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111111111</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221223153234295.png" alt="内存中的存储类型"></p><hr><h2 id="1-12-define-定义常量和宏"><a href="#1-12-define-定义常量和宏" class="headerlink" title="1.12 define 定义常量和宏"></a>1.12 define 定义常量和宏</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* define 是一个预定义指令</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//define定义标识符常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 一坤年 2.5</span></span><br><span class="line"><span class="comment">//define定义宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Multiply(x, y) ((x)*(y)) <span class="comment">//注意格式, 这几层括号是必要的</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> sum = Multiply(一坤年, 一坤年);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, sum);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, <span class="number">10</span> * sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6.250000</span></span><br><span class="line"><span class="number">62.500000</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-13-指针"><a href="#1-13-指针" class="headerlink" title="1.13 指针"></a>1.13 指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>* indicator_a = &amp;a; <span class="comment">// * 说明indicator_a是指针变量, int说明indicator_a所指向的对象的类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> b = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* indicator_b = &amp;b;</span><br><span class="line"></span><br><span class="line">*indicator_a = <span class="number">10</span>; <span class="comment">// * 是解引用操作, *indicator_a 就是通过 indicator_a 里的地址找到 a, 对 a 进行操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;<span class="comment">//p为一个整形指针变量</span></span><br><span class="line">p = &amp;num; <span class="comment">//指针变量定义的是一个地址</span></span><br><span class="line">    *p = num; <span class="comment">//解引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>指针变量的大小</p><blockquote><p>指针需要多达空间, 取决于地址存储需要多达空间</p><p>32位机 32 bit – 4 byte</p><p>64位机 64 bit – 8 byte</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>*));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><hr><h2 id="1-14-结构体"><a href="#1-14-结构体" class="headerlink" title="1.14 结构体"></a>1.14 结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Garden</span> &#123;</span></span><br><span class="line"><span class="comment">//结构体成员变量</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>]; <span class="comment">//注意分号</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">double</span> money;</span><br><span class="line">&#125;; <span class="comment">//注意分号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体的创建于初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Garden</span> <span class="title">flower</span> =</span> &#123; <span class="string">&quot;violet&quot;</span>, <span class="number">100</span>, <span class="number">33.3</span>&#125;;</span><br><span class="line"><span class="comment">//结构体变量.成员变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;一般写法: %s, %d, %lf\n&quot;</span>, flower.name, flower.num, flower.money);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Garden</span>* <span class="title">pf</span> =</span> &amp;flower;</span><br><span class="line">    <span class="comment">//结构体指针.成员变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针.写法: %s, %d, %lf\n&quot;</span>, (*pf).name, (*pf).num, (*pf).money);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体指针-&gt;成员变量 (常)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针-&gt;写法: %s, %d, %lf\n&quot;</span>, pf-&gt;name, pf-&gt;num, pf-&gt;money);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="二、分支和循环"><a href="#二、分支和循环" class="headerlink" title="二、分支和循环"></a>二、分支和循环</h1><blockquote><p>分支语句</p></blockquote><ul><li><code>if..else</code></li><li><code>switch</code></li></ul><blockquote><p>循环语句</p></blockquote><ul><li><code>while</code></li><li><code>for</code></li><li><code>do...while</code></li></ul><blockquote><p>转向语句</p></blockquote><ul><li><code>goto</code> 语句</li><li><code>break</code> 语句</li><li><code>continue</code> 语句</li><li><code>return</code> 语句</li></ul><h2 id="2-1-分支语句-选择结构"><a href="#2-1-分支语句-选择结构" class="headerlink" title="2.1 分支语句 (选择结构)"></a>2.1 分支语句 (选择结构)</h2><ul><li><code>if...else</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个数是否为奇数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个数: &quot;</span>);</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这个数不是奇数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这个数是奇数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 1-100 之间的奇数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>switch</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line"><span class="comment">//switch中加入判断值</span></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//case后面只能加 整数常量表达式, 注意冒号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期1&quot;</span>); <span class="comment">//注意分号</span></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//不加 break 会全部执行一遍, 一定要加, 这是好习惯!!!</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期2&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期3&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期4&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期5&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期6&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是星期日&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">//都不匹配直接进行 default, 必须加, 这是好习惯!!!</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个星期哦&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入1-5，输出的是“weekday”;</span></span><br><span class="line"><span class="comment">//输入6 - 7，输出“weekend”</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line"><span class="comment">//switch中加入判断值</span></span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//case后面只能加 整数常量表达式, 注意冒号</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是weekday&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;今天是weekend&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">//都不匹配直接进行 default, 必须加, 这是好习惯!!!</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有这个星期哦&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-循环语句"><a href="#2-2-循环语句" class="headerlink" title="2.2 循环语句"></a>2.2 循环语句</h2><ul><li><code>while</code></li></ul><p><code>getchar</code> 详见<code>CSDN</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* getchar() - 字符输入函数，没有参数，从输入缓冲区里面读取一个字符 - 「 一次只能读取一个字符 」</span></span><br><span class="line"><span class="comment">* getchar() 返回值类型为 int, 需引用头文件 &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* EOF（-1） - End Of File 文件结束标志 - 键盘上用 ctrl + z 实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((input = getchar()) != EOF) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">fsdf</span><br><span class="line">fsdf</span><br><span class="line">fadsfa dfsdfsd</span><br><span class="line">fadsfa dfsdfsd</span><br><span class="line">fdsfa  dfsdfaf\n</span><br><span class="line">fdsfa  dfsdfaf\n</span><br><span class="line">dfdsaafdsf xbnnc  gnbnn\n\n\n\n</span><br><span class="line">dfdsaafdsf xbnnc  gnbnn\n\n\n\n</span><br><span class="line">^Z <span class="comment">//键入 Ctrl + z 停止</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只打印数字字符，跳过其他字符</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> num = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> ((num = getchar()) != EOF) &#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="string">&#x27;0&#x27;</span> || num &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f</span><br><span class="line">fsdf</span><br><span class="line"><span class="number">45646</span></span><br><span class="line"><span class="number">4564643</span></span><br><span class="line"><span class="number">43</span>gfdg</span><br><span class="line">g</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><ul><li><code>for</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* for (初始化部分; 条件判断部分; 调整部分)</span></span><br><span class="line"><span class="comment">* 如果省略条件判断部分则会产生死循环</span></span><br><span class="line"><span class="comment">* 可以使用多个变量来控制循环</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 建议:</span></span><br><span class="line"><span class="comment">*1. 不可在for 循环体内修改循环变量，防止 for 循环失去控制。</span></span><br><span class="line"><span class="comment">*2. 建议for语句的循环控制变量的取值采用“前闭后开区间”写法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略初始化部分</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count); <span class="comment">//count = 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for 循环嵌套</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, count = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//前开后闭式写法</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count); <span class="comment">//count = 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个变量控制循环</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, count = <span class="number">0</span>; i &lt; <span class="number">2</span> &amp;&amp; j &lt; <span class="number">5</span>; i++, j++) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, count); <span class="comment">//count = 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//k = 0, 判断为 FALSE, 循环 0 次</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>,k = <span class="number">0</span>; k = <span class="number">0</span>; i++, k++) &#123;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>do...while</code> 至少执行一次, 不经常使用</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="number">2.3</span> 练习</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 计算 n 的阶乘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="comment">//计算n的阶乘</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum = sum * n;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算-1-2-3-……-10"><a href="#计算-1-2-3-……-10" class="headerlink" title="计算 1!+2!+3!+……+10!"></a>计算 <code>1!+2!+3!+……+10!</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算 1!+2!+3!+……+10!</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sum_p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> sum_m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">sum_m = sum_m * i;</span><br><span class="line">&#125;</span><br><span class="line">sum_p = sum_m + sum_p;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum_p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在一个有序数组中查找具体的某个数字n-二分查找"><a href="#在一个有序数组中查找具体的某个数字n-二分查找" class="headerlink" title="在一个有序数组中查找具体的某个数字n (二分查找)"></a>在一个有序数组中查找具体的某个数字n (二分查找)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个有序数组中查找具体的某个数字n (二分查找)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>; <span class="comment">//数组元素个数</span></span><br><span class="line"><span class="type">int</span> key = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//二分查找关键代码段</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写代码，演示多个字符从两端移动，向中间汇聚"><a href="#编写代码，演示多个字符从两端移动，向中间汇聚" class="headerlink" title="编写代码，演示多个字符从两端移动，向中间汇聚"></a>编写代码，演示多个字符从两端移动，向中间汇聚</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写代码，演示多个字符从两端移动，向中间汇聚</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;This is a string , I will full it with &#x27;$&#x27;.&quot;</span>;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">strlen</span>(arr) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码段</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">arr[left] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">arr[right] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">left++;</span><br><span class="line">right--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序"><a href="#编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序" class="headerlink" title="编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序)"></a>编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则提示登录成，如果三次均输入错误，则退出程序)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> password = <span class="number">123456</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">if</span> (input == password) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n登陆成功&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n登陆失败&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h1><h2 id="3-1-函数分类"><a href="#3-1-函数分类" class="headerlink" title="3.1 函数分类"></a>3.1 函数分类</h2><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><p><a href="www.cplusplus.com">库函数网站</a></p><ul><li>IO函数</li><li>字符串操作函数</li><li>字符操作函数</li><li>内存操作函数</li><li>时间&#x2F;日期函数</li><li>数学函数</li><li>其他库函数</li></ul><h3 id="自定义函数-形参-amp-实参-传值-amp-传址"><a href="#自定义函数-形参-amp-实参-传值-amp-传址" class="headerlink" title="自定义函数 (形参&amp;实参, 传值&amp;传址)"></a>自定义函数 (形参&amp;实参, 传值&amp;传址)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传值调用 实现成函数，但是不能完成任务, 因为没有返回值, 没意义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap1</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123; <span class="comment">//函数定义, 形参</span></span><br><span class="line"><span class="comment">//形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效。</span></span><br><span class="line"><span class="comment">//形参实例化之后其实相当于实参的一份临时拷贝, 改变形参不能改变实参</span></span><br><span class="line"> <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"> tmp = x;</span><br><span class="line"> x = y;</span><br><span class="line"> y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传址调用 正确的版本</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap2</span><span class="params">(<span class="type">int</span> *px, <span class="type">int</span> *py)</span> &#123; <span class="comment">//函数定义, 形参</span></span><br><span class="line"> <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"> tmp = *px;</span><br><span class="line"> *px = *py;</span><br><span class="line"> *py = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">int</span> num1 = <span class="number">1</span>;</span><br><span class="line"> <span class="type">int</span> num2 = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//传值调用</span></span><br><span class="line"> Swap1(num1, num2); <span class="comment">//函数调用, 实参</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Swap1::num1 = %d num2 = %d\n&quot;</span>, num1, num2);</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//传址调用</span></span><br><span class="line"> Swap2(&amp;num1, &amp;num2); <span class="comment">//函数调用, 实参</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Swap2::num1 = %d num2 = %d\n&quot;</span>, num1, num2);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-2-函数练习"><a href="#3-2-函数练习" class="headerlink" title="3.2 函数练习"></a>3.2 函数练习</h2><h3 id="判断一个数是不是素数"><a href="#判断一个数是不是素数" class="headerlink" title="判断一个数是不是素数"></a>判断一个数是不是素数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个数是不是素数</span></span><br><span class="line"><span class="comment">//如果对正整数n，如果用2到sqrt(n)之间的所有整数去除，均无法整除，则n为质数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断一个数是不是素数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span> <span class="comment">//sqrt()函数所在头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrimeNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">int</span> whether = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="built_in">sqrt</span>(n); i++) &#123; <span class="comment">//sqrt(n)表示n的算术平方根</span></span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这个数不是素数&quot;</span>);</span><br><span class="line">whether = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这个数不是素数&quot;</span>);</span><br><span class="line">whether = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (whether == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这个数是素数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">PrimeNumber(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断一年是不是闰年"><a href="#判断一年是不是闰年" class="headerlink" title="判断一年是不是闰年"></a>判断一年是不是闰年</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一年是不是闰年</span></span><br><span class="line"><span class="comment">/* 两种情况</span></span><br><span class="line"><span class="comment">* 1. 能被 4 整除不能被 100 整除 (普通闰年)</span></span><br><span class="line"><span class="comment">* 2. 能被 400 整除 (世纪闰年)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//判断一年是不是闰年</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LeapYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这一年是闰年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这一年是闰年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n这一年不是闰年&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line">LeapYear(year);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个整形有序数组的二分查找"><a href="#实现一个整形有序数组的二分查找" class="headerlink" title="实现一个整形有序数组的二分查找"></a>实现一个整形有序数组的二分查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个整形有序数组的二分查找</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Search</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> key, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span> key = <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line">Search(arr, key, left, right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写一个函数，每调用一次这个函数，就会将-num-的值增加1"><a href="#写一个函数，每调用一次这个函数，就会将-num-的值增加1" class="headerlink" title="写一个函数，每调用一次这个函数，就会将  num  的值增加1"></a>写一个函数，每调用一次这个函数，就会将  <code>num</code>  的值增加1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Count</span><span class="params">()</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-3-函数的嵌套调用-amp-链式访问"><a href="#3-3-函数的嵌套调用-amp-链式访问" class="headerlink" title="3.3 函数的嵌套调用&amp;链式访问"></a>3.3 函数的嵌套调用&amp;链式访问</h2><h3 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h3><blockquote><p>函数之中调用另一个函数</p></blockquote><h3 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h3><blockquote><p>把一个函数的返回值作为另外一个函数的参数</p></blockquote><hr><h2 id="3-4-函数的声明-amp-定义"><a href="#3-4-函数的声明-amp-定义" class="headerlink" title="3.4 函数的声明&amp;定义"></a>3.4 函数的声明&amp;定义</h2><ul><li><p>函数声明</p><blockquote><ol><li><p>告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体是不是存在，函数声明决定不了。</p></li><li><p>函数的声明一般出现在函数的使用之前。要满足<strong>先声明后使用</strong>。</p></li><li><p>函数的声明一般要放在头文件中的, 其他文件引用时用 <code>include</code> 引用</p></li></ol></blockquote></li><li><p>函数定义</p><blockquote><p>函数的定义是指函数的具体实现，交待函数的功能实现</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pargma comment(lib, <span class="string">&quot;add.lib&quot;</span>) <span class="comment">//导入静态库(目前不知道用在哪, 详情请CSDN)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span> <span class="comment">//引用</span></span></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数声明, 以下两种皆可</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>; <span class="comment">//先声明后使用, 如果函数定义在main()函数后面, 必须声明, 不然用不了</span></span><br><span class="line">    <span class="comment">//int Add(int , int );</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> c = Add(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-5-函数递归"><a href="#3-5-函数递归" class="headerlink" title="3.5 函数递归"></a>3.5 函数递归</h2><blockquote><p>程序调用自身的编程技巧称为递归（ recursion）。</p><p>递归做为一种算法在程序设计语言中广泛应用。 </p><p>一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，</p><p>它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，</p><p>递归策略</p><p>只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p><p><strong>递归的主要思考方式在于：把大事化小</strong></p></blockquote><ul><li><p>递归的两个必要条件</p><blockquote><p>存在限制条件，当满足这个限制条件的时候，递归便不再继续。</p><p>每次递归调用之后越来越接近这个限制条件</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受一个整型值（无符号），按照顺序打印它的每一位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无限递归容易 栈溢出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(n&gt;<span class="number">9</span>) &#123;</span><br><span class="line">print(n/<span class="number">10</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">int</span> num = <span class="number">1234</span>;</span><br><span class="line"> print(num);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写函数不允许创建临时变量，求字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#incude <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(*str == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+Strlen(str+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span> *p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"> <span class="type">int</span> len = Strlen(p);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, len);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的阶乘。（不考虑溢出）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求第n个斐波那契数。（不考虑溢出）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)         </span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>递归的改进</p><blockquote><ol><li><p>将递归改写成非递归。</p></li><li><p>使用 <code>static</code> 对象替代  <code>nonstatic </code> 局部对象。</p><p>在递归函数设计中，可以使用 <code>static</code> 对象替代 <code>nonstatic</code> 局部对象（即栈对象），</p><p>这不仅可以减少每次递归调用和返回时产生和释放 <code>nonstatic</code> 对象的开销，</p><p>而且 static 对象还可以保存递归调用的中间状态，并且可为各个调用层所访问。</p></li></ol></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的阶乘 (非递归)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    result *= n ;</span><br><span class="line">        n -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求第n个斐波那契数 (非递归)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> pre_result;</span><br><span class="line">    <span class="type">int</span> next_older_result;</span><br><span class="line">    result = pre_result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    n -= <span class="number">1</span>;</span><br><span class="line">        next_older_result = pre_result;</span><br><span class="line">        pre_result = result;</span><br><span class="line">        result = pre_result + next_older_result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>许多问题是以递归的形式进行解释的，这只是因为它比非递归的形式更为清晰。</p></li><li><p>但是这些问题的迭代实现往往比递归实现效率更高，虽然代码的可读性稍微差些。</p></li><li><p>当一个问题相当复杂，难以用迭代实现时，此时递归实现的简洁性便可以补偿它所带来的运行时开销。</p></li></ol><h3 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h3><ul><li><p>汉诺塔问题</p></li><li><p>青蛙跳台阶问题</p></li></ul><hr><h1 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h1><h2 id="4-1-一维数组"><a href="#4-1-一维数组" class="headerlink" title="4.1 一维数组"></a>4.1 一维数组</h2><ul><li>一维数组在内存中是连续存放的</li><li>随着下标增长, 地址由低到高变化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//int arr[n];    不可以这样定义, 必须为常量, n是变量</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">//完全初始化</span></span><br><span class="line"><span class="type">int</span> arr_three[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;; <span class="comment">//不完全初始化</span></span><br><span class="line"><span class="type">int</span> <span class="type">arr_t</span>[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr1[<span class="number">4</span>] = &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;r&#x27;</span> &#125;; <span class="comment">// 4 个字符 f o u r</span></span><br><span class="line"><span class="type">char</span> arr3[] = <span class="string">&quot;four&quot;</span>; <span class="comment">// 5 个字符 f o u r \0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sizeof[arr]表示整个数组大小, 单位字节</span></span><br><span class="line"><span class="comment">//sizeof(arr[0])表示数组第一个数大小, 单位字节</span></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221225202554077.png" alt="一维数组的内存存储"></p><hr><h2 id="4-2-二维数组"><a href="#4-2-二维数组" class="headerlink" title="4.2 二维数组"></a>4.2 二维数组</h2><ul><li>二维数组在内存中也是连续存储的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组 本质是一个矩阵</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//数组初始化</span></span><br><span class="line"><span class="type">int</span> arr1[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span> arr2[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125; &#125;;</span><br><span class="line"><span class="type">int</span> arr3[][<span class="number">4</span>] = &#123; &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125; &#125;;<span class="comment">//二维数组如果有初始化，行可以省略，列不能省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221225202515194.png" alt="二维数组的内存存储"></p><hr><h2 id="4-3-数组越界"><a href="#4-3-数组越界" class="headerlink" title="4.3 数组越界"></a>4.3 数组越界</h2><blockquote><p>数组的下标是有范围限制的。</p><p>数组的下规定是从0开始的，如果数组有n个元素，最后一个元素的下标就是n-1。</p><p>所以数组的下标如果小于0，或者大于n-1，就是数组越界访问了，超出了数组合法空间的访问。</p></blockquote><p>数组名是数组首元素地址: </p><ol><li><code>sizeof(数组名)</code> - 数组名表示整个数组, 计算的是整个儿数组大小, 单位: 字节</li><li><code>&amp;数组名</code> - 数组名表示整个数组, 取出的是整个数组的地址</li></ol><hr><h2 id="4-4-数组作为函数参数-冒泡排序"><a href="#4-4-数组作为函数参数-冒泡排序" class="headerlink" title="4.4 数组作为函数参数 (冒泡排序)"></a>4.4 数组作为函数参数 (冒泡排序)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span> &#123;<span class="comment">//参数接收数组元素个数</span></span><br><span class="line"> <span class="comment">//代码同上面函数</span></span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//这样对吗？</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;sz-i<span class="number">-1</span>; j++)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">           &#123;</span><br><span class="line">                <span class="type">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123; <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    bubble_sort(arr, sz); <span class="comment">//是否可以正常排序？</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-5-三子棋"><a href="#4-5-三子棋" class="headerlink" title="4.5 三子棋"></a>4.5 三子棋</h2><ul><li><code>logic.c</code> 测试游戏的逻辑</li><li><code>game.h</code> 关于游戏函数的声明, 符号声明, 包含的头文件</li><li><code>game.c</code> 游戏相关函数实现</li></ul><hr><h2 id="4-6-扫雷"><a href="#4-6-扫雷" class="headerlink" title="4.6 扫雷"></a>4.6 扫雷</h2><ul><li><code>logic.c</code> 测试游戏的逻辑</li><li><code>game.h</code> 关于游戏函数的声明, 符号声明, 包含的头文件</li><li><code>game.c</code> 游戏相关函数实现</li></ul><hr><h1 id="五、操作符"><a href="#五、操作符" class="headerlink" title="五、操作符"></a>五、操作符</h1><h2 id="5-1-操作符分类"><a href="#5-1-操作符分类" class="headerlink" title="5.1 操作符分类"></a>5.1 操作符分类</h2><blockquote><p>算术操作符</p><p>移位操作符</p><p>位操作符</p><p>赋值操作符</p><p>单目操作符</p><p>关系操作符</p><p>逻辑操作符</p><p>条件操作符</p><p>逗号表达式</p><p>下标引用、函数调用和结构成员</p></blockquote><hr><h2 id="5-2-算数操作符"><a href="#5-2-算数操作符" class="headerlink" title="5.2 算数操作符"></a>5.2 算数操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+    -   *   /   % </span><br></pre></td></tr></table></figure><ol><li>除了 <code>%</code> 操作符之外，其他的几个操作符可以作用于整数和浮点数。</li><li>对于 <code>/</code> 操作符如果两个操作数都为整数，执行整数除法。而只要有浮点数执行的就是浮点数除法。</li><li><code>%</code> 操作符的两个操作数必须为整数。返回的是整除之后的余数。</li></ol><hr><h2 id="5-3-移位操作符"><a href="#5-3-移位操作符" class="headerlink" title="5.3 移位操作符"></a>5.3 移位操作符</h2><blockquote><p>对于移位运算符，不要移动负数位，这个是标准未定义的  <code>num&gt;&gt;-1; //error</code></p><p>内存中存放的是二进制的补码 —–即操作的是补码</p></blockquote><ul><li><p><code>&lt;&lt;</code> 左移操作符</p><blockquote><p>左边抛弃, 右边补 0</p></blockquote></li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221225213719432.png" alt="左移操作符"></p><ul><li><p><code>&gt;&gt;</code> 右移操作符 (通常算数右移)</p><blockquote><ol><li><p>逻辑移位</p><p>左边用0填充，右边丢弃</p></li><li><p>算术移位</p><p>左边用原该值的符号位填充，右边丢弃</p></li></ol></blockquote></li></ul><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221226081055351.png" alt="右移操作符"></p><hr><h2 id="5-4-位操作符"><a href="#5-4-位操作符" class="headerlink" title="5.4 位操作符"></a>5.4 位操作符</h2><blockquote><p><code>&amp;</code>  &#x2F;&#x2F;按位与</p><p>​两个数位值均为 <code>1</code> , 得数位值为 <code>1</code> , 其余均为 <code>0</code></p><p><code>|</code>  &#x2F;&#x2F;按位或</p><p>​两个数位值均为 <code>0</code> , 得数位值为 <code>0</code> , 其余均为 <code>1</code></p><p><code>^</code>  &#x2F;&#x2F;按位异或</p><p>​两个数位值相同为 <code>0</code> , 相异必须是整数。</p><p>注：他们的操作数必须是整数</p><p>注：他们的操作数必须是整数。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换两个整型变量, 不使用第三个变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d&quot;</span>, a, b);</span><br><span class="line">a^ a; <span class="comment">//两个相同的数 异或, 值为 0</span></span><br><span class="line">a = a ^ b; </span><br><span class="line">b = a ^ b; <span class="comment">//相当于 a ^ b ^ b, 两个 b 异或值为 0, 剩下 a</span></span><br><span class="line">a = a ^ b; <span class="comment">//相当于 a ^ b ^ a, 两个 a 异或值为 0, 剩下 b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求一个整数存储在内存中的二进制中1的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//计数</span></span><br><span class="line"><span class="keyword">while</span> (num) &#123; <span class="comment">//num 为 0 时跳出循环, 不用循环32次</span></span><br><span class="line">count++;</span><br><span class="line">num = num &amp; (num - <span class="number">1</span>); <span class="comment">//每次减一并按位与, 可以找到到底有多少个 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;二进制中1的个数 = %d\n&quot;</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-5-赋值操作符"><a href="#5-5-赋值操作符" class="headerlink" title="5.5 赋值操作符"></a>5.5 赋值操作符</h2><ul><li><p>复合赋值符</p><blockquote><p>+&#x3D;</p><p>-&#x3D;</p><p>*&#x3D;</p><p>&#x2F;&#x3D;</p><p>%&#x3D;</p><p>&gt;&gt;&#x3D;</p><p>&lt;&lt;&#x3D;</p><p>&amp;&#x3D;</p><p>|&#x3D;</p><p>^&#x3D;</p></blockquote></li></ul><hr><h2 id="5-6-单目操作符"><a href="#5-6-单目操作符" class="headerlink" title="5.6 单目操作符"></a>5.6 单目操作符</h2><table><thead><tr><th align="center">操作符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">逻辑反操作</td></tr><tr><td align="center">-</td><td align="center">负值</td></tr><tr><td align="center">+</td><td align="center">正值</td></tr><tr><td align="center">&amp;</td><td align="center">取地址</td></tr><tr><td align="center"><code>sizeof</code></td><td align="center">操作数的类型长度（以字节为单位）</td></tr><tr><td align="center">~</td><td align="center">对一个数的二进制按位取反</td></tr><tr><td align="center">–</td><td align="center">前置、后置– (写在前面就先 - )</td></tr><tr><td align="center">++</td><td align="center">前置、后置++ (写在前面就先 + )</td></tr><tr><td align="center">*</td><td align="center">间接访问操作符(解引用操作符) — 用在指针</td></tr><tr><td align="center">(类型)</td><td align="center">强制类型转换</td></tr></tbody></table><hr><h2 id="5-7-关系操作符"><a href="#5-7-关系操作符" class="headerlink" title="5.7 关系操作符"></a>5.7 关系操作符</h2><blockquote><p>&gt;</p><p>&gt;&#x3D;</p><p>&lt;</p><p>&lt;&#x3D;</p><p>!&#x3D;  用于测试“不相等”</p><p>&#x3D;&#x3D;    用于测试“相等”</p></blockquote><hr><h2 id="5-8-逻辑操作符"><a href="#5-8-逻辑操作符" class="headerlink" title="5.8 逻辑操作符"></a>5.8 逻辑操作符</h2><blockquote><p>&amp;&amp;   逻辑与</p><p>||      逻辑或</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 1 2 3 4</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">2</span>, c = <span class="number">3</span>, d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"><span class="comment">//i = a++||++b||d++;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n b = %d\n c = %d\nd = %d\n&quot;</span>, a, b, c, d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="5-9-条件操作符"><a href="#5-9-条件操作符" class="headerlink" title="5.9 条件操作符"></a>5.9 条件操作符</h2><blockquote><p><code>exp1 ? exp2 : exp3</code></p></blockquote><hr><h2 id="5-10-逗号表达式"><a href="#5-10-逗号表达式" class="headerlink" title="5.10 逗号表达式"></a>5.10 逗号表达式</h2><blockquote><p><code>exp1, exp2, exp3, ...expN</code></p><p>逗号表达式，就是用逗号隔开的多个表达式。</p><p>逗号表达式，从左向右依次执行。整个表达式的结果是最后一个表达式的结果。</p></blockquote><hr><h2 id="5-11-下标引用、函数调用和结构成员"><a href="#5-11-下标引用、函数调用和结构成员" class="headerlink" title="5.11 下标引用、函数调用和结构成员"></a>5.11 下标引用、函数调用和结构成员</h2><blockquote><p> <code>[]</code> 下标引用操作符</p><p> <code>()</code> 函数调用操作符</p><p><code>.</code>  结构体.成员名</p><p><code>-&gt;</code> 结构体指针-&gt;成员名</p></blockquote><hr><h2 id="5-12-表达式求值"><a href="#5-12-表达式求值" class="headerlink" title="5.12 表达式求值"></a>5.12 表达式求值</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>C的整型算术运算总是至少以缺省整型类型的精度来进行的。</p><p>为了获得这个精度，表达式中的 字符和短整型 操作数在使用之前被转换为普通整型，这种转换称为<strong>整型提升</strong>。</p><blockquote><p>说白了就是因为 <code>char ( 1 字节)</code> 跟 <code>short (2 字节)</code> 太小了, 达不到运算时所需要的 4 字节, 才会隐式转成整型</p><p>向精度更高的转换</p></blockquote><p><strong>整型提升的意义</strong>：</p><blockquote><p>表达式的整型运算要在 CPU 的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度</p><p>一般就是int的字节长度，同时也是CPU的通用寄存器的长度。</p><p>因此，即使两个 <code>char</code> 类型的相加，在CPU执行时实际上也要先转换为CPU内整型操作数的标准长</p><p>度。</p><p>通用CPU（general-purpose CPU）是难以直接实现两个8比特字节直接相加运算（虽然机器指令</p><p>中可能有这种字节相加指令）。所以，表达式中各种长度可能小于 <code>int</code> 长度的整型值，都必须先转</p><p>换为 <code>int</code> 或 <code>unsigned int</code>，然后才能送入CPU去执行运算。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a,b,c;</span><br><span class="line">...</span><br><span class="line">a = b + c; <span class="comment">// b 和 c 的值被提升为普通整型，然后再执行加法运算, 加法运算完成之后，结果将被截断，然后再存储于 a 中</span></span><br></pre></td></tr></table></figure><p><strong>如何进行整体提升？</strong></p><blockquote><p>整形提升是按照变量的数据类型的符号位来提升的</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//负数的整形提升</span></span><br><span class="line"><span class="type">char</span> c1 = <span class="number">-1</span>;</span><br><span class="line">变量c1的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">1111111</span></span><br><span class="line">因为 <span class="type">char</span> 为有符号的 <span class="type">char</span></span><br><span class="line">所以整形提升的时候，!!! 高位补充符号位，即为<span class="number">1</span> !!!</span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">11111111111111111111111111111111</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//正数的整形提升</span></span><br><span class="line"><span class="type">char</span> c2 = <span class="number">1</span>;</span><br><span class="line">变量c2的二进制位(补码)中只有<span class="number">8</span>个比特位：</span><br><span class="line"><span class="number">00000001</span></span><br><span class="line">因为 <span class="type">char</span> 为有符号的 <span class="type">char</span></span><br><span class="line">所以整形提升的时候，!!! 高位补充符号位，即为<span class="number">0</span> !!!</span><br><span class="line">提升之后的结果是：</span><br><span class="line"><span class="number">00000000000000000000000000000001</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//无符号整形提升，高位补0</span></span><br></pre></td></tr></table></figure><p><strong>例1</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//00000000000000000000000000000011 - 有符号, 为 0, 高位补 0</span></span><br><span class="line"><span class="comment">//00000011 - a 为 char 型时的二进制位 (8 bit)</span></span><br><span class="line"><span class="type">char</span> b = <span class="number">127</span>;</span><br><span class="line"><span class="comment">//00000000000000000000000001111111 - 有符号, 为 0, 高位补 0</span></span><br><span class="line"><span class="comment">//01111111 - b 为 char 型的二进制位 (8 bit)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c = a + b;</span><br><span class="line"><span class="comment">//00000000000000000000000000000011 - a</span></span><br><span class="line"><span class="comment">//00000000000000000000000001111111 - b</span></span><br><span class="line"><span class="comment">//00000000000000000000000010000010 - a + b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//10000010 - c 为 char 型的二进制位 (8 bit) - 此处为截断: char中只能放最低的 8 个 bit 位, 其他位置放不下了, 丢弃</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000010 - 补码 - 有符号, 为 1, 高位补 1</span></span><br><span class="line"><span class="comment">//11111111111111111111111110000001 - 反码</span></span><br><span class="line"><span class="comment">//10000000000000000000000001111110 - 原码</span></span><br><span class="line"><span class="comment">//-126</span></span><br><span class="line"><span class="comment">//a 和 b 都是 char 型的, 都没有达到一个 int 的大小</span></span><br><span class="line"><span class="comment">//这里就回发生整形提升</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c); <span class="comment">// -126</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例2</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* a,b 要进行整形提升,但是 c 不需要整形提升</span></span><br><span class="line"><span class="comment">* a,b 整形提升之后,变成了负数,所以表达式 a==0xb6 , b==0xb600 的结果是假</span></span><br><span class="line"><span class="comment">* 所程序输出的结果是: c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">0xb6</span>;</span><br><span class="line"><span class="type">short</span> b = <span class="number">0xb600</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0xb6000000</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0xb6</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0xb600</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0xb6000000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例3</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* c 只要参与表达式运算,就会发生整形提升,表达式 +c ,就会发生提升,所以 sizeof(+c) 是 4 个字节</span></span><br><span class="line"><span class="comment">* 表达式 -c 也会发生整形提升,所以 sizeof(-c) 是 4 个字节,但是 sizeof(c) ,就是 1 个字节.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(+c));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, <span class="keyword">sizeof</span>(-c));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h3><p>如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数的转换为另一个操作数的类</p><p>型，否则操作就无法进行。下面的层次体系称为<strong>寻常算术转换</strong>。</p><blockquote><p><code>long double</code></p><p><code>double</code></p><p><code>float</code></p><p><code>unsigned long int</code></p><p><code>long int</code></p><p><code>unsigned int</code></p><p><code>int</code></p></blockquote><p>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换为另外一个操作数的类型后执行运算</p><blockquote><p>从下往上转, 下面精度低, 上面精度高, 从精度小的转换为精度大的</p></blockquote><h3 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h3><ol><li><p>操作符的优先级</p></li><li><p>操作符的结合性</p></li><li><p>是否控制求值顺序。</p></li></ol><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221227084052382.png" alt="操作符优先级1"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221227084138451.png" alt="操作符优先级2"></p><hr><h1 id="六、指针"><a href="#六、指针" class="headerlink" title="六、指针"></a>六、指针</h1><ul><li><p>指针是用来存放地址的，地址是唯一标示一块地址空间的。</p></li><li><p><strong>指针的大小在</strong> <strong>32</strong>位平台是<strong>4</strong>个字节，在<strong>64</strong>位平台是<strong>8</strong>个字节</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span>* indicator_a = &amp;a; <span class="comment">// * 说明indicator_a是指针变量, int说明indicator_a所指向的对象的类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> b = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* indicator_b = &amp;b;</span><br><span class="line"></span><br><span class="line">*indicator_a = <span class="number">10</span>; <span class="comment">// * 是解引用操作, *indicator_a 就是通过 indicator_a 里的地址找到 a, 对 a 进行操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;<span class="comment">//p为一个整形指针变量</span></span><br><span class="line">p = &amp;num; <span class="comment">//指针变量定义的是一个地址</span></span><br><span class="line">    *p = num; <span class="comment">//解引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-1-指针类型"><a href="#6-1-指针类型" class="headerlink" title="6.1 指针类型"></a>6.1 指针类型</h2><p><code>char*</code> 类型的指针是为了存放 <code>char</code> 类型变量的地址。</p><p><code>short*</code> 类型的指针是为了存放 <code>short</code> 类型变量的地址。</p><p><code>int*</code> 类型的指针是为了存放 <code>int</code> 类型变量的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针 + - 整数</span></span><br><span class="line"><span class="comment">//指针的类型决定了指针向前或者向后走一步有多大（距离） (步长)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span>* pc = (<span class="type">char</span>*) &amp;n;</span><br><span class="line"><span class="type">int</span>* pi = &amp;n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pc + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pi);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, pi + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000005</span>C4BCFF8B4</span><br><span class="line"><span class="number">0000005</span>C4BCFF8B4</span><br><span class="line"><span class="number">0000005</span>C4BCFF8B5</span><br><span class="line"><span class="number">0000005</span>C4BCFF8B4</span><br><span class="line"><span class="number">0000005</span>C4BCFF8B8</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针的解引用 (此段代码输出为空, 主要是调试证明)</span></span><br><span class="line"><span class="comment">//指针的类型决定了，对指针解引用的时候有多大的权限（能操作几个字节）。</span></span><br><span class="line"><span class="comment">//比如： char* 的指针解引用就只能访问一个字节，而 int* 的指针的解引用就能访问四个字节。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0x11223344</span>;</span><br><span class="line"><span class="type">char</span>* pc = (<span class="type">char</span>*)&amp;n;</span><br><span class="line"><span class="type">int</span>* pi = &amp;n;</span><br><span class="line">*pc = <span class="number">0</span>; <span class="comment">//重点在调试的过程中观察内存的变化。</span></span><br><span class="line">*pi = <span class="number">0</span>; <span class="comment">//重点在调试的过程中观察内存的变化。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-2-字符指针"><a href="#6-2-字符指针" class="headerlink" title="6.2 字符指针"></a>6.2 字符指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//法一</span></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* pc = &amp;ch;</span><br><span class="line">*pc = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pstr = <span class="string">&quot;hello bit.&quot;</span>; <span class="comment">//本质是把字符串&quot;hello bit.&quot;的首字母放入指针变量 pstr 中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pstr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221231181608071.png" alt="字符指针"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*输出: </span></span><br><span class="line"><span class="comment">* str1 and str2 are not same</span></span><br><span class="line"><span class="comment">* str3 and str4 are same</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str3 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str4 = <span class="string">&quot;hello bit.&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str1 == str2)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are same\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str1 and str2 are not same\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str3 == str4)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are same\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str3 and str4 are not same\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* str3 和 str4 指向的是一个同一个常量字符串。C/C++会把常量字符串存储到单独的一个内存区域，</span></span><br><span class="line"><span class="comment">* 当几个指针。指向同一个字符串的时候，他们实际会指向同一块内存。</span></span><br><span class="line"><span class="comment">* 但是用相同的常量字符串去初始化不同的数组的时候就会开辟出不同的内存块。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-3-野指针"><a href="#6-3-野指针" class="headerlink" title="6.3 野指针"></a>6.3 野指针</h2><blockquote><p>指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未初始化的野指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span>* p;<span class="comment">//局部变量指针未初始化，默认为随机值</span></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//越界访问的野指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="comment">//当指针指向的范围超出数组arr的范围时，p就是野指针</span></span><br><span class="line">        <span class="comment">//C语言不会检查数据是否越界</span></span><br><span class="line">*(p++) = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针指向的空间释放</span></span><br><span class="line"><span class="comment">//空间释放后, 指针指向位置, 编程野指针 (动态内存开辟后补代码)</span></span><br></pre></td></tr></table></figure><p>规避野指针:</p><ol><li><p>指针初始化</p></li><li><p>小心指针越界</p></li><li><p>指针指向空间释放即使置NULL</p></li><li><p>避免返回局部变量的地址</p></li><li><p>指针使用之前检查有效性</p></li></ol><hr><h2 id="6-4-指针运算"><a href="#6-4-指针运算" class="headerlink" title="6.4 指针运算"></a>6.4 指针运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针关系运算</span></span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[N_VALUES]; vp &gt; &amp;values[<span class="number">0</span>];) &#123;</span><br><span class="line">*--vp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码改进</span></span><br><span class="line"><span class="keyword">for</span> (vp = &amp;values[N_VALUES - <span class="number">1</span>]; vp &gt;= &amp;values[<span class="number">0</span>];vp--) &#123;</span><br><span class="line">*vp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 标准规定:</span></span><br><span class="line"><span class="comment">*允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，</span></span><br><span class="line"><span class="comment">*但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。</span></span><br><span class="line"><span class="comment">* 定义数组 arr[10] = &#123; 0 &#125;, 可以访问与 arr[10] 比较但是不能与 arr[-1] 比较</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-5-指针与数组"><a href="#6-5-指针与数组" class="headerlink" title="6.5 指针与数组"></a>6.5 指针与数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组名的意义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p == %p&quot;</span>, arr, &amp;arr[<span class="number">0</span>]); <span class="comment">//数组名表示的是数组首元素的地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针与数组关系</span></span><br><span class="line"><span class="comment">// p+i 其实计算的是数组 arr 下标为 i 的地址</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr; <span class="comment">//指针存放数组首元素的地址</span></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p   &lt;====&gt; p+%d = %p\n&quot;</span>, i, &amp;arr[i], i, p + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过指针访问数组</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr; <span class="comment">//指针存放数组首元素的地址</span></span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-6-指针数组"><a href="#6-6-指针数组" class="headerlink" title="6.6 指针数组"></a>6.6 指针数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针数组 -- 存放指针的数组</span></span><br><span class="line"><span class="type">int</span>* arr3[<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span>* arr4[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="comment">//数组中存放的是指针 (地址)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//指针指向变量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span>* arr[<span class="number">3</span>] = &#123; &amp;a, &amp;b, &amp;c &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针指向数组</span></span><br><span class="line"><span class="type">int</span> a1[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> b1[<span class="number">5</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> c1[<span class="number">5</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span>* arr1[<span class="number">3</span>] = &#123; a1, b1, c1 &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(arr1[i] + j));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]); <span class="comment">//这种写法用于模拟二维数组</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-7-二级指针"><a href="#6-7-二级指针" class="headerlink" title="6.7 二级指针"></a>6.7 二级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二级指针</span></span><br><span class="line"><span class="comment">//指针变量也是变量，是变量就有地址，那指针变量的地址存放在哪里？</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span>* ppa = &amp;b;<span class="comment">//等价于 pa = &amp;b;</span></span><br><span class="line"><span class="type">int</span>* *ppa = &amp;ppa;</span><br><span class="line">**ppa = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//等价于*pa = 30;</span></span><br><span class="line"><span class="comment">//等价于a = 30;</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-8-数组指针"><a href="#6-8-数组指针" class="headerlink" title="6.8 数组指针"></a>6.8 数组指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//把数组arr的地址赋值给数组指针变量p</span></span><br><span class="line"><span class="comment">//但是一般很少这样写代码, 太复杂了没必要</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组指针的使用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr1</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr2</span><span class="params">(<span class="type">int</span>(*arr)[<span class="number">5</span>], <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">print_arr1(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//数组名arr，表示首元素的地址</span></span><br><span class="line"><span class="comment">//但是二维数组的首元素是二维数组的第一行</span></span><br><span class="line"><span class="comment">//所以这里传递的arr，其实相当于第一行的地址，是一维数组的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以数组指针来接收</span></span><br><span class="line">print_arr2(arr, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>]; <span class="comment">//整形数组</span></span><br><span class="line"><span class="type">int</span>* parr1[<span class="number">10</span>]; <span class="comment">//指针数组, 整型数组中存放 10 个指针</span></span><br><span class="line"><span class="type">int</span> (*parr2)[<span class="number">10</span>]; <span class="comment">//数组指针, 该指针指向一个数组, 这个数组 10 个元素, 每个都是整型</span></span><br><span class="line"><span class="comment">//存储 数组指针 的 数组, 可存放 10 个 数组指针, 每个 数组指针 指向一个 数组, 每个 数组 5 个元素, 都是 整型</span></span><br><span class="line"><span class="type">int</span> (*parr3[<span class="number">10</span>])[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><hr><h2 id="6-9-数组参数-amp-指针参数"><a href="#6-9-数组参数-amp-指针参数" class="headerlink" title="6.9 数组参数 &amp; 指针参数"></a>6.9 数组参数 &amp; 指针参数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组传参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[])</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">10</span>])</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr)</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span>* arr[<span class="number">20</span>])</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span>** arr)</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span>* arr2[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">test(arr);</span><br><span class="line">test2(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二维数组传参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span> <span class="comment">//ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[][])</span> <span class="comment">//不ok</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span><span class="comment">//ok？</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字。</span></span><br><span class="line"><span class="comment">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素。</span></span><br><span class="line"><span class="comment">//这样才方便运算。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr)</span> <span class="comment">//不ok, 实参是一个数组地址, 形参不能用一个普通指针接收</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>* arr[<span class="number">5</span>])</span> <span class="comment">//不ok, 既不是指针, 又不是二维数组</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>(*arr)[<span class="number">5</span>])</span> <span class="comment">// ok, 数组指针, 传的值为二维数组第一行的一维数组</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** arr)</span> <span class="comment">//不ok, 二级指针与实参不匹配</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一级指针传参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>* p, <span class="type">int</span> sz)</span> &#123; <span class="comment">//形参 * p 的意思是传过来一个指针变量</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p = arr;</span><br><span class="line"><span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//一级指针p，传给函数</span></span><br><span class="line">print(p, sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二级指针传参</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** ptr)</span> &#123; <span class="comment">//形参 ** ptr 的意思是传过来一个二级指针变量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, **ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;n;</span><br><span class="line"><span class="type">int</span>** pp = &amp;p;</span><br><span class="line">test(pp);</span><br><span class="line">test(&amp;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-10-函数-amp-指针"><a href="#6-10-函数-amp-指针" class="headerlink" title="6.10 函数 &amp; 指针"></a>6.10 函数 &amp; 指针</h2><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数指针 - 存放函数地址的指针</span></span><br><span class="line"><span class="comment">//&amp;函数名 - 取到的就是函数的地址</span></span><br><span class="line"><span class="comment">//函数名 与 &amp;函数名一个意思, 函数名 == &amp;函数名</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span>*)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> , <span class="type">int</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//指针类型跟随函数返回值类型</span></span><br><span class="line"><span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add; <span class="comment">//Add == pf</span></span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>, <span class="type">int</span>) = &amp;Add; <span class="comment">//两种都可以</span></span><br><span class="line"><span class="type">void</span> (*pc)(<span class="type">char</span>*) = &amp;test;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数指针调用</span></span><br><span class="line"><span class="type">int</span> ret = (*pf)(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数指针数组</span></span><br><span class="line"><span class="comment">//本质是数组, 存储的事一堆函数指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> , <span class="type">int</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> , <span class="type">int</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//函数指针数组 存放的 函数指针 的 形参 要相同, 不然会报错</span></span><br><span class="line"><span class="type">int</span> (*pf[<span class="number">10</span>])(<span class="type">int</span>, <span class="type">int</span>) = &#123; Add, test &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数指针数组的用途：转移表</span></span><br><span class="line"><span class="comment">//应用: 计算器</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">int</span> input = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>(*p[<span class="number">5</span>])(<span class="type">int</span> x, <span class="type">int</span> y) = &#123; <span class="number">0</span>, add, sub, mul, div &#125;; <span class="comment">//转移表</span></span><br><span class="line"><span class="keyword">while</span> (input) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 1:add           2:sub \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 3:mul           4:div \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line"><span class="keyword">if</span> ((input &lt;= <span class="number">4</span> &amp;&amp; input &gt;= <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入操作数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">ret = (*p[input])(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入有误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指向函数指针数组的指针 (了解)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//函数指针pfun</span></span><br><span class="line"> <span class="type">void</span> (*pfun)(<span class="type">const</span> <span class="type">char</span>*) = test;</span><br><span class="line"> <span class="comment">//函数指针的数组pfunArr</span></span><br><span class="line"> <span class="type">void</span> (*pfunArr[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>* str);</span><br><span class="line"> pfunArr[<span class="number">0</span>] = test;</span><br><span class="line"> <span class="comment">//指向函数指针数组pfunArr的指针ppfunArr</span></span><br><span class="line"> <span class="type">void</span> (*(*ppfunArr)[<span class="number">5</span>])(<span class="type">const</span> <span class="type">char</span>*) = &amp;pfunArr;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><blockquote><p>回调函数就是一个通过函数指针调用的函数。</p><p>如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。</p><p>回调函数不是由该函数的实现方直接调用，</p><p>而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qosrt快排</span></span><br><span class="line"><span class="comment">//qosrt函数的使用者得实现一个比较函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">int_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* p1, <span class="type">const</span> <span class="type">void</span>* p2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (*(<span class="type">int</span>*)p1 - *(<span class="type">int</span>*)p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">qsort(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), <span class="keyword">sizeof</span>(<span class="type">int</span>), int_cmp);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数 + 冒泡 模拟快排</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">int_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* p1, <span class="type">const</span> <span class="type">void</span>* p2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (*(<span class="type">int</span>*)p1 - *(<span class="type">int</span>*)p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _swap(<span class="type">void</span>* p1, <span class="type">void</span>* p2, <span class="type">int</span> size) &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">char</span> tmp = *((<span class="type">char</span>*)p1 + i);</span><br><span class="line">*((<span class="type">char</span>*)p1 + i) = *((<span class="type">char</span>*)p2 + i);</span><br><span class="line">*((<span class="type">char</span>*)p2 + i) = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">void</span>* base, <span class="type">int</span> count, <span class="type">int</span> size, <span class="type">int</span>(*cmp)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; count - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp((<span class="type">char</span>*)base + j * size, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * size) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">_swap((<span class="type">char</span>*)base + j * size, (<span class="type">char</span>*)base + (j + <span class="number">1</span>) * size, size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//char *arr[] = &#123;&quot;aaaa&quot;,&quot;dddd&quot;,&quot;cccc&quot;,&quot;bbbb&quot;&#125;;</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">bubble(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]), <span class="keyword">sizeof</span>(<span class="type">int</span>), int_cmp);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-11-一些笔试题"><a href="#6-11-一些笔试题" class="headerlink" title="6.11 一些笔试题"></a>6.11 一些笔试题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数组名的意义：</span></span><br><span class="line"><span class="comment">* 1. sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小。</span></span><br><span class="line"><span class="comment">* 2. &amp; 数组名，这里的数组名表示整个数组，取出的是整个数组的地址。</span></span><br><span class="line"><span class="comment">* 3. 除此之外所有的数组名都表示首元素的地址。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a)); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">0</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*a)); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">1</span>])); <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*&amp;a)); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>])); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符数组</span></span><br><span class="line"><span class="type">char</span> arr[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr + <span class="number">0</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*arr)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">1</span>])); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr)); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>])); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">// 随机值</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr)); <span class="comment">//7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr + <span class="number">0</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*arr)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">1</span>])); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr + <span class="number">0</span>)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*arr)); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(arr[<span class="number">1</span>])); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr + <span class="number">1</span>)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*p)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(p[<span class="number">0</span>])); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//4或8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p)); <span class="comment">//6</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p + <span class="number">1</span>)); <span class="comment">//5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(*p)); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(p[<span class="number">0</span>])); <span class="comment">//err</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p + <span class="number">1</span>)); <span class="comment">//随机值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(&amp;p[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a)); <span class="comment">//48</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>])); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>])); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*(a[<span class="number">0</span>] + <span class="number">1</span>))); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a + <span class="number">1</span>)); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*(a + <span class="number">1</span>))); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>] + <span class="number">1</span>)); <span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*(&amp;a[<span class="number">0</span>] + <span class="number">1</span>))); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(*a)); <span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a[<span class="number">3</span>])); <span class="comment">//16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 2,5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(a + <span class="number">1</span>), *(ptr - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体的大小是20个字节</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="type">int</span> Num;</span><br><span class="line"><span class="type">char</span>* pcName;</span><br><span class="line"><span class="type">short</span> sDate;</span><br><span class="line"><span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line"><span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;*p;</span><br><span class="line"><span class="comment">//假设p 的值为0x100000。 如下表表达式的值分别为多少？</span></span><br><span class="line"><span class="comment">//已知，结构体Test类型的变量大小是20个字节</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, p + <span class="number">0x1</span>); <span class="comment">//0000000000000020</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>); <span class="comment">//0000000000000001</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>); <span class="comment">//0000000000000004</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 4,2000000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;a + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)((<span class="type">int</span>)a + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x,%x&quot;</span>, ptr1[<span class="number">-1</span>], *ptr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123; (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>) &#125;;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 00000000,0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>(*p)[<span class="number">5</span>];</span><br><span class="line">p = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p,%d\n&quot;</span>, &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>], &amp;p[<span class="number">4</span>][<span class="number">2</span>] - &amp;a[<span class="number">4</span>][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 10,5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="type">int</span>* ptr1 = (<span class="type">int</span>*)(&amp;aa + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>* ptr2 = (<span class="type">int</span>*)(*(aa + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, *(ptr1 - <span class="number">1</span>), *(ptr2 - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//感觉现阶段无需学这么深, 考研够用即可</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span> *a[] = &#123;<span class="string">&quot;work&quot;</span>,<span class="string">&quot;at&quot;</span>,<span class="string">&quot;alibaba&quot;</span>&#125;;</span><br><span class="line"> <span class="type">char</span>**pa = a;</span><br><span class="line"> pa++;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *pa);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//感觉现阶段无需学这么深, 考研够用即可</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">char</span> *c[] = &#123;<span class="string">&quot;ENTER&quot;</span>,<span class="string">&quot;NEW&quot;</span>,<span class="string">&quot;POINT&quot;</span>,<span class="string">&quot;FIRST&quot;</span>&#125;;</span><br><span class="line"> <span class="type">char</span>**cp[] = &#123;c+<span class="number">3</span>,c+<span class="number">2</span>,c+<span class="number">1</span>,c&#125;;</span><br><span class="line"> <span class="type">char</span>***cpp = cp;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, **++cpp);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *--*++cpp+<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *cpp[<span class="number">-2</span>]+<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cpp[<span class="number">-1</span>][<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="七、结构体"><a href="#七、结构体" class="headerlink" title="七、结构体"></a>七、结构体</h1><h2 id="7-1-结构体声明"><a href="#7-1-结构体声明" class="headerlink" title="7.1 结构体声明"></a>7.1 结构体声明</h2><blockquote><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 结构体声明</span></span><br><span class="line"><span class="comment">*  struct tag &#123;</span></span><br><span class="line"><span class="comment">*     member-list; // 局部变量</span></span><br><span class="line"><span class="comment">*  &#125;variable-list;  //全局变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>]; <span class="comment">//注意分号</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">double</span> average;</span><br><span class="line">&#125;student_number; <span class="comment">//全局变量, 注意分号</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">borrow</span>;</span> <span class="comment">//结构体嵌套, 结构体内的类型可以为其他结构体</span></span><br><span class="line"><span class="type">int</span> year;</span><br><span class="line">&#125; book_name;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体声明</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;p1; <span class="comment">//声明类型的同时定义变量p1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p2</span>;</span> <span class="comment">//定义结构体变量p2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：定义变量的同时赋初值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p3</span> =</span> &#123; x, y &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span> <span class="comment">//类型声明</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">15</span>];<span class="comment">//名字</span></span><br><span class="line"><span class="type">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span> =</span> &#123; <span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span> &#125;;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体嵌套初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;n1 = &#123; <span class="number">10</span>, &#123;<span class="number">4</span>,<span class="number">5</span>&#125;, <span class="literal">NULL</span> &#125;; <span class="comment">//结构体嵌套初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">n2</span> =</span> &#123; <span class="number">20</span>, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;, <span class="literal">NULL</span> &#125;;<span class="comment">//结构体嵌套初始化</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-2-结构体成员访问"><a href="#7-2-结构体成员访问" class="headerlink" title="7.2 结构体成员访问"></a>7.2 结构体成员访问</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体成员访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> Stu* ps)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;name = %s   age = %d\n&quot;</span>, (*ps).name, (*ps).age);</span><br><span class="line"><span class="comment">//使用结构体指针访问指向对象的成员</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;name = %s   age = %d\n&quot;</span>, ps-&gt;name, ps-&gt;age); <span class="comment">//推荐</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span> =</span> &#123; <span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span> &#125;;</span><br><span class="line">print(&amp;s); <span class="comment">//结构体地址传参, 传址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="7-3-结构体传参"><a href="#7-3-结构体传参" class="headerlink" title="7.3 结构体传参"></a>7.3 结构体传参</h2><ul><li>传值 or 传址 ?</li></ul><p>首选传址</p><p>函数传参的时候，参数是需要压栈的。</p><p>如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降</p><blockquote><p>说白了就是, </p><p>如果传值的话, 调用函数的时候就要新建一个跟结构体大小相等的变量, 开辟一个跟结构体大小相等的空间, 增大没必要的性能损耗</p><p>而且形参的改变无法改变实参, 有些功能函数传值没意义, 也对原结构体无法进行修改</p><p>如果传址就好办了, 直接对地址进行操作, 无需开辟另一个空间, 而且也可以直接对实参进行操作, 一句多得</p><p>！！！！！不要恐惧指针！！！！！</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体传参</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;, <span class="number">1000</span> &#125;;</span><br><span class="line"><span class="comment">//结构体传参, 传值 (性能损耗)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print1</span><span class="params">(<span class="keyword">struct</span> S s)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体地址传参, 传址 (推荐)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="keyword">struct</span> S* ps)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ps-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">print1(s); <span class="comment">//传结构体值</span></span><br><span class="line">print2(&amp;s); <span class="comment">//传结构体地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="八、数据的存储"><a href="#八、数据的存储" class="headerlink" title="八、数据的存储"></a>八、数据的存储</h1><h2 id="8-1-数据类型"><a href="#8-1-数据类型" class="headerlink" title="8.1 数据类型"></a>8.1 数据类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整形家族</span></span><br><span class="line"><span class="type">char</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span></span><br><span class="line"><span class="type">signed</span> <span class="type">char</span></span><br><span class="line"><span class="type">short</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>[<span class="type">int</span>]</span><br><span class="line"><span class="type">signed</span> <span class="type">short</span>[<span class="type">int</span>]</span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="type">signed</span> <span class="type">int</span></span><br><span class="line"><span class="type">long</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>[<span class="type">int</span>]</span><br><span class="line"><span class="type">signed</span> <span class="type">long</span>[<span class="type">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数家族</span></span><br><span class="line"><span class="type">float</span></span><br><span class="line"><span class="type">double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造类型</span></span><br><span class="line">数组类型</span><br><span class="line">结构体类型 <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">枚举类型 <span class="title">enum</span></span></span><br><span class="line"><span class="class">联合类型 <span class="title">union</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//指针类型</span></span><br><span class="line"><span class="class"><span class="title">int</span>* <span class="title">pi</span>;</span></span><br><span class="line"><span class="type">char</span>* pc;</span><br><span class="line"><span class="type">float</span>* pf;</span><br><span class="line"><span class="type">void</span>* pv;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空类型</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* void 表示空类型（无类型）</span></span><br><span class="line"><span class="comment">* 通常应用于函数的返回类型、函数的参数、指针类型</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h2 id="8-2-整型在内存中的存储"><a href="#8-2-整型在内存中的存储" class="headerlink" title="8.2 整型在内存中的存储"></a>8.2 整型在内存中的存储</h2><p>计算机中的整数有三种表示方法，即原码、反码和补码。</p><p>三种表示方法均有<strong>符号位</strong>和<strong>数值位</strong>两部分，符号位都是用0表示“正”，用1表示“负”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 原码</span></span><br><span class="line"><span class="comment">* 直接将二进制按照正负数的形式翻译成二进制就可以。</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 反码</span></span><br><span class="line"><span class="comment">* 将原码的符号位不变，其他位依次按位取反就可以得到了</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 补码</span></span><br><span class="line"><span class="comment">* 反码+1就得到补码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>正数的原、反、补码都相同。</strong></p><p><strong>对于整形来说：数据存放内存中其实存放的是补码。</strong></p><blockquote><p>在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；</p><p>同时，加法和减法也可以统一处理（<strong>CPU****只有加法器</strong>）此外，补码与原码相互转换，其运算过程</p><p>是相同的，不需要额外的硬件电路。</p></blockquote><h3 id="大端小端"><a href="#大端小端" class="headerlink" title="大端小端"></a>大端小端</h3><blockquote><p>大端（存储）模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中；</p><p>小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位,，保存在内存的高地址中。</p></blockquote><p>在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为 8 bit。但是在C语言中除了 8 bit 的 char 之外，还有 16 bit 的 short 型，32 bit 的 long 型（要看具体的编译器），另外，对于位数大于 8 位的处理器，例如 16 位或者 32 位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。</p><p>例如：一个 16 bit 的 short 型 <code>x</code> ，在内存中的地址为 <code>0x0010</code> ， <code>x</code> 的值为 <code>0x1122</code> ，那么 <code>0x11</code> 为高字节， <code>0x22</code> 为低字节。对于大端模式，就将 <code>0x11</code> 放在低地址中，即 <code>0x0010</code> 中， <code>0x22</code> 放在高地址中，即 <code>0x0011</code> 中。小端模式，刚好相反。我们常用的 <code>X86</code> 结构是小端模式，而 <code>KEIL C51</code> 则为大端模式。很多的 <code>ARM</code>，<code>DSP</code> 都为小端模式。有些 <code>ARM</code> 处理器还可以由硬件来选择是大端模式还是小端模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请简述大端字节序和小端字节序的概念，设计一个小程序来判断当前机器的字节序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (*(<span class="type">char</span>*)&amp;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> ret = check_sys();</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">&#125;un;</span><br><span class="line">un.i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> un.c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: a = -1, b = -1, c = 255</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="type">signed</span> <span class="type">char</span> b = <span class="number">-1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 4294967168</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">-128</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 4294967168</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">128</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: -10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">-20</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i + j);</span><br><span class="line"><span class="comment">//按照补码的形式进行运算，最后格式化成为有符号整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4294933570</span></span><br><span class="line"><span class="number">4294933569</span></span><br><span class="line"><span class="number">4294933568</span></span><br><span class="line"><span class="number">4294933567</span></span><br><span class="line"><span class="number">4294933566</span></span><br><span class="line"><span class="number">4294933565</span></span><br><span class="line"><span class="number">4294933564</span></span><br><span class="line"><span class="number">4294933563</span></span><br><span class="line"><span class="number">4294933562</span></span><br><span class="line"><span class="number">4294933561</span></span><br><span class="line"><span class="number">4294933560</span></span><br><span class="line"><span class="number">4294933559</span></span><br><span class="line"><span class="number">4294933558</span></span><br><span class="line"><span class="number">4294933557</span></span><br><span class="line"><span class="number">4294933556</span></span><br><span class="line"><span class="number">4294933555</span></span><br><span class="line"><span class="number">4294933554</span></span><br><span class="line"><span class="number">4294933553</span></span><br><span class="line"><span class="number">4294933552</span></span><br><span class="line"><span class="number">4294933551</span></span><br><span class="line"><span class="number">4294933550</span></span><br><span class="line"><span class="number">4294933549</span></span><br><span class="line"><span class="number">4294933548</span></span><br><span class="line"><span class="number">4294933547</span></span><br><span class="line"><span class="number">4294933546</span></span><br><span class="line"><span class="number">4294933545</span></span><br><span class="line"><span class="number">4294933544</span></span><br><span class="line"><span class="number">4294933543</span></span><br><span class="line"><span class="number">4294933542</span></span><br><span class="line"><span class="number">4294933541</span></span><br><span class="line"><span class="number">4294933540</span></span><br><span class="line"><span class="number">4294933539</span></span><br><span class="line"><span class="number">4294933538</span></span><br><span class="line"><span class="number">4294933537</span></span><br><span class="line"><span class="number">4294933536</span></span><br><span class="line"><span class="number">4294933535</span></span><br><span class="line"><span class="number">4294933534</span></span><br><span class="line"><span class="number">4294933533</span></span><br><span class="line"><span class="number">4294933532</span></span><br><span class="line"><span class="number">4294933531</span></span><br><span class="line"><span class="number">4294933530</span></span><br><span class="line"><span class="number">4294933529</span></span><br><span class="line"><span class="number">4294933528</span></span><br><span class="line"><span class="number">4294933527</span></span><br><span class="line"><span class="number">4294933526</span></span><br><span class="line"><span class="number">4294933525</span></span><br><span class="line"><span class="number">4294933524</span></span><br><span class="line"><span class="number">4294933523</span></span><br><span class="line"><span class="number">4294933522</span></span><br><span class="line"><span class="number">4294933521</span></span><br><span class="line"><span class="number">4294933520</span></span><br><span class="line"><span class="number">4294933519</span></span><br><span class="line"><span class="number">4294933518</span></span><br><span class="line"><span class="number">4294933517</span></span><br><span class="line"><span class="number">4294933516</span></span><br><span class="line"><span class="number">4294933515</span></span><br><span class="line"><span class="number">4294933514</span></span><br><span class="line"><span class="number">4294933513</span></span><br><span class="line"><span class="number">4294933512</span></span><br><span class="line"><span class="number">4294933511</span></span><br><span class="line"><span class="number">4294933510</span></span><br><span class="line"><span class="number">4294933509</span></span><br><span class="line"><span class="number">4294933508</span></span><br><span class="line"><span class="number">4294933507</span></span><br><span class="line"><span class="number">4294933506</span></span><br><span class="line"><span class="number">4294933505</span></span><br><span class="line"><span class="number">4294933504</span></span><br><span class="line"><span class="number">4294933503</span></span><br><span class="line"><span class="number">4294933502</span></span><br><span class="line"><span class="number">4294933501</span></span><br><span class="line"><span class="number">4294933500</span></span><br><span class="line"><span class="number">4294933499</span></span><br><span class="line"><span class="number">4294933498</span></span><br><span class="line"><span class="number">4294933497</span></span><br><span class="line"><span class="number">4294933496</span></span><br><span class="line"><span class="number">4294933495</span></span><br><span class="line"><span class="number">4294933494</span></span><br><span class="line"><span class="number">4294933493</span></span><br><span class="line"><span class="number">4294933492</span></span><br><span class="line"><span class="number">4294933491</span></span><br><span class="line"><span class="number">4294933490</span></span><br><span class="line"><span class="number">4294933489</span></span><br><span class="line"><span class="number">4294933488</span></span><br><span class="line"><span class="number">4294933487</span></span><br><span class="line"><span class="number">4294933486</span></span><br><span class="line"><span class="number">4294933485</span></span><br><span class="line"><span class="number">4294933484</span></span><br><span class="line"><span class="number">4294933483</span></span><br><span class="line"><span class="number">4294933482</span></span><br><span class="line"><span class="number">4294933481</span></span><br><span class="line"><span class="number">4294933480</span></span><br><span class="line"><span class="number">4294933479</span></span><br><span class="line"><span class="number">4294933478</span></span><br><span class="line"><span class="number">4294933477</span></span><br><span class="line"><span class="number">4294933476</span></span><br><span class="line"><span class="number">4294933475</span></span><br><span class="line"><span class="number">4294933474</span></span><br><span class="line"><span class="number">4294933473</span></span><br><span class="line"><span class="number">4294933472</span></span><br><span class="line"><span class="number">4294933471</span></span><br><span class="line"><span class="number">4294933470</span></span><br><span class="line"><span class="number">4294933469</span></span><br><span class="line"><span class="number">4294933468</span></span><br><span class="line"><span class="number">4294933467</span></span><br><span class="line"><span class="number">4294933466</span></span><br><span class="line"><span class="number">4294933465</span></span><br><span class="line"><span class="number">4294933464</span></span><br><span class="line"><span class="number">4294933463</span></span><br><span class="line"><span class="number">4294933462</span></span><br><span class="line"><span class="number">4294933461</span></span><br><span class="line"><span class="number">4294933460</span></span><br><span class="line"><span class="number">4294933459</span></span><br><span class="line"><span class="number">4294933458</span></span><br><span class="line"><span class="number">4294933457</span></span><br><span class="line"><span class="number">4294933456</span></span><br><span class="line"><span class="number">4294933455</span></span><br><span class="line"><span class="number">4294933454</span></span><br><span class="line"><span class="number">4294933453</span></span><br><span class="line"><span class="number">4294933452</span></span><br><span class="line"><span class="number">4294933451</span></span><br><span class="line"><span class="number">4294933450</span></span><br><span class="line"><span class="number">4294933449</span></span><br><span class="line"><span class="number">4294933448</span></span><br><span class="line"><span class="number">4294933447</span></span><br><span class="line"><span class="number">4294933446</span></span><br><span class="line"><span class="number">4294933445</span></span><br><span class="line"><span class="number">4294933444</span></span><br><span class="line"><span class="number">4294933443</span></span><br><span class="line"><span class="number">4294933442</span></span><br><span class="line"><span class="number">4294933441</span></span><br><span class="line"><span class="number">4294933440</span></span><br><span class="line"><span class="number">4294933439</span></span><br><span class="line"><span class="number">4294933438</span></span><br><span class="line"><span class="number">4294933437</span></span><br><span class="line"><span class="number">4294933436</span></span><br><span class="line"><span class="number">4294933435</span></span><br><span class="line"><span class="number">4294933434</span></span><br><span class="line"><span class="number">4294933433</span></span><br><span class="line"><span class="number">4294933432</span></span><br><span class="line"><span class="number">4294933431</span></span><br><span class="line"><span class="number">4294933430</span></span><br><span class="line"><span class="number">4294933429</span></span><br><span class="line"><span class="number">4294933428</span></span><br><span class="line"><span class="number">4294933427</span></span><br><span class="line"><span class="number">4294933426</span></span><br><span class="line"><span class="number">4294933425</span></span><br><span class="line"><span class="number">4294933424</span></span><br><span class="line"><span class="number">4294933423</span></span><br><span class="line"><span class="number">4294933422</span></span><br><span class="line"><span class="number">4294933421</span></span><br><span class="line"><span class="number">4294933420</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 255</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">a[i] = <span class="number">-1</span> - i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">strlen</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出: 无限循环 hello world</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt;= <span class="number">255</span>;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8-3-浮点型在内存中的存储"><a href="#8-3-浮点型在内存中的存储" class="headerlink" title="8.3 浮点型在内存中的存储"></a>8.3 浮点型在内存中的存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="comment">/* n的值为：9</span></span><br><span class="line"><span class="comment"> * *pFloat的值为：0.000000</span></span><br><span class="line"><span class="comment"> * num的值为：1091567616</span></span><br><span class="line"><span class="comment"> * *pFloat的值为：9.000000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">9</span>;</span><br><span class="line"><span class="type">float</span>* pFloat = (<span class="type">float</span>*)&amp;n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n的值为：%d\n&quot;</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>, *pFloat);</span><br><span class="line">*pFloat = <span class="number">9.0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num的值为：%d\n&quot;</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pFloat的值为：%f\n&quot;</span>, *pFloat);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任意一个二进制浮点数 <code>V</code> 可以表示成下面的形式:</p><ul><li><p>(-1)^S * M * 2^E</p></li><li><p>(-1)^s表示符号位，当s&#x3D;0，V为正数；当s&#x3D;1，V为负数。</p></li><li><p>M表示有效数字，大于等于1，小于2。</p></li><li><p>2^E表示指数位。</p></li></ul><p>十进制的 <code>5.0</code>，写成二进制是 <code>101.0</code> ，相当于 <code>1.01×2^2 </code>。</p><p>那么，按照上面 <code>V</code> 的格式，可以得出 <code>s=0，M=1.01，E=2</code>。</p><p>十进制的 <code>-5.0</code>，写成二进制是 <code>-101.0</code> ，相当于 <code>-1.01×2^2 </code>。那么 <code>s=1，M=1.01，E=2</code>。</p><p>对于 32 位的浮点数，最高的 1 位是符号位 s，接着的 8 位是指数 E，剩下的 23 位为有效数字 M。</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101183208207.png" alt="float在内存中的存储"></p><p>对于 64 位的浮点数，最高的 1 位是符号位 S，接着的 11 位是指数 E，剩下的 52 位为有效数字 M。</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101183346779.png" alt="double在内存中存储"></p><p>在计算机内部保存 M 时，默认这个数的第一位总是 1，因此可以被舍去，只保存后面的<code>xxxxxx</code>部分。</p><p>比如保存 1.01 的时候，只保存 01，等到读取的时候，再把第一位的 1 加上去。这样做的目的，是节省 1 位有效数字。</p><p>以 32 位浮点数为例，留给 M 只有 23 位，将第一位的 1 舍去以后，等于可以保存 24 位有效数字。</p><p><strong>至于指数 E，情况就比较复杂。</strong></p><p><strong>首先，E 为一个无符号整数（unsigned int）</strong></p><p>这意味着，如果 E 为 8 位，它的取值范围为 <code>0~255</code>；如果 E 为 11 位，它的取值范围为 <code>0~2047</code>。</p><p>但是，我们知道，科学计数法中的E是可以出现负数的，</p><p>所以 IEEE 754 规定，存入内存时 E 的真实值必须再加上一个中间数，</p><p>对于 8 位的 E，这个中间数是 127；对于 11 位的 E，这个中间数是 1023。</p><p>比如，2^10 的 E 是 10，所以保存成 32 位浮点数时，必须保存成 <code>10+127=137</code>，即 <code>10001001</code>。</p><p>然后，指数E从内存中取出还可以再分成三种情况：</p><ul><li><strong>E 不全为 0 或不全为 1</strong></li></ul><p>这时，浮点数就采用下面的规则表示，</p><p>即指数 E 的计算值减去 127（或1023），得到真实值，再将有效数字 M 前加上第一位的 1。</p><p>比如：</p><p>0.5（1&#x2F;2）的二进制形式为 0.1，由于规定正数部分必须为 1，即将小数点右移 1 位，则为 1.0*2^(-1)，其阶码为 <code>-1+127=126</code>，</p><p>表示为 <code>01111110</code>，而尾数 1.0 去掉整数部分为 0，补齐 0 到 23 位 <code>00000000000000000000000</code>，</p><p>则其二进制表示形式为:</p><blockquote><p> 0 01111110 00000000000000000000000</p></blockquote><ul><li><strong>E 全为 0</strong></li></ul><p>这时，浮点数的指数E等于 1-127（或者1-1023）即为真实值，</p><p>有效数字 M 不再加上第一位的1，而是还原为 <code>0.xxxxxx</code> 的小数。这样做是为了表示 ±0 ，以及接近于 0 的很小的数字。</p><ul><li><strong>E全为 1</strong></li></ul><p>这时，如果有效数字 M 全为 0，表示 <code>±无穷大</code>（正负取决于符号位 s）；</p><p>下面，让我们回到一开始的问题：为什么 <code>0x00000009</code> 还原成浮点数，就成了 <code>0.000000</code> ？</p><p>首先，将 <code>0x00000009</code> 拆分，得到第一位符号位 s&#x3D;0，后面 8 位的指数 E&#x3D;00000000 ，</p><p>最后 23 位的有效数字 <code>M=000 0000 0000 0000 0000 1001</code>。</p><blockquote><p>9 -&gt; 0000 0000 0000 0000 0000 0000 0000 1001</p></blockquote><p>由于指数 E 全为 0，所以符合上一节的第二种情况。因此，浮点数 V 就写成：</p><blockquote><p>V&#x3D;(-1)^0 × 0.00000000000000000001001×2^(-126)&#x3D;1.001×2^(-146)</p></blockquote><p>显然，V 是一个很小的接近于 0 的正数，所以用十进制小数表示就是 <code>0.000000</code>。</p><p>再看例题的第二部分。</p><p>请问浮点数 9.0，如何用二进制表示？还原成十进制又是多少？</p><p>首先，浮点数 9.0 等于二进制的 1001.0，即 <code>1.001×2^3</code>。</p><blockquote><p>9.0 -&gt; 1001.0 -&gt;(-1)^01.0012^3 -&gt; s&#x3D;0, M&#x3D;1.001,E&#x3D;3+127&#x3D;130</p></blockquote><p>那么，第一位的符号位 s&#x3D;0，有效数字 M 等于 001 后面再加 20 个 0，凑满 23 位，指数 E 等于 <code>3+127=130</code>，即 <code>10000010</code>。</p><p>所以，写成二进制形式，应该是 s+E+M，即</p><blockquote><p> 0 10000010 001 0000 0000 0000 0000 0000</p></blockquote><p>这个 32 位的二进制数，还原成十进制，正是 <code>1091567616 </code>。</p>]]></content>
      
      
      <categories>
          
          <category> 408 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 408 </tag>
            
            <tag> 复习 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly美化之路（二）</title>
      <link href="/2022/12/29/Butterfly%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/12/29/Butterfly%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Butterfly美化之路（二）"><a href="#Butterfly美化之路（二）" class="headerlink" title="Butterfly美化之路（二）"></a>Butterfly美化之路（二）</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我的博客使用的是 <code>Hexo</code> + <code>GitHub</code> 搭建在线博客，主题用的是 <code>Butterfly</code>，教程及官方文档均可在网上找到，我只是在这里记录一些自己的感受，以防以后玩崩了找不到回家的路</p><p>**本文中，如果没有特殊说明，修改的文件一律为 <em>主题配置文件</em> **</p><p>参考文档:</p><p>Butterfly安装文档:<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>Fomalhaut的分享: <a href="https://www.fomal.cc/">https://www.fomal.cc/</a></p><p>Akilarの糖果屋: <a href="https://akilar.top/">https://akilar.top/</a></p><hr><h2 id="二、一图流"><a href="#二、一图流" class="headerlink" title="二、一图流"></a>二、一图流</h2><p>在 <code>source</code> 文件夹下新建一个文件夹 <code>css</code>，该文件夹用于存放自定义的 css 样式，再新建一个名为 <code>custom.css</code>，</p><p>在里面写入以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚与头图透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>主题配置文件</strong> <code>inject.head</code> 下添加引入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101212501304.png" alt="引入自定义样式文件"></p><p>将之前设置的背景图置空, 避免冗余加载</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101212712442.png" alt="置空设置"></p><hr><h2 id="三、新增留言板"><a href="#三、新增留言板" class="headerlink" title="三、新增留言板"></a>三、新增留言板</h2><p>新建留言板路径</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page comments</span><br></pre></td></tr></table></figure><p>导航栏添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">留言板:</span> <span class="string">/comments/</span> <span class="string">||fas</span> <span class="string">fa-envelope-open</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202140800243.png" alt="导航栏添加留言板"></p><p>配置文件添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># envelope_comment</span><br><span class="line"># see https://akilar.top/posts/e2d3c450/</span><br><span class="line">envelope_comment:</span><br><span class="line">  enable: true #控制开关</span><br><span class="line">  custom_pic:</span><br><span class="line">    cover: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg #信笺头部图片</span><br><span class="line">    line: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png #信笺底部图片</span><br><span class="line">    beforeimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png # 信封前半部分</span><br><span class="line">    afterimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png # 信封后半部分</span><br><span class="line">  message: #信笺正文，多行文本，写法如下</span><br><span class="line">    - 有什么想问的？</span><br><span class="line">    - 有什么想说的？</span><br><span class="line">    - 有什么想吐槽的？</span><br><span class="line">    - 哪怕是有什么想吃的，都可以告诉我哦~</span><br><span class="line">  bottom: 自动书记人偶竭诚为您服务！ #仅支持单行文本</span><br><span class="line">  height: #1050px，信封划出的高度</span><br><span class="line">  path: #【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span><br><span class="line">  front_matter: #【可选】comments页面的 front_matter 配置</span><br><span class="line">    title: 留言板</span><br><span class="line">    comments: true</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101213511795.png" alt="留言板设置"></p><hr><h2 id="四、页脚GitHub徽标"><a href="#四、页脚GitHub徽标" class="headerlink" title="四、页脚GitHub徽标"></a>四、页脚GitHub徽标</h2><p>安装插件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># footer_beautify</span></span><br><span class="line"><span class="comment"># 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/)</span></span><br><span class="line"><span class="comment"># 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/)</span></span><br><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#屏蔽页面</span></span><br><span class="line">  <span class="comment"># - /posts/</span></span><br><span class="line">  <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项（看你喜欢哪个，最好下载下来放到自己的项目中不然会增加我网站的负载）</span></span><br><span class="line">  <span class="comment"># 这是我的</span></span><br><span class="line">  <span class="comment"># runtime_js: https://www.fomal.cc/static/js/runtime.js</span></span><br><span class="line">  <span class="comment"># runtime_css: https://www.fomal.cc/static/css/runtime.min.css</span></span><br><span class="line">  <span class="comment"># 这是店长的</span></span><br><span class="line">  <span class="attr">runtime_js:</span> <span class="string">/js/runtime.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">/css/runtime.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">0</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v6.3.0</span> <span class="comment">#徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v4.5.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用多线部署，主线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://dashboard.4everland.org/</span></span><br><span class="line">      <span class="comment"># https://img.shields.io/badge/Hosted-4EVERLAND-3FE2C1?style=flat&amp;logo=IPFS</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-4EVERLAND-22DDDD?style=flat&amp;logo=IPFS</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用多线部署，备用线路托管于4EVERLAND</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br></pre></td></tr></table></figure><p><code>runtime.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*电子钟字体*/</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;UnidreamLED&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf&quot;</span>);</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#runtime</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding-inline</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>);</span><br><span class="line">    <span class="comment">/*font-family: &#x27;UnidreamLED&#x27;;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#runtime</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#28b4c8</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">28</span>,<span class="number">69</span>,<span class="number">218</span>,<span class="number">0.71</span>);</span><br><span class="line">    <span class="attribute">animation</span>: flashlight <span class="number">1s</span> linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*悬停显示徽标提示语*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.github-badge</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-title);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--text-bg-hover);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-tag">a</span><span class="selector-class">.github-badge</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">18</span>,<span class="number">18</span>,<span class="number">18</span>,<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> flashlight &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> flashlight &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> flashlight &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> flashlight &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runtime.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> create_time = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-12-1 00:00:00&#x27;</span>).<span class="title function_">getTime</span>() / <span class="number">1000</span>); <span class="comment">//在此行修改建站时间</span></span><br><span class="line">    <span class="keyword">let</span> timestamp = <span class="title class_">Math</span>.<span class="title function_">round</span>((<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()) / <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">let</span> second = timestamp - create_time;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nol = <span class="keyword">function</span>(<span class="params">h</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> h&gt;<span class="number">9</span>?<span class="attr">h</span>:<span class="string">&#x27;0&#x27;</span>+h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>) &#123;</span><br><span class="line">        time[<span class="number">0</span>] = <span class="built_in">parseInt</span>(second / (<span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">        second %= <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">24</span> * <span class="number">3600</span>) &#123;</span><br><span class="line">        time[<span class="number">1</span>] = <span class="built_in">parseInt</span>(second / (<span class="number">24</span> * <span class="number">3600</span>));</span><br><span class="line">        second %= <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">3600</span>) &#123;</span><br><span class="line">        time[<span class="number">2</span>] = <span class="title function_">nol</span>(<span class="built_in">parseInt</span>(second / <span class="number">3600</span>));</span><br><span class="line">        second %= <span class="number">3600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        time[<span class="number">3</span>] = <span class="title function_">nol</span>(<span class="built_in">parseInt</span>(second / <span class="number">60</span>));</span><br><span class="line">        second %= <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (second &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        time[<span class="number">4</span>] = <span class="title function_">nol</span>(second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="title class_">Number</span>(time[<span class="number">2</span>])&lt;<span class="number">22</span>) &amp;&amp; (<span class="title class_">Number</span>(time[<span class="number">2</span>])&gt;<span class="number">7</span>))&#123;</span><br><span class="line">        currentTimeHtml =<span class="string">&quot;&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://img.shields.io/badge/月华.の冒险-开始了-6adea8?style=social&amp;logo=cakephp&#x27; title=&#x27;今天会发生什么奇妙的事呢？&#x27;&gt;&lt;div id=&#x27;runtime&#x27;&gt;&quot;</span> + time[<span class="number">0</span>] + <span class="string">&#x27; YEAR &#x27;</span> + time[<span class="number">1</span>] + <span class="string">&#x27; DAYS &#x27;</span> + time[<span class="number">2</span>] + <span class="string">&#x27; : &#x27;</span> + time[<span class="number">3</span>] + <span class="string">&#x27; : &#x27;</span> + time[<span class="number">4</span>] + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        currentTimeHtml =<span class="string">&quot;&lt;img class=&#x27;boardsign&#x27; src=&#x27;https://img.shields.io/badge/月华.的冒险-有些累了-6adea8?style=social&amp;logo=coffeescript&#x27; title=&#x27;为了明天的冒险，今天先暂时休息吧&#x27;&gt;&lt;div id=&#x27;runtime&#x27;&gt;&quot;</span> + time[<span class="number">0</span>] + <span class="string">&#x27; YEAR &#x27;</span> + time[<span class="number">1</span>] + <span class="string">&#x27; DAYS &#x27;</span> + time[<span class="number">2</span>] + <span class="string">&#x27; : &#x27;</span> + time[<span class="number">3</span>] + <span class="string">&#x27; : &#x27;</span> + time[<span class="number">4</span>] + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;workboard&quot;</span>).<span class="property">innerHTML</span> = currentTimeHtml;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101214827849.png" alt="文件位置"></p><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>enable.timer</td><td>true&#x2F;false</td><td>【必选】计时器控制开关</td></tr><tr><td>enable.bdage</td><td>true&#x2F;false</td><td>【必选】徽标控制开关</td></tr><tr><td>enable_page</td><td>path</td><td>【可选】填写想要应用的页面,如根目录就填 <code>/</code>,分类页面就填 <code>/categories/</code>。若要应用于所有页面，就填 <code>all</code>，默认为<code>all</code></td></tr><tr><td>exclude</td><td>path</td><td>【可选】填写想要屏蔽的页面，可以多个。仅当 enable_page 为 <code>all</code> 时生效。写法见示例。原理是将屏蔽项的内容逐个放到当前路径去匹配，若当前路径包含任一屏蔽项，则不会挂载。</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>runtime_js</td><td>url</td><td>【必选】页脚计时器脚本，可以下载上文填写示例的链接，参照注释和<a href="https://akilar.top/posts/b941af/">教程：Native JS Timer</a>自行修改。</td></tr><tr><td>runtime_css</td><td>url</td><td>【可选】自定义样式，预留开发者接口，可自行下载。</td></tr><tr><td>swiperpara</td><td>number</td><td>【可选】若非零，则开启轮播功能，此项表示每行最多容纳徽标个数，用来应对徽标过多显得页脚拥挤的问题</td></tr><tr><td>bdageitem.link</td><td>url</td><td>【可选】页脚徽标指向的网站链接</td></tr><tr><td>bdageitem.shields</td><td>url</td><td>【必选】页脚徽标对应的API，API具体写法示例参照<a href="https://akilar.top/posts/e87ad7f8/">教程Add Github Badge</a></td></tr><tr><td>bdageitem.message</td><td>text</td><td>【可选】页脚徽标悬停时显示的信息</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】swiper的依赖</td></tr><tr><td>swiperbdage_init_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101214851803.png" alt="效果"></p><hr><h2 id="五、首页分类磁贴"><a href="#五、首页分类磁贴" class="headerlink" title="五、首页分类磁贴"></a>五、首页分类磁贴</h2><p>安装插件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">2</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Docs文档</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">/img/夏日重现3.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="number">408</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">/img/夏日重现2.jpg</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为 10 ，选填</td></tr><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path&#x2F;all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填 <code>/</code>,分类页面就填 <code>/categories/</code>。若要应用于所有页面，就填 <code>all</code>，默认为 <code>/</code></td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是 layout.type 为class，因为同一页面可能有多个 class ，此项用来确认究竟排在第几个顺位</td></tr><tr><td>column</td><td>odd&#x2F;even</td><td>【可选】显示列数，考虑到比例问题，只提供3列和4列，odd为3列， even为4列</td></tr><tr><td>row</td><td>number</td><td>【可选】显示行数，默认两行，超过行数切换为滚动显示</td></tr><tr><td>message.descr</td><td>text</td><td>分类描述,需要和你自己的文章分类一一对应。</td></tr><tr><td>message.cover</td><td>url</td><td>分类背景,需要和你自己的文章分类一一对应。</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】自定义样式，会替换默认的css链接，可以下载文档给出的cdn链接后自主修改</td></tr></tbody></table><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101204432054.png" alt="首页分类磁贴设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101204503149.png" alt="分类磁贴效果"></p><hr><h2 id="六、文章置顶滚动栏"><a href="#六、文章置顶滚动栏" class="headerlink" title="六、文章置顶滚动栏"></a>六、文章置顶滚动栏</h2><p>安装插件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">感兴趣就点进来看看吧</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为 10，选填</td></tr><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>enable_page</td><td>path&#x2F;all</td><td>【可选】填写想要应用的页面的相对路径（即路由地址）,如根目录就填 <code>/</code>,分类页面就填 <code>/categories/</code>。若要应用于所有页面，就填 <code>all</code>，默认为 all</td></tr><tr><td>timemode</td><td>date&#x2F;updated</td><td>【可选】时间显示，date 为显示创建日期，updated 为显示更新日期,默认为 date</td></tr><tr><td>layout.type</td><td>id&#x2F;class</td><td>【可选】挂载容器类型，填写 id 或 class，不填则默认为 id</td></tr><tr><td>layout.name</td><td>text</td><td>【必选】挂载容器名称</td></tr><tr><td>layout.index</td><td>0和正整数</td><td>【可选】前提是 layout.type 为 class，因为同一页面可能有多个 class，此项用来确认究竟排在第几个顺位</td></tr><tr><td>default_descr</td><td>text</td><td>默认文章描述</td></tr><tr><td>swiper_css</td><td>url</td><td>【可选】自定义的swiper依赖项css链接</td></tr><tr><td>swiper_js</td><td>url</td><td>【可选】自定义的swiper依赖项加js链接</td></tr><tr><td>custom_css</td><td>url</td><td>【可选】适配主题样式补丁</td></tr><tr><td>custom_js</td><td>url</td><td>【可选】swiper初始化方法</td></tr></tbody></table><p>使用方法: 在要使用的文章的 <code>fromt_matter</code> 中添加配置项</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span><br></pre></td></tr></table></figure><hr><h2 id="七、文章双侧栏显示"><a href="#七、文章双侧栏显示" class="headerlink" title="七、文章双侧栏显示"></a>七、文章双侧栏显示</h2><p>安装插件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-butterfly-article-double-row --save</span><br></pre></td></tr></table></figure><p>在<strong>博客配置文件</strong>中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章双侧栏显示</span></span><br><span class="line"><span class="attr">butterfly_article_double_row:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211908625.png" alt="文章双侧栏显示设置"></p><p>在 <code>custom.css</code> 中添加代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 翻页按钮居中 */</span></span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202143816511.png" alt="技术页bug修复"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101212036858.png" alt="效果"></p><hr><h2 id="八、wow-js动画"><a href="#八、wow-js动画" class="headerlink" title="八、wow.js动画"></a>八、wow.js动画</h2><p>安装插件:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wowjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制动画开关。true是打开，false是关闭</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span> <span class="comment">#过滤器优先级</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment">#移动端是否启用，默认移动端禁用</span></span><br><span class="line">  <span class="attr">animateitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">recent-post-item</span> <span class="comment">#必填项，需要添加动画的元素的class</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span> <span class="comment">#必填项，需要添加的动画</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">1s</span> <span class="comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">0s</span> <span class="comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">offset:</span> <span class="number">100</span> <span class="comment">#选填项，开始动画的距离（相对浏览器底部）</span></span><br><span class="line">      <span class="attr">iteration:</span> <span class="number">1</span> <span class="comment">#选填项，动画重复的次数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">card-widget</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span></span><br><span class="line">  <span class="attr">animate_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</span></span><br><span class="line">  <span class="attr">wow_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</span></span><br><span class="line">  <span class="attr">wow_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>备选值&#x2F;类型</th><th>释义</th></tr></thead><tbody><tr><td>enable</td><td>true&#x2F;false</td><td>【必选】控制开关</td></tr><tr><td>priority</td><td>number</td><td>【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td>mobile</td><td>true&#x2F;false</td><td>控制移动端是否启用，默认移动端禁用</td></tr><tr><td>animateitem.class</td><td>class</td><td>【可选】添加动画类名，只支持给class添加</td></tr><tr><td>animateitem.style</td><td>text</td><td>【可选】动画样式，具体类型参考<a href="https://animate.style/">animate.css</a></td></tr><tr><td>animateitem.duration</td><td>time,单位为s或ms</td><td>【可选】动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td>animateitem.delay</td><td>time,单位为s或ms</td><td>【可选】动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</td></tr><tr><td>animateitem.offset</td><td>number,单位为px</td><td>【可选】开始动画的距离（相对浏览器底部）。</td></tr><tr><td>animateitem.iteration</td><td>number,单位为s或ms</td><td>【可选】动画重复的次数</td></tr><tr><td>animate_css</td><td>URL</td><td>【可选】animate.css的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</code></td></tr><tr><td>wow_js</td><td>URL</td><td>【可选】wow.min.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</code></td></tr><tr><td>wow_init_js</td><td>URL</td><td>【可选】wow_init.js的CDN链接,默认为<code>https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</code></td></tr></tbody></table><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101210621319.png" alt="wow.js动画设置"></p><hr><h2 id="九、改变导航栏"><a href="#九、改变导航栏" class="headerlink" title="九、改变导航栏"></a>九、改变导航栏</h2><blockquote><p>如果子菜单也需要导航栏魔改请参考前言中的参考文档</p></blockquote><p>在 <code>custom.css</code> 中添加代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: fit-content <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */</span></span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">125px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211027323.png" alt="导航栏魔改设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211148936.png" alt="导航栏魔改效果"></p><hr><h2 id="十、星空背景-amp-流星特效"><a href="#十、星空背景-amp-流星特效" class="headerlink" title="十、星空背景&amp;流星特效"></a>十、星空背景&amp;流星特效</h2><p>在 <code>source/js</code> 下新建<code>universe.js</code></p><p>写入以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dark</span>(<span class="params"></span>) &#123;<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;n=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,e=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,i=<span class="number">.216</span>*n,s.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,n),s.<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>)&#123;h.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.<span class="property">length</span>,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.<span class="title function_">move</span>(),s.<span class="title function_">fadeIn</span>(),s.<span class="title function_">fadeOut</span>(),s.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">reset</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">giant</span>=<span class="title function_">m</span>(<span class="number">3</span>),<span class="variable language_">this</span>.<span class="property">comet</span>=!<span class="variable language_">this</span>.<span class="property">giant</span>&amp;&amp;!o&amp;&amp;<span class="title function_">m</span>(<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">x</span>=<span class="title function_">l</span>(<span class="number">0</span>,n-<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">y</span>=<span class="title function_">l</span>(<span class="number">0</span>,e),<span class="variable language_">this</span>.<span class="property">r</span>=<span class="title function_">l</span>(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="variable language_">this</span>.<span class="property">dx</span>=<span class="title function_">l</span>(t,<span class="number">6</span>*t)+(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="variable language_">this</span>.<span class="property">dy</span>=-<span class="title function_">l</span>(t,<span class="number">6</span>*t)-(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>),<span class="variable language_">this</span>.<span class="property">fadingOut</span>=<span class="literal">null</span>,<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacity</span>=<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacityTresh</span>=<span class="title function_">l</span>(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)),<span class="variable language_">this</span>.<span class="property">do</span>=<span class="title function_">l</span>(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeIn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingIn</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&gt;<span class="variable language_">this</span>.<span class="property">opacityTresh</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>+=<span class="variable language_">this</span>.<span class="property">do</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeOut</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;<span class="number">0</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="variable language_">this</span>.<span class="property">do</span>/<span class="number">2</span>,(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">1</span>,<span class="variable language_">this</span>.<span class="title function_">reset</span>()))&#125;,<span class="variable language_">this</span>.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(h.<span class="title function_">beginPath</span>(),<span class="variable language_">this</span>.<span class="property">giant</span>)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">comet</span>)&#123;h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="variable language_">this</span>.<span class="property">opacity</span>-<span class="variable language_">this</span>.<span class="property">opacity</span>/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>-<span class="variable language_">this</span>.<span class="property">dx</span>/<span class="number">4</span>*t,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">dy</span>/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.<span class="title function_">fill</span>()&#125;<span class="keyword">else</span> h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="variable language_">this</span>.<span class="property">r</span>,<span class="variable language_">this</span>.<span class="property">r</span>);h.<span class="title function_">closePath</span>(),h.<span class="title function_">fill</span>()&#125;,<span class="variable language_">this</span>.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">dx</span>,<span class="variable language_">this</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">dy</span>,!<span class="number">1</span>===<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">reset</span>(),(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n-n/<span class="number">4</span>||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1e3</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,i</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()*(i-t)+t&#125;<span class="title function_">f</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="keyword">function</span>(<span class="params"></span>)&#123;h=s.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].<span class="title function_">reset</span>();<span class="title function_">u</span>()&#125;(),<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;<span class="title function_">u</span>(),<span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(t)&#125;()&#125;;</span><br><span class="line"><span class="title function_">dark</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">light</span>(<span class="params"></span>) &#123;<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;n=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,e=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,i=<span class="number">.216</span>*n,s.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,n),s.<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>)&#123;h.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.<span class="property">length</span>,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.<span class="title function_">move</span>(),s.<span class="title function_">fadeIn</span>(),s.<span class="title function_">fadeOut</span>(),s.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">reset</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">giant</span>=<span class="title function_">m</span>(<span class="number">3</span>),<span class="variable language_">this</span>.<span class="property">comet</span>=!<span class="variable language_">this</span>.<span class="property">giant</span>&amp;&amp;!o&amp;&amp;<span class="title function_">m</span>(<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">x</span>=<span class="title function_">l</span>(<span class="number">0</span>,n-<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">y</span>=<span class="title function_">l</span>(<span class="number">0</span>,e),<span class="variable language_">this</span>.<span class="property">r</span>=<span class="title function_">l</span>(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="variable language_">this</span>.<span class="property">dx</span>=<span class="title function_">l</span>(t,<span class="number">6</span>*t)+(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="variable language_">this</span>.<span class="property">dy</span>=-<span class="title function_">l</span>(t,<span class="number">6</span>*t)-(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>),<span class="variable language_">this</span>.<span class="property">fadingOut</span>=<span class="literal">null</span>,<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacity</span>=<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacityTresh</span>=<span class="title function_">l</span>(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)),<span class="variable language_">this</span>.<span class="property">do</span>=<span class="title function_">l</span>(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeIn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingIn</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&gt;<span class="variable language_">this</span>.<span class="property">opacityTresh</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>+=<span class="variable language_">this</span>.<span class="property">do</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeOut</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;<span class="number">0</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="variable language_">this</span>.<span class="property">do</span>/<span class="number">2</span>,(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">1</span>,<span class="variable language_">this</span>.<span class="title function_">reset</span>()))&#125;,<span class="variable language_">this</span>.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(h.<span class="title function_">beginPath</span>(),<span class="variable language_">this</span>.<span class="property">giant</span>)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">comet</span>)&#123;h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="variable language_">this</span>.<span class="property">opacity</span>-<span class="variable language_">this</span>.<span class="property">opacity</span>/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>-<span class="variable language_">this</span>.<span class="property">dx</span>/<span class="number">4</span>*t,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">dy</span>/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.<span class="title function_">fill</span>()&#125;<span class="keyword">else</span> h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="variable language_">this</span>.<span class="property">r</span>,<span class="variable language_">this</span>.<span class="property">r</span>);h.<span class="title function_">closePath</span>(),h.<span class="title function_">fill</span>()&#125;,<span class="variable language_">this</span>.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">dx</span>,<span class="variable language_">this</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">dy</span>,!<span class="number">1</span>===<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">reset</span>(),(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n-n/<span class="number">4</span>||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1e3</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,i</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()*(i-t)+t&#125;<span class="title function_">f</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="keyword">function</span>(<span class="params"></span>)&#123;h=s.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].<span class="title function_">reset</span>();<span class="title function_">u</span>()&#125;(),<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;light&#x27;</span>&amp;&amp;<span class="title function_">u</span>(),<span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(t)&#125;()&#125;;</span><br><span class="line"><span class="title function_">light</span>()</span><br></pre></td></tr></table></figure><p>在 <code>source/css</code> 下新建 <code>universe.css</code></p><p>写入以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line"><span class="selector-id">#universe</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="comment">/* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */</span></span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>主题配置文件</strong> <code>inject.bottom</code> 下添加引入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;canvas</span> <span class="string">id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/universe.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>在<strong>主题配置文件</strong> <code>inject.head</code> 下添加引入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/universe.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211556655.png" alt="星空特效配置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211652908.png" alt="文件位置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230101211626891.png" alt="效果"></p><hr><h2 id="十一、Twikoo-评论系统"><a href="#十一、Twikoo-评论系统" class="headerlink" title="十一、Twikoo 评论系统"></a>十一、Twikoo 评论系统</h2><h3 id="11-1-后端配置"><a href="#11-1-后端配置" class="headerlink" title="11.1 后端配置"></a>11.1 后端配置</h3><blockquote><p><a href="https://twikoo.js.org/">https://twikoo.js.org/</a></p></blockquote><p>点击快速上手</p><p>Vercel 部署</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131171852376.png" alt="快速上手 Vercel 部署"></p><p>注册一个 MongoDB 账号</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172020135.png" alt="注册账号"></p><p>我是这样选的</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172228310.png" alt="选一选"></p><p>免费的</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172250738.png" alt="Free"></p><p>再这样选</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172409383.png" alt="选一选"></p><p>用户名密码要记住</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172541436.png" alt="创建数据库用户"></p><p>同意所有 IP</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172729254.png" alt="填一填"></p><p>结束</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131172752461.png" alt="结束"></p><p>无痕模式申请 Vercel 账号</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173004241.png" alt="申请Vercel账号"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173039555.png" alt="GitHub申请"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173257336.png" alt="一键部署到 Vercel"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173540345.png" alt="创建仓库, 随便命名"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173644895.png" alt="continue"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173659360.png" alt="setting"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173716032.png" alt="环境变量"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173912648.png" alt="键"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131173939717.png" alt="键"></p><p>下面要好好操作 值</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174013948.png" alt="connect"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174031005.png" alt="选一个"></p><p>操作这个字符串, 将 <code>&lt;password&gt;</code> 改成刚刚设置的自己的密码</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174109239.png" alt="对它操作"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174237415.png" alt="值"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174353823.png" alt="选择并保存"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174452316.png" alt="点这里"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174528819.png" alt="重新部署"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174844324.png" alt="重新部署完成"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131174901843.png" alt="后端配置完成"></p><hr><h3 id="11-2-前端配置"><a href="#11-2-前端配置" class="headerlink" title="11.2 前端配置"></a>11.2 前端配置</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131175028940.png" alt="点头像回到控制台"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131175053626.png" alt="进来仓库"></p><p>这一步主要是防止背墙, 但是我这里没办法了只能先不设置二级域名, 直接用下面的吧, 后期在搞大陆可以访问的</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131175221180.png" alt="设置一个二级域名"></p><p>先将就用这个一级域名</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131181503108.png" alt="一级域名"></p><p>进入<strong>主题配置文件</strong></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131181411061.png" alt="配置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131181637670.png" alt="配置"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Twikoo</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span> <span class="comment"># 懒加载, 提高一点网站性能</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Twikoo</span></span><br><span class="line"><span class="comment"># https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://twikoo-rho-brown.vercel.app/</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>记得设置后台密码</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131191816720.png" alt="预览"></p><hr><h2 id="十二、博客文章统计图"><a href="#十二、博客文章统计图" class="headerlink" title="十二、博客文章统计图"></a>十二、博客文章统计图</h2><h3 id="12-1-新建-charts-页面"><a href="#12-1-新建-charts-页面" class="headerlink" title="12.1 新建 charts 页面"></a>12.1 新建 charts 页面</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page charts</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117171612873.png" alt="新建 charts"></p><hr><h3 id="12-2-安装插件"><a href="#12-2-安装插件" class="headerlink" title="12.2 安装插件"></a>12.2 安装插件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cheerio --save</span><br></pre></td></tr></table></figure><hr><h3 id="12-3-引入-ECharts-js"><a href="#12-3-引入-ECharts-js" class="headerlink" title="12.3 引入 ECharts.js"></a>12.3 引入 ECharts.js</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/universe.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117171700260.png" alt="引入 Echarts.js"></p><hr><h3 id="12-4-文章统计代码"><a href="#12-4-文章统计代码" class="headerlink" title="12.4 文章统计代码"></a>12.4 文章统计代码</h3><p>在 <code>hexo-theme-butterfly\scripts\helpers\</code> 文件下新建 <code>charts.js</code> 文件</p><p>不要管缩进, 复制就完了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(locals)</span><br><span class="line">  <span class="keyword">const</span> post = $(<span class="string">&#x27;#posts-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> tag = $(<span class="string">&#x27;#tags-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> category = $(<span class="string">&#x27;#categories-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> htmlEncode = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> || tag.<span class="property">length</span> &gt; <span class="number">0</span> || category.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#postsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (post.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      post.<span class="title function_">after</span>(<span class="title function_">postsChart</span>(post.<span class="title function_">attr</span>(<span class="string">&#x27;data-start&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#tagsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      tag.<span class="title function_">after</span>(<span class="title function_">tagsChart</span>(tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-length&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#categoriesChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (category.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      category.<span class="title function_">after</span>(<span class="title function_">categoriesChart</span>(category.<span class="title function_">attr</span>(<span class="string">&#x27;data-parent&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (htmlEncode) &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/&amp;amp;#/g</span>, <span class="string">&#x27;&amp;#&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> locals</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postsChart</span> (startMonth) &#123;</span><br><span class="line">  <span class="keyword">const</span> startDate = <span class="title function_">moment</span>(startMonth || <span class="string">&#x27;2020-01&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> endDate = <span class="title function_">moment</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> monthMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> dayTime = <span class="number">3600</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> time = startDate; time &lt;= endDate; time += dayTime) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">post</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = post.<span class="property">date</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, monthMap.<span class="title function_">get</span>(month) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> monthArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">keys</span>()])</span><br><span class="line">  <span class="keyword">const</span> monthValueArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">values</span>()])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;postsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var postsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章发布统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;axis&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;日期&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        boundaryGap: false,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthArr&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;line&#x27;,</span></span><br><span class="line"><span class="string">        smooth: true,</span></span><br><span class="line"><span class="string">        lineStyle: &#123;</span></span><br><span class="line"><span class="string">            width: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        showSymbol: false,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        areaStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;, &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthValueArr&#125;</span>,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    postsChart.setOption(postsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      postsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    postsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (event.componentType === &#x27;series&#x27;) window.location.href = &#x27;/archives/&#x27; + event.name.replace(&#x27;-&#x27;, &#x27;/&#x27;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tagsChart</span> (len) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagArr = []</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;tags&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">tag</span>) &#123;</span><br><span class="line">    tagArr.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: tag.<span class="property">name</span>, <span class="attr">value</span>: tag.<span class="property">length</span>, <span class="attr">path</span>: tag.<span class="property">path</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  tagArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(tagArr.<span class="property">length</span>, len) || tagArr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> tagNameArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataLength; i++) &#123;</span><br><span class="line">    tagNameArr.<span class="title function_">push</span>(tagArr[i].<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tagNameArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagNameArr)</span><br><span class="line">  <span class="keyword">const</span> tagArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagArr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;tagsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var tagsChart = echarts.init(document.getElementById(&#x27;tags-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var tagsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;Top <span class="subst">$&#123;dataLength&#125;</span> 标签统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;标签&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          interval: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagNameArrJson&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;bar&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderRadius: [5, 5, 0, 0],</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        emphasis: &#123;</span></span><br><span class="line"><span class="string">          itemStyle: &#123;</span></span><br><span class="line"><span class="string">            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">              offset: 0,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(128, 255, 195)&#x27;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              offset: 1,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(1, 211, 255)&#x27;</span></span><br><span class="line"><span class="string">            &#125;])</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    tagsChart.setOption(tagsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      tagsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    tagsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoriesChart</span> (dataParent) &#123;</span><br><span class="line">  <span class="keyword">const</span> categoryArr = []</span><br><span class="line">  <span class="keyword">let</span> categoryParentFlag = <span class="literal">false</span></span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;categories&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">parent</span>) categoryParentFlag = <span class="literal">true</span></span><br><span class="line">    categoryArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: category.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">value</span>: category.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">path</span>: category.<span class="property">path</span>,</span><br><span class="line">      <span class="attr">id</span>: category.<span class="property">_id</span>,</span><br><span class="line">      <span class="attr">parentId</span>: category.<span class="property">parent</span> || <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  categoryParentFlag = categoryParentFlag &amp;&amp; dataParent === <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  categoryArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">translateListToTree</span> (data, parent) &#123;</span><br><span class="line">    <span class="keyword">let</span> tree = []</span><br><span class="line">    <span class="keyword">let</span> temp</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[index].<span class="property">parentId</span> == parent) &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = data[index];</span><br><span class="line">        temp = <span class="title function_">translateListToTree</span>(data, data[index].<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          obj.<span class="property">children</span> = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree.<span class="title function_">indexOf</span>())</span><br><span class="line">          tree.<span class="title function_">push</span>(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> categoryNameJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123; <span class="keyword">return</span> category.<span class="property">name</span> &#125;))</span><br><span class="line">  <span class="keyword">const</span> categoryArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr)</span><br><span class="line">  <span class="keyword">const</span> categoryArrParentJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">translateListToTree</span>(categoryArr, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;categoriesChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var categoriesChart = echarts.init(document.getElementById(&#x27;categories-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var categoryParentFlag = <span class="subst">$&#123;categoryParentFlag&#125;</span></span></span><br><span class="line"><span class="string">    var categoriesOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章分类统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        top: &#x27;bottom&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryNameJson&#125;</span>,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;item&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: []</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    categoriesOption.series.push(</span></span><br><span class="line"><span class="string">      categoryParentFlag ? </span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        nodeClick :false,</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;sunburst&#x27;,</span></span><br><span class="line"><span class="string">        radius: [&#x27;15%&#x27;, &#x27;90%&#x27;],</span></span><br><span class="line"><span class="string">        center: [&#x27;50%&#x27;, &#x27;55%&#x27;],</span></span><br><span class="line"><span class="string">        sort: &#x27;desc&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrParentJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderColor: &#x27;#fff&#x27;,</span></span><br><span class="line"><span class="string">          borderWidth: 2,</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            focus: &#x27;ancestor&#x27;,</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      :</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;pie&#x27;,</span></span><br><span class="line"><span class="string">        radius: [30, 80],</span></span><br><span class="line"><span class="string">        roseType: &#x27;area&#x27;,</span></span><br><span class="line"><span class="string">        label: &#123;</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          formatter: &#x27;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    categoriesChart.setOption(categoriesOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      categoriesChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    categoriesChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="12-5-使用统计图"><a href="#12-5-使用统计图" class="headerlink" title="12.5 使用统计图"></a>12.5 使用统计图</h3><p>在 <code>source\charts\index.md</code> 文件中添加以下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章发布时间统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;posts-chart&quot;</span> <span class="attr">data-start</span>=<span class="string">&quot;2021-01&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 文章标签统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tags-chart&quot;</span> <span class="attr">data-length</span>=<span class="string">&quot;10&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 文章分类统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;categories-chart&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>posts-chart</code> 的 <code>data-start=&quot;2021-01&quot;</code> 属性表示文章发布时间统计图仅显示 <code>2021-01</code> 及以后的文章数据。</li><li><code>tags-chart</code> 的 <code>data-length=&quot;10&quot;</code> 属性表示仅显示排名前 <code>10</code> 的标签。</li><li><code>categories-chart</code> 的 <code>data-parent=&quot;true&quot;</code> 属性表示 <code>有子分类</code> 时以旭日图显示分类，其他 <code>无子分类</code> 或 <code>设置为false</code> 或 <code>不设置该属性</code> 或 <code>设置为其他非true属性</code> 情况都以饼状图显示分类。</li></ul></blockquote><h4 id="在归档页使用统计图"><a href="#在归档页使用统计图" class="headerlink" title="在归档页使用统计图"></a>在归档页使用统计图</h4><p>在 <code>hexo-theme-butterfly\layout\archive.pug</code> 中修改代码, 直接复制过去就行</p><p>代码中的先后顺序会影响统计图在博客中的显示顺序</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  include ./includes/mixins/article-sort.pug</span><br><span class="line">  #archive</span><br><span class="line">    //- 在归档页使用文章分类统计图</span><br><span class="line">    &lt;div id=&quot;categories-chart&quot; data-parent=&quot;false&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    //- 在归档页使用发布时间统计图</span><br><span class="line">    &lt;div id=&quot;posts-chart&quot; data-start=&quot;2022-12&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    //- 在归档页使用标签统计图</span><br><span class="line">    &lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    - const archiveLength = findArchiveLength(fragment_cache)</span><br><span class="line">    .article-sort-title= _p(&#x27;page.articles&#x27;) + &#x27; - &#x27; + archiveLength</span><br><span class="line">    +articleSort(page.posts)</span><br><span class="line">    include includes/pagination.pug</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117180411441.png" alt="归档页"></p><h4 id="在标签页使用统计图"><a href="#在标签页使用统计图" class="headerlink" title="在标签页使用统计图"></a>在标签页使用统计图</h4><p>这个标签页不是指 <code>tag</code> 文件夹下的 <code>index.md</code>文件, 而是博客中点进去一个标签进去的页面</p><p>在 <code>hexo-theme-butterfly\layout\tag.pug</code> 中修改代码, 直接复制过去就行</p><p>代码中的先后顺序会影响统计图在博客中的显示顺序</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  if theme.tag_ui == &#x27;index&#x27;</span><br><span class="line">    include ./includes/mixins/post-ui.pug</span><br><span class="line">    #recent-posts.recent-posts</span><br><span class="line">      +postUI</span><br><span class="line">      include includes/pagination.pug</span><br><span class="line">  else</span><br><span class="line">    include ./includes/mixins/article-sort.pug</span><br><span class="line">    #tag</span><br><span class="line">      //- 在标签页使用文章分类统计图</span><br><span class="line">      &lt;div id=&quot;categories-chart&quot; data-parent=&quot;false&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      //- 在标签页使用发布时间统计图</span><br><span class="line">      &lt;div id=&quot;posts-chart&quot; data-start=&quot;2022-12&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      //- 在标签页使用标签统计图</span><br><span class="line">      &lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      .article-sort-title= _p(&#x27;page.tag&#x27;) + &#x27; - &#x27; + page.tag</span><br><span class="line">      +articleSort(page.posts)</span><br><span class="line">      include includes/pagination.pug</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117180430881.png" alt="标签页"></p><h4 id="在分类页使用统计图"><a href="#在分类页使用统计图" class="headerlink" title="在分类页使用统计图"></a>在分类页使用统计图</h4><p>这个分类页不是指 <code>category</code> 文件夹下的 <code>index.md</code>文件, 而是博客中点进去一个分类进去的页面</p><p>在 <code>hexo-theme-butterfly\layout\category.pug</code> 中修改代码, 直接复制过去就行</p><p>代码中的先后顺序会影响统计图在博客中的显示顺序</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  if theme.category_ui == &#x27;index&#x27;</span><br><span class="line">    include ./includes/mixins/post-ui.pug</span><br><span class="line">    #recent-posts.recent-posts.category_ui</span><br><span class="line">      +postUI</span><br><span class="line">      include includes/pagination.pug</span><br><span class="line">  else</span><br><span class="line">    include ./includes/mixins/article-sort.pug</span><br><span class="line">    #category</span><br><span class="line">      //- 在分类页使用文章分类统计图</span><br><span class="line">      &lt;div id=&quot;categories-chart&quot; data-parent=&quot;false&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      //- 在分类页使用发布时间统计图</span><br><span class="line">      &lt;div id=&quot;posts-chart&quot; data-start=&quot;2022-12&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      //- 在分类页使用标签统计图</span><br><span class="line">      &lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      .article-sort-title= _p(&#x27;page.category&#x27;) + &#x27; - &#x27; + page.category</span><br><span class="line">      +articleSort(page.posts)</span><br><span class="line">      include includes/pagination.pug</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230117180446109.png" alt="分类页"></p><hr><h3 id="12-6-适配明暗模式"><a href="#12-6-适配明暗模式" class="headerlink" title="12.6 适配明暗模式"></a>12.6 适配明暗模式</h3><p>在 <code>charts.js</code> 中加入以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchPostChart</span> () &#123;</span><br><span class="line">  <span class="comment">// 这里为了统一颜色选取的是“明暗模式”下的两种字体颜色，也可以自己定义</span></span><br><span class="line">  <span class="keyword">let</span> color = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ? <span class="string">&#x27;#4C4948&#x27;</span> : <span class="string">&#x27;rgba(251, 255, 0)&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;posts-chart&#x27;</span>) &amp;&amp; postsOption) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> postsOptionNew = postsOption</span><br><span class="line">      postsOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">xAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">yAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      postsOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">markLine</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color</span><br><span class="line">      postsChart.<span class="title function_">setOption</span>(postsOptionNew)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tags-chart&#x27;</span>) &amp;&amp; tagsOption) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> tagsOptionNew = tagsOption</span><br><span class="line">      tagsOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">xAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">yAxis</span>.<span class="property">nameTextStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLabel</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">xAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">yAxis</span>.<span class="property">axisLine</span>.<span class="property">lineStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">markLine</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color</span><br><span class="line">      tagsChart.<span class="title function_">setOption</span>(tagsOptionNew)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categories-chart&#x27;</span>) &amp;&amp; categoriesOption) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> categoriesOptionNew = categoriesOption</span><br><span class="line">      categoriesOptionNew.<span class="property">title</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      categoriesOptionNew.<span class="property">legend</span>.<span class="property">textStyle</span>.<span class="property">color</span> = color</span><br><span class="line">      <span class="keyword">if</span> (!categoryParentFlag) &#123; categoriesOptionNew.<span class="property">series</span>[<span class="number">0</span>].<span class="property">label</span>.<span class="property">color</span> = color &#125;</span><br><span class="line">      categoriesChart.<span class="title function_">setOption</span>(categoriesOptionNew)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mode-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="built_in">setTimeout</span>(switchPostChart, <span class="number">100</span>) &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="12-7-Hexo-三连"><a href="#12-7-Hexo-三连" class="headerlink" title="12.7 Hexo 三连"></a>12.7 Hexo 三连</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c;hexo g;hexo d</span><br></pre></td></tr></table></figure><hr><h2 id="十三、直达底部按钮"><a href="#十三、直达底部按钮" class="headerlink" title="十三、直达底部按钮"></a>十三、直达底部按钮</h2><p>在 <code>hexo-theme-butterfly\layout\includes\rightside.pug</code> 下进行修改</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131192520542.png" alt="下面的是新增"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-id">#go-up</span>(type=&quot;<span class="selector-tag">button</span>&quot; title=_p(&quot;rightside<span class="selector-class">.back_to_top</span>&quot;))</span><br><span class="line">  <span class="selector-tag">i</span><span class="selector-class">.fas</span><span class="selector-class">.fa-arrow-up</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#go-down</span>(type=&quot;<span class="selector-tag">button</span>&quot; title=&quot;直达底部&quot; onclick=&quot;btf<span class="selector-class">.scrollToDest</span>(document<span class="selector-class">.body</span><span class="selector-class">.scrollHeight</span>, <span class="number">500</span>)&quot;)</span><br><span class="line">  <span class="selector-tag">i</span><span class="selector-class">.fas</span><span class="selector-class">.fa-arrow-down</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131193523505.png" alt="直达底部"></p><hr><h2 id="十四、网站恶搞标题"><a href="#十四、网站恶搞标题" class="headerlink" title="十四、网站恶搞标题"></a>十四、网站恶搞标题</h2><p>在 <code>source\js</code> 下新建 <code>title.js</code> 文件, 写入以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">    <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;只因你太美~~&#x27;</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;喜欢唱、跳、rap、篮球&#x27;</span>;</span><br><span class="line">    <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">    titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131193119168.png" alt="添加文件"></p><p>在<strong>主题配置文件</strong>中引入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/universe.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/title.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131193413084.png" alt="引入"></p>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 美化 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="/2022/12/21/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/12/21/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><p>3）提升标题等级 <code>Ctrl +</code></p><p>4）降低标题等级 <code>Ctrl -</code></p><hr><h2 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h2><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><hr><h2 id="三、区块引用"><a href="#三、区块引用" class="headerlink" title="三、区块引用"></a>三、区块引用</h2><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><hr><h2 id="四、代码区块"><a href="#四、代码区块" class="headerlink" title="四、代码区块"></a>四、代码区块</h2><ul><li>小区块 <strong>Ctrl+Shift+&#96;</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`world`</span><br></pre></td></tr></table></figure><ul><li>大区块 <code>```</code> 后面可直接添加区块语言</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```</span><br></pre></td></tr></table></figure><hr><h2 id="五、强调"><a href="#五、强调" class="headerlink" title="五、强调"></a>五、强调</h2><ul><li>用1个星号*或底线_表示斜体 <strong>斜体：*Ctrl+I*</strong></li><li>用2个星号*或底线_表示粗体 <strong>加粗：Ctrl+B</strong></li><li>用3个星号*或底线_表示粗斜体</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*斜体文字*</span><br><span class="line"></span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line">**粗体文字**</span><br><span class="line"></span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line">***粗斜体文字***</span><br><span class="line"></span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure><hr><h2 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h2><ul><li>无序列表</li></ul><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><ul><li>有序列表</li></ul><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><ul><li>嵌套列表</li></ul><p>无序有序均可嵌套</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><hr><h2 id="七、分割线-amp-删除线-amp-下划线"><a href="#七、分割线-amp-删除线-amp-下划线" class="headerlink" title="七、分割线&amp;删除线&amp;下划线"></a>七、分割线&amp;删除线&amp;下划线</h2><ul><li>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">******</span><br><span class="line">------</span><br></pre></td></tr></table></figure><ul><li>删除线 <code>Alt + Shift + 5</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~tencent.com~~</span><br></pre></td></tr></table></figure><ul><li>下划线 <code>Ctrl + U</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;   </span><br></pre></td></tr></table></figure><hr><h2 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h2><ul><li>快捷键 <code>Ctrl + K</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [新浪新闻](https://news.sina.com.cn/)</span><br><span class="line">&lt;https://news.sina.com.cn/&gt;</span><br></pre></td></tr></table></figure><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”<br>[2]:https::&#x2F;&#x2F;github.com&#x2F;younghz&#x2F;Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><hr><h2 id="九、图片"><a href="#九、图片" class="headerlink" title="九、图片"></a>九、图片</h2><ul><li>快捷键 <code>Ctrl + Shift + L</code></li></ul><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><hr><h2 id="十、反斜杠"><a href="#十、反斜杠" class="headerlink" title="十、反斜杠\"></a>十、反斜杠<code>\</code></h2><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><hr><h2 id="十一、表格"><a href="#十一、表格" class="headerlink" title="十一、表格"></a>十一、表格</h2><ul><li>快捷键 <code>Ctrl + t</code></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><hr><h2 id="十二、高亮"><a href="#十二、高亮" class="headerlink" title="十二、高亮"></a>十二、高亮</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown写作规范</title>
      <link href="/2022/12/20/Markdown%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
      <url>/2022/12/20/Markdown%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown写作规范"><a href="#Markdown写作规范" class="headerlink" title="Markdown写作规范"></a>Markdown写作规范</h1><p><strong>《JERRY 中文技术文档的写作规范》</strong></p><blockquote><p>主要内容基于阮一峰<a href="https://github.com/ruanyf/document-style-guide">《中文技术文档的写作规范》</a>，部分内容依据平时习惯进行了个人补充。</p><p>转载请注明出处，请勿用于商业用途！</p></blockquote><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><h2 id="1-1-层级"><a href="#1-1-层级" class="headerlink" title="1.1 层级"></a>1.1 层级</h2><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br></pre></td></tr></table></figure><h2 id="1-2-原则"><a href="#1-2-原则" class="headerlink" title="1.2 原则"></a>1.2 原则</h2><p><strong>（1）一级标题下，不能直接出现三级标题</strong></p><p>示例：下面的文章结构，缺少二级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><p><strong>（2）标题要避免孤立编号（即同级标题只有一个）</strong></p><p>示例：下面的文章结构，<code>二级标题 A</code> 只包含一个三级标题，完全可以省略 <code>三级标题 A</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 二级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题 B</span></span><br></pre></td></tr></table></figure><p><strong>（3）下级标题不重复上一级标题的名字</strong></p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 概述</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 概述</span></span><br></pre></td></tr></table></figure><p><strong>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节</strong></p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">结构一</span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 B</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 C</span></span><br><span class="line"></span><br><span class="line">结构二</span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（1）A**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（2）B**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（3）C**</span></span><br></pre></td></tr></table></figure><blockquote><p>建议：无论是几级标题，只要下方的内容是对标题的解释，那么推荐直接使用项目列表（Item list）</p><p>举例：<code>一、标题</code>（一级标题）的 <code>1.2 原则</code>（二级标题）下方直接跟项目列表</p></blockquote><h1 id="二、文本"><a href="#二、文本" class="headerlink" title="二、文本"></a>二、文本</h1><h2 id="2-1-字间距"><a href="#2-1-字间距" class="headerlink" title="2.1 字间距"></a>2.1 字间距</h2><p><strong>（1）全角中文字符与半角英文字符之间，应有一个半角空格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：本文介绍如何快速启动Windows系统。</span><br><span class="line"></span><br><span class="line">正确：本文介绍如何快速启动 Windows 系统。</span><br></pre></td></tr></table></figure><p><strong>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。</span><br><span class="line"></span><br><span class="line">正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。(个人推荐)</span><br></pre></td></tr></table></figure><p>半角的百分号，视同阿拉伯数字。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：今年我国经济增长率是6.5%。</span><br><span class="line"></span><br><span class="line">正确：今年我国经济增长率是 6.5%。（个人推荐）</span><br></pre></td></tr></table></figure><p><strong>（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例1：一部容量为 16 GB 的智能手机</span><br><span class="line"></span><br><span class="line">例2：1 h = 60 min = 3,600 s</span><br></pre></td></tr></table></figure><p><strong>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：他的电脑是 MacBook Air 。</span><br><span class="line"></span><br><span class="line">正确：他的电脑是 MacBook Air。</span><br></pre></td></tr></table></figure><h2 id="2-2-句子"><a href="#2-2-句子" class="headerlink" title="2.2 句子"></a>2.2 句子</h2><p><strong>（1）避免使用长句</strong></p><p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</span><br><span class="line"></span><br><span class="line">正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</span><br></pre></td></tr></table></figure><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p><p><strong>（2）尽量使用简单句和并列句，避免使用复合句</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">并列句：他昨天生病了，没有参加会议。</span><br><span class="line"></span><br><span class="line">复合句：那个昨天生病的人没有参加会议。</span><br></pre></td></tr></table></figure><p><strong>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：请确认没有接通装置的电源。</span><br><span class="line"></span><br><span class="line">正确：请确认装置的电源已关闭。</span><br></pre></td></tr></table></figure><p><strong>（4）避免使用双重否定句</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：没有删除权限的用户，不能删除此文件。</span><br><span class="line"></span><br><span class="line">正确：用户必须拥有删除权限，才能删除此文件。</span><br></pre></td></tr></table></figure><h2 id="2-3-写作风格"><a href="#2-3-写作风格" class="headerlink" title="2.3 写作风格"></a>2.3 写作风格</h2><p><strong>（1）尽量不使用被动语态，改为使用主动语态</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：假如此软件尚未被安装，</span><br><span class="line"></span><br><span class="line">正确：假如尚未安装这个软件，</span><br></pre></td></tr></table></figure><p><strong>（2）不使用非正式的语言风格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</span><br><span class="line"></span><br><span class="line">正确：无法参加本次活动，我深感遗憾。</span><br></pre></td></tr></table></figure><p><strong>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：这是唯二的快速启动的方法。</span><br><span class="line"></span><br><span class="line">正确：这是仅有的两种快速启动的方法。</span><br></pre></td></tr></table></figure><p><strong>（4）用对 “的”、“地”、“得”</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">她露出了开心的笑容。</span><br><span class="line">（形容词＋的＋名词）</span><br><span class="line"></span><br><span class="line">她开心地笑了。</span><br><span class="line">（副词＋地＋动词）</span><br><span class="line"></span><br><span class="line">她笑得很开心。</span><br><span class="line">（动词＋得＋副词）</span><br></pre></td></tr></table></figure><p><strong>（5）使用代词时（比如 “其”、“该”、“此”、“这” 等词），必须明确指代的内容，保证只有一个含义</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。</span><br><span class="line"></span><br><span class="line">正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</span><br></pre></td></tr></table></figure><p><strong>（6）名词前不要使用过多的形容词</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</span><br><span class="line"></span><br><span class="line">正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</span><br></pre></td></tr></table></figure><h2 id="2-4-英文处理"><a href="#2-4-英文处理" class="headerlink" title="2.4 英文处理"></a>2.4 英文处理</h2><p><strong>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：⋯information stored in random access memory (RAMs)⋯</span><br><span class="line"></span><br><span class="line">中文：……存储在随机存取存储器（RAM）里的信息……</span><br></pre></td></tr></table></figure><p><strong>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U.S.A.</span><br><span class="line">Apple, Inc.</span><br></pre></td></tr></table></figure><p><strong>（3）表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：5 minutes later⋯</span><br><span class="line"></span><br><span class="line">中文：5 分钟过去了……</span><br></pre></td></tr></table></figure><p><strong>（4）英文书名或电影名改用中文表达时，双引号应改为书名号</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：He published an article entitled &quot;The Future of the Aviation&quot;.</span><br><span class="line"></span><br><span class="line">中文：他发表了一篇名为《航空业的未来》的文章。</span><br></pre></td></tr></table></figure><p><strong>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用 “IOC” 了。</span><br></pre></td></tr></table></figure><p><strong>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。</span><br><span class="line"></span><br><span class="line">“online transaction processing”（在线事务处理）不是专有名词，不应大写。</span><br></pre></td></tr></table></figure><h1 id="三、段落"><a href="#三、段落" class="headerlink" title="三、段落"></a>三、段落</h1><h2 id="3-1-原则"><a href="#3-1-原则" class="headerlink" title="3.1 原则"></a>3.1 原则</h2><ul><li>一个段落只能有一个主题，或一个中心句子</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气</li><li>段落之间使用一个空行隔开</li><li>段落开头不要留出空白字符</li><li>文本句子正常情况下均该以句号结尾</li></ul><h2 id="3-2-引用"><a href="#3-2-引用" class="headerlink" title="3.2 引用"></a>3.2 引用</h2><p>引用第三方内容时，应注明出处。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One man’s constant is another man’s variable. — Alan Perlis</span><br></pre></td></tr></table></figure><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本文转载自 WikiQuote</span><br></pre></td></tr></table></figure><p>使用外部图片时，必须在图片下方或文末标明来源。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本文部分图片来自 Wikipedia</span><br></pre></td></tr></table></figure><h1 id="四、数值"><a href="#四、数值" class="headerlink" title="四、数值"></a>四、数值</h1><h2 id="4-1-半角数字"><a href="#4-1-半角数字" class="headerlink" title="4.1 半角数字"></a>4.1 半角数字</h2><p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：这件商品的价格是１０００元。</span><br><span class="line"></span><br><span class="line">正确：这件商品的价格是 1000 元。</span><br></pre></td></tr></table></figure><h2 id="4-2-千分号"><a href="#4-2-千分号" class="headerlink" title="4.2 千分号"></a>4.2 千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXX 公司的实收资本为 ￥1,258,000 人民币。</span><br></pre></td></tr></table></figure><p>对于 4 位以下的数值，千分号是选用的，比如 <code>1000</code> 和 <code>1,000</code> 都可以接受。对于 4 位以上的数值，千分号是必须的。</p><h2 id="4-3-货币"><a href="#4-3-货币" class="headerlink" title="4.3 货币"></a>4.3 货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$1,000</span><br><span class="line">1,000 美元</span><br></pre></td></tr></table></figure><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>。</p><h2 id="4-4-数值范围"><a href="#4-4-数值范围" class="headerlink" title="4.4 数值范围"></a>4.4 数值范围</h2><p>表示数值范围时，用 <code>～</code> 或 <code>——</code> 连接。参见《标点符号》一节的 “连接号” 部分。</p><p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">132kg～234kg</span><br><span class="line"></span><br><span class="line">67%～89%</span><br></pre></td></tr></table></figure><h2 id="4-5-变化程度的表示法"><a href="#4-5-变化程度的表示法" class="headerlink" title="4.5 变化程度的表示法"></a>4.5 变化程度的表示法</h2><p>数字的增加要使用 “增加了”、“增加到”。“了” 表示增量，“到” 表示定量。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">增加到过去的两倍</span><br><span class="line">（过去为一，现在为二）</span><br><span class="line"></span><br><span class="line">增加了两倍</span><br><span class="line">（过去为一，现在为三）</span><br></pre></td></tr></table></figure><p>数字的减少要使用 “降低了”、“降低到”。“了” 表示增量，“到” 表示定量。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">降低到百分之八十</span><br><span class="line">（定额是一百，现在是八十）</span><br><span class="line"></span><br><span class="line">降低了百分之八十</span><br><span class="line">（原来是一百，现在是二十）</span><br></pre></td></tr></table></figure><p>不能用 “降低 N 倍 ” 或 “减少 N 倍” 的表示法，要用 “降低百分之几” 或 “减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h1 id="五、标点符号"><a href="#五、标点符号" class="headerlink" title="五、标点符号"></a>五、标点符号</h1><h2 id="5-1-原则"><a href="#5-1-原则" class="headerlink" title="5.1 原则"></a>5.1 原则</h2><p><strong>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致</strong></p><p><strong>（2）如果整句为英文，则该句使用英文&#x2F;半角标点</strong></p><p><strong>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首</strong></p><p><strong>（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以</strong></p><h2 id="5-2-句号"><a href="#5-2-句号" class="headerlink" title="5.2 句号"></a>5.2 句号</h2><p><strong>（1）中文语句的结尾处应该用全角句号（<code>。</code>）</strong></p><p><strong>（2）句子末尾用括号加注时，句号应在括号之外</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）</span><br><span class="line"></span><br><span class="line">正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</span><br></pre></td></tr></table></figure><h2 id="5-3-逗号"><a href="#5-3-逗号" class="headerlink" title="5.3 逗号"></a>5.3 逗号</h2><p><strong>（1）逗号（<code>，</code>）表示句子内部的一般性停顿</strong></p><p><strong>（2）注意避免 “一逗到底”，即整个段落除了结尾，全部停顿都使用逗号</strong></p><h2 id="5-4-顿号"><a href="#5-4-顿号" class="headerlink" title="5.4 顿号"></a>5.4 顿号</h2><p><strong>（1）中文句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使存在并列词是英语也是如此</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</span><br><span class="line"></span><br><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></table></figure><p><strong>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</span><br></pre></td></tr></table></figure><p><strong>（3）中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。</span><br><span class="line"></span><br><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></table></figure><h2 id="5-5-分号"><a href="#5-5-分号" class="headerlink" title="5.5 分号"></a>5.5 分号</h2><p><strong>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿</strong></p><h2 id="5-6-引号"><a href="#5-6-引号" class="headerlink" title="5.6 引号"></a>5.6 引号</h2><p><strong>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：许多人都认为客户服务的核心是 “友好” 和 “专业”。</span><br></pre></td></tr></table></figure><p><strong>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</span><br></pre></td></tr></table></figure><p><strong>（3）引号与前后文字之间应该用一个空格隔开，与标点符号之间则不用</strong></p><h2 id="5-7-括号"><a href="#5-7-括号" class="headerlink" title="5.7 括号"></a>5.7 括号</h2><p><strong>（1）使用全角圆括号（<code>（）</code>），括号前后不加空格。使用半角圆括号（<code>()</code>），括号前后加一个空格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：请确认所有的连接（电缆和接插件）均安装牢固。</span><br><span class="line"></span><br><span class="line">例句：I love you (GitHub).</span><br></pre></td></tr></table></figure><p>圆括号前后遇到标点符号不用加空格。</p><p><strong>（2）几种括号的中英文名称</strong></p><table><thead><tr><th align="center"></th><th align="center">英文</th><th align="center">中文</th></tr></thead><tbody><tr><td align="center"><code>&#123; &#125;</code></td><td align="center">braces 或 curly brackets</td><td align="center">大括号</td></tr><tr><td align="center"><code>[ ]</code></td><td align="center">square brackets 或 brackets</td><td align="center">方括号</td></tr><tr><td align="center"><code>&lt; &gt;</code></td><td align="center">angled brackets</td><td align="center">尖括号</td></tr><tr><td align="center"><code>( )</code></td><td align="center">parentheses</td><td align="center">圆括号</td></tr></tbody></table><p><strong>（3）中文句子中只能出现全角圆括号（<code>（）</code>），无论括号中是中文还是英文。英文句子中只能出现半角圆括号（<code>()</code>），无论括号中是英文还是中文</strong></p><h2 id="5-8-冒号"><a href="#5-8-冒号" class="headerlink" title="5.8 冒号"></a>5.8 冒号</h2><p><strong>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。</span><br></pre></td></tr></table></figure><p><strong>（2）中文句子中一律使用全角冒号（<code>：</code>），无论冒号前是中文还是英文；英文句子中一律使用半角冒号（<code>:</code>），无论冒号前是英文还是中文</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Markdown：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</span><br></pre></td></tr></table></figure><p><strong>（3）表示时间时，应使用半角冒号（<code>:</code>）</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：早上 8:00</span><br></pre></td></tr></table></figure><h2 id="5-9-省略号"><a href="#5-9-省略号" class="headerlink" title="5.9 省略号"></a>5.9 省略号</h2><p><strong>（1）省略号（<code>……</code>）表示语句未完、或者语气的不连续</strong></p><p><strong>（2）省略号占两个汉字空间、包含六个省略点，不要使用 <code>。。。</code> 或 <code>...</code> 等非标准形式</strong></p><p><strong>（3）省略号不应与 “等” 这个词一起使用</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。</span><br><span class="line"></span><br><span class="line">正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……</span><br><span class="line"></span><br><span class="line">正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</span><br></pre></td></tr></table></figure><h2 id="5-10-感叹号"><a href="#5-10-感叹号" class="headerlink" title="5.10 感叹号"></a>5.10 感叹号</h2><p><strong>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）</strong></p><p><strong>（2）不得多个感叹号连用，比如 <code>！！</code> 和 <code>!!!</code></strong></p><h2 id="5-11-破折号"><a href="#5-11-破折号" class="headerlink" title="5.11 破折号"></a>5.11 破折号</h2><p><strong>（1）破折号 <code>————</code> 一般用于进一步解释</strong></p><p><strong>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</span><br><span class="line"></span><br><span class="line">例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。</span><br></pre></td></tr></table></figure><h2 id="5-12-连接号"><a href="#5-12-连接号" class="headerlink" title="5.12 连接号"></a>5.12 连接号</h2><p><strong>（1）连接号用于连接两个类似的词</strong></p><p><strong>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置</strong></p><ul><li>两个名词的复合</li><li>图表编号</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：氧化-还原反应</span><br><span class="line"></span><br><span class="line">例句：图 1-1</span><br></pre></td></tr></table></figure><p><strong>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>），占一个全角字符的位置</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：2009年～2011年</span><br></pre></td></tr></table></figure><p>注意，波浪连接号前后两个值都应该加上单位。</p><p><strong>（4）波浪连接号也可以用汉字 “至” 代替</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：周围温度：-20°C 至 -10°C</span><br></pre></td></tr></table></figure><h1 id="六、Markdown"><a href="#六、Markdown" class="headerlink" title="六、Markdown"></a>六、Markdown</h1><blockquote><p> Markdown 中所有文本内容均建议按照上述规范来书写。</p></blockquote><h2 id="6-1-标题"><a href="#6-1-标题" class="headerlink" title="6.1 标题"></a>6.1 标题</h2><p>只使用三级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><p>四级标题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全角圆括号加粗 --&gt;</span><br><span class="line"><span class="strong">**（1）标题**</span></span><br></pre></td></tr></table></figure><p>一到四级标题末尾不能出现句号。</p><p>单个四级标题直接加粗即可，不要写序号。</p><p>四级标题后请使用列表。</p><p><strong>开头规范</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 名称&lt;!-- 书名、文件名、文档名用《》，其他用 【】 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**第二名称**</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 声明</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**目录**</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 一、一级标题</span></span><br><span class="line">或者</span><br><span class="line"><span class="section"># 第一章 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 1.1 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1.1.1 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（1）四级标题**</span></span><br></pre></td></tr></table></figure><h2 id="6-2-段落"><a href="#6-2-段落" class="headerlink" title="6.2 段落"></a>6.2 段落</h2><p>四级标题及关键字才能使用 “加粗”，书名、人名等可以 “斜体”，建议不要使用 “高亮”。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Markdown**</span>：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"></span><br><span class="line">==高亮==</span><br></pre></td></tr></table></figure><blockquote><p> <strong>Markdown</strong>：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></blockquote><p>标题上下不要使用分割线。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>上下角标。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5~4~</span><br><span class="line">2^4^</span><br><span class="line">5<span class="language-xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>4<span class="language-xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br><span class="line">2<span class="language-xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>4<span class="language-xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span></span><br><span class="line">&lt;!-- 推荐使用 HTML 便签法 --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>5<del>4</del></p><p>2^4^ </p><p>5<sup>4</sup></p><p>2<sub>4</sub></p></blockquote><h2 id="6-3-列表"><a href="#6-3-列表" class="headerlink" title="6.3 列表"></a>6.3 列表</h2><p>同一列表不能分隔开，建议列表元素单行字数不要过长。</p><p>两个及以上元素才能使用列表，单个元素不能用列表表示。</p><p>列表每行的结束不加句号。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 无序列表 --&gt;</span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br><span class="line"></span><br><span class="line">&lt;!-- 有序列表 --&gt;</span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><h2 id="6-4-区块"><a href="#6-4-区块" class="headerlink" title="6.4 区块"></a>6.4 区块</h2><p>区块使用在声明、引用、特殊强调和非主体内容部分。</p><p>区块严禁嵌套，区块中可以使用列表。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; 3. 第三项</span></span><br><span class="line"><span class="quote">&gt; - 第一项</span></span><br><span class="line"><span class="quote">&gt; - 第二项</span></span><br><span class="line"><span class="quote">&gt; - 第三项</span></span><br></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h2 id="6-5-代码"><a href="#6-5-代码" class="headerlink" title="6.5 代码"></a>6.5 代码</h2><p>段落中的片段代码适量使用，关键字不要重复使用片段代码。</p><p>片段代码前后遇到文字留一个空格，遇到标点符号不用留空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个 <span class="code">`片段代码`</span> 示 <span class="code">`例`</span>。</span><br></pre></td></tr></table></figure><blockquote><p>这是一个 <code>片段代码</code> 示 <code>例</code>。</p></blockquote><p>代码块严格标注类型。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 普通文本 --&gt;</span><br><span class="line">​<span class="code">```text</span></span><br><span class="line"><span class="code">普通文字标注 text 类型</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- markdown --&gt;</span><br><span class="line">​<span class="code">```markdown</span></span><br><span class="line"><span class="code">### Markdown 文本标注为 markdown 类型。</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 命令行 --&gt;</span><br><span class="line">​<span class="code">```bash</span></span><br><span class="line"><span class="code">$ javac Test.java</span></span><br><span class="line"><span class="code"># 编译 Test.java 文件。</span></span><br><span class="line"><span class="code"># 命令行统一为 bash 类型，且每条命令前加上 &#x27;$&#x27;，其中 &#x27;#&#x27; 为 bash 注释。</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 代码 --&gt;</span><br><span class="line">​<span class="code">```java</span></span><br><span class="line"><span class="code">System.out.println(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="code">// 打印 Hello World!</span></span><br><span class="line"><span class="code">/* 根据不同的编程语言选择不同的类型。 */</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><blockquote> <!-- 普通文本 --></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通文字标注 text 类型</span><br></pre></td></tr></table></figure><blockquote> <!-- markdown --></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Markdown 文本标注为 markdown 类型。</span></span><br></pre></td></tr></table></figure><blockquote> <!-- 命令行 --></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac Test.java</span><br><span class="line"><span class="comment"># 编译 Test.java 文件。</span></span><br><span class="line"><span class="comment"># 命令行统一为 bash 类型，且每条命令前加上 &#x27;$&#x27;，其中 &#x27;#&#x27; 为 bash 注释。</span></span><br></pre></td></tr></table></figure><blockquote> <!-- 代码 --></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="comment">// 打印 Hello World!</span></span><br><span class="line"><span class="comment">/* 根据不同的编程语言选择不同的类型。 */</span></span><br></pre></td></tr></table></figure><h2 id="6-6-链接"><a href="#6-6-链接" class="headerlink" title="6.6 链接"></a>6.6 链接</h2><p>非特殊情况不要直接暴露链接地址。</p><p>链接左右为文字时留一个空格，为标点符号时不用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">建议：[<span class="string">bilibili</span>](<span class="link">https://www.bilibili.com/</span>)</span><br><span class="line"></span><br><span class="line">不建议：<span class="language-xml">&lt;https://www.bilibili.com/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>建议：<a href="https://www.bilibili.com/">bilibili</a></p><p>不建议：<a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p></blockquote><h2 id="6-7-图片"><a href="#6-7-图片" class="headerlink" title="6.7 图片"></a>6.7 图片</h2><p>合理调整图片大小。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="6-8-表格"><a href="#6-8-表格" class="headerlink" title="6.8 表格"></a>6.8 表格</h2><p>表格非特殊情况一律默认左对齐。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="6-9-高级"><a href="#6-9-高级" class="headerlink" title="6.9 高级"></a>6.9 高级</h2><blockquote><p>以下用法存在一定风险，不建议使用</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 键盘按键 --&gt;</span><br><span class="line">使用 <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><blockquote><p> 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 转义 --&gt;</span><br><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>文本加粗</strong><br>** 正常显示星号 **</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 居中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>中<span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><center>中<center></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 左对齐 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span>左<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p align="left">左</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 右对齐 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span>右<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p align="right">右</p></blockquote><h1 id="七、文档体系"><a href="#七、文档体系" class="headerlink" title="七、文档体系"></a>七、文档体系</h1><h2 id="7-1-结构"><a href="#7-1-结构" class="headerlink" title="7.1 结构"></a>7.1 结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称 “使用篇”，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称 “开发篇”，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><h2 id="7-2-文件名"><a href="#7-2-文件名" class="headerlink" title="7.2 文件名"></a>7.2 文件名</h2><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：名词解释.md</span><br><span class="line"></span><br><span class="line">正确：glossary.md</span><br></pre></td></tr></table></figure><p>文件名建议只使用小写字母，不使用大写字母。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：TroubleShooting.md</span><br><span class="line"></span><br><span class="line">正确：troubleshooting.md </span><br></pre></td></tr></table></figure><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如 <code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不佳：advanced_usage.md</span><br><span class="line"></span><br><span class="line">正确：advanced-usage.md</span><br></pre></td></tr></table></figure><h1 id="八、重要问题"><a href="#八、重要问题" class="headerlink" title="八、重要问题"></a>八、重要问题</h1><h2 id="8-1-为什么文件名要小写？"><a href="#8-1-为什么文件名要小写？" class="headerlink" title="8.1 为什么文件名要小写？"></a>8.1 为什么文件名要小写？</h2><p><strong>（1）可移植性</strong></p><p>Linux 系统是大小写敏感的，而 Windows 系统和 Mac 系统正好相反，大小写不敏感。一般来说，这不是大问题。</p><p>但是，如果两个文件名只有大小写不同，其他都相同，跨平台就会出问题。</p><ul><li><code>foobar</code></li><li><code>Foobar</code></li><li><code>FOOBAR</code></li><li><code>fOObAr</code></li></ul><p>上面四个文件名，Windows 系统会把它们都当作 <code>foobar</code>。如果它们同时存在，你可能没办法打开后面三个文件。</p><p>另一方面，在 Mac 系统上开发时，有时会疏忽，写错大小写。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确文件名是 MyModule.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;./myModule&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的代码在 Mac 上面可以运行，因为 Mac 认为 <code>MyModule.js</code> 和 <code>myModule.js</code> 是同一个文件。但是，一旦代码到服务器运行就会报错，因为 Linux 系统找不到 <code>myModule.js</code>。</p><p>如果所有的文件名都采用小写，就不会出现上面的问题，可以保证项目有良好的可移植性。</p><p><strong>（2）易读性</strong></p><p>小写文件名通常比大写文件名更易读，比如 <code>accessibility.txt</code> 就比 <code>ACCESSIBILITY.TXT</code> 易读。</p><p>有人习惯使用 <a href="https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95?fromtitle=%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95&fromid=7560610">驼峰命名法</a>，单词的第一个字母大写，其他字母小写。这种方法的问题是，如果遇到全部是大写的缩略词，就会不适用。</p><p>比如，一个姓李的纽约特警，无论写成 <code>NYPoliceSWATLee</code> 还是 <code>NyPoliceSwatlee</code>，都怪怪的，还是写成 <code>ny-police-swat-lee</code> 比较容易接受。</p><p><strong>（3）易用性</strong></p><p>某些系统会生成一些预置的用户目录，采用首字母大写的目录名。比如，Ubuntu 在用户主目录会默认生成  <code>Downloads</code>、 <code>Pictures</code>、<code>Documents </code> 等目录。</p><p>Mac 系统一部分系统目录也是大写的，比如 <code>/Library/Audio/Apple Loops/</code>。</p><p>另外，某些常见的配置文件或说明文件，也采用大写的文件名，比如 <code>Makefile</code>、<code>INSTALL</code>、<code>CHANGELOG</code>、<code>.Xclients</code> 和 <code>.Xauthority</code> 等等。</p><p>所以，用户的文件都采用小写文件名，就很方便与上面这些目录或文件相区分。</p><p>那问到底，为什么操作系统会采用这样的大写文件名？原因也很简单，因为早期 Unix 系统上，<code>ls</code> 命令先列出大写字母，再列出小写字母，大写的路径会排在前面。因此，如果目录名或文件名是大写的，就比较容易被用户首先看到。</p><p><strong>（4）便捷性</strong></p><p>文件名全部小写，还有利于命令行操作。比如，某些命令可以不使用 <code>-i</code> 参数了。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写敏感的搜索</span></span><br><span class="line">$ find . -name abc</span><br><span class="line">$ locate <span class="string">&quot;*.htmL&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写不敏感的搜索</span></span><br><span class="line">$ find . -iname abc</span><br><span class="line">$ locate -i <span class="string">&quot;*.HtmL&quot;</span></span><br></pre></td></tr></table></figure><p>另外，大写字母需要按下 Shift 键，多多少少有些麻烦。如果文件名小写，就不用碰这个键了，不仅省事，还可以提高打字速度。</p><p>程序员长时间使用键盘，每分钟少按几次 Shift，一天下来就可以省掉很多手指动作。长年累月，也是对自己身体的一种保护。</p><p>综上所述，文件名全部使用小写字母和连词线（all-lowercase-with-dashes），是一种值得推广的正确做法。</p><h2 id="8-2-技术文档与文章的区别？"><a href="#8-2-技术文档与文章的区别？" class="headerlink" title="8.2 技术文档与文章的区别？"></a>8.2 技术文档与文章的区别？</h2><ul><li>技术文档注重：专业、严谨、严肃、简练</li><li>技术文章注重：图文并茂、通俗易懂、妙趣横生</li></ul><h2 id="8-3-技术文档与文章的核心？"><a href="#8-3-技术文档与文章的核心？" class="headerlink" title="8.3 技术文档与文章的核心？"></a>8.3 技术文档与文章的核心？</h2><p><strong>（1）技术文档</strong></p><ul><li><p>必要的声明</p></li><li><p>清晰严谨的章节安排</p></li><li><p>单独设计合理的目录导航页</p></li><li><p>删减一切非必要图片</p></li><li><p>严谨地运用链接</p></li><li><p>合理留白</p></li></ul><p><strong>（2）技术文章</strong></p><ul><li>必要的声明</li><li>清晰直观的目录</li><li>合理布局图文内容</li><li>图片适量且具有代表性</li><li>注意文章的平台可移植性</li><li>搭建合理的分享传播途径</li><li>注重通俗易懂</li><li>注重趣味</li><li>注重美观</li><li>合理留白</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 写作规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly美化之路（一）</title>
      <link href="/2022/12/02/Butterfly%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/12/02/Butterfly%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Butterfly美化之路（一）"><a href="#Butterfly美化之路（一）" class="headerlink" title="Butterfly美化之路（一）"></a>Butterfly美化之路（一）</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我的博客使用的是 <code>Hexo</code> + <code>GitHub</code> 搭建在线博客，主题用的是 <code>Butterfly</code>，教程及官方文档均可在网上找到，我只是在这里记录一些自己的感受，以防以后玩崩了找不到回家的路</p><p>**本文中，如果没有特殊说明，修改的文件一律为 <em>主题配置文件</em> **</p><p>参考文档:</p><p>余白的分享:<a href="https://www.vipyubai.top/post/a42befc0.html">https://www.vipyubai.top/post/a42befc0.html</a></p><p>三水的分享:<a href="https://sanshui.vip/2022/08/10/indexday1/">https://sanshui.vip/2022/08/10/indexday1/</a></p><p>Butterfly安装文档:<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><p>Fomalhaut的分享: <a href="https://www.fomal.cc/">https://www.fomal.cc/</a></p><h2 id="二、配置主页信息"><a href="#二、配置主页信息" class="headerlink" title="二、配置主页信息"></a>二、配置主页信息</h2><p>在<strong>博客配置文件</strong>中配置主页信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">月华.の奇妙冒险</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;欢迎来到我的博客&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;我连宇宙的尽头在哪都不知道，怎么知道这个&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">月华.</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201183533368.png" alt="主页信息"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201183614618.png" alt="主页"></p><hr><h2 id="三、先来创建一些页面"><a href="#三、先来创建一些页面" class="headerlink" title="三、先来创建一些页面"></a>三、先来创建一些页面</h2><p>输入创建页面指令，路径名是以后在<strong>主题配置文件</strong>中怎么进入这个页面就用什么名字</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 路径名</span><br></pre></td></tr></table></figure><p>比如：tags, link, categories….. </p><p>创建之后会在source文件夹下生成一个与路径名同名的文件夹, 每个文件夹下会自带一个index.md文件</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201173754557.png" alt="创建页面"></p><hr><h2 id="四、导航栏菜单以及-icon"><a href="#四、导航栏菜单以及-icon" class="headerlink" title="四、导航栏菜单以及 icon"></a>四、导航栏菜单以及 <code>icon</code></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/comments/</span> <span class="string">||fas</span> <span class="string">fa-envelope-open</span></span><br><span class="line">  <span class="string">链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229131920957.png" alt="导航栏设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229131939938.png" alt="效果"></p><hr><h2 id="五、Front-matter-页面设置"><a href="#五、Front-matter-页面设置" class="headerlink" title="五、Front-matter 页面设置"></a>五、Front-matter 页面设置</h2><p>Front-matter部分是在Markdown文档上方的配置信息部分，格式如下</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">//要用上下三个-包起来</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">title: </span><br><span class="line">date: </span><br><span class="line"><span class="section">type: </span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>写了示例的是用过的，没写就是还没用过</p><h3 id="5-1-Page-Front-matter-主页面-设置"><a href="#5-1-Page-Front-matter-主页面-设置" class="headerlink" title="5.1 Page Front-matter  主页面 设置"></a>5.1 Page Front-matter  <em>主页面</em> 设置</h3><p>用于配置每个路径下的 <code>index.md</code> 文件</p><table><thead><tr><th>属性</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>title</td><td>【必】页面标题</td><td>title: 文章分类</td></tr><tr><td>date</td><td>【必】页面创建日期</td><td>date: 2022-12-01</td></tr><tr><td>type</td><td>【必】tags，category，link页面需配置。需使用双引号</td><td>type: “categories”</td></tr><tr><td>updated</td><td>【选】页面更新日期</td><td></td></tr><tr><td>description</td><td>【选】页面描述</td><td></td></tr><tr><td>keywords</td><td>【选】页面关键字</td><td></td></tr><tr><td>comments</td><td>【选】显示页面评论模块(默认 true)</td><td></td></tr><tr><td>top_img</td><td>【选】页面顶部图片</td><td></td></tr><tr><td>mathjax</td><td>【选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td><td></td></tr><tr><td>katex</td><td>【选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td><td></td></tr><tr><td>aside</td><td>【选】显示侧边栏 (默认 true)</td><td></td></tr><tr><td>aplayer</td><td>【选】在需要的页面加载aplayer的js和css,请参考官方文档下面的<strong>音乐</strong>配置</td><td></td></tr><tr><td>highlight_shrink</td><td>【选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td><td></td></tr></tbody></table><h3 id="5-2-Post-Front-matter-文章页面-设置"><a href="#5-2-Post-Front-matter-文章页面-设置" class="headerlink" title="5.2 Post Front-matter 文章页面 设置"></a>5.2 Post Front-matter <em>文章页面</em> 设置</h3><p>配置自己写md文档</p><table><thead><tr><th>属性</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>title</td><td>【必】文章标题</td><td>title: 搭建自己的图床</td></tr><tr><td>date</td><td>【必】文章创建日期</td><td>date: 2022-12-01</td></tr><tr><td>updated</td><td>【选】文章更新日期</td><td></td></tr><tr><td>tags</td><td>【选】文章标签</td><td><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201180322869.png" alt="标签写法"></td></tr><tr><td>categories</td><td>【选】文章分类</td><td>categories: 学习总结</td></tr><tr><td>keywords</td><td>【选】文章关键字</td><td></td></tr><tr><td>description</td><td>【选】文章描述</td><td>description: 我自己的搭建图床的笔记整理, 希望对你有帮助</td></tr><tr><td>top_img</td><td>【选】文章顶部图片</td><td><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201180351089.png" alt="文章顶部图写法"></td></tr><tr><td>cover</td><td>【选】文章缩略图<br />(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td><td><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201180404793.png" alt="文章缩略图写法"></td></tr><tr><td>comments</td><td>【选】显示文章评论模块(默认 true)</td><td></td></tr><tr><td>toc</td><td>【选】显示文章TOC(默认为设置中toc的enable配置)</td><td></td></tr><tr><td>toc_number</td><td>【选】显示toc_number(默认为设置中toc的number配置)</td><td></td></tr><tr><td>toc_style_simple</td><td>【选】显示 toc 简洁模式</td><td></td></tr><tr><td>copyright</td><td>【选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td><td></td></tr><tr><td>copyright_author</td><td>【选】文章版权模块的文章作者</td><td></td></tr><tr><td>copyright_author_href</td><td>【选】文章版权模块的文章作者链接</td><td></td></tr><tr><td>copyright_url</td><td>【选】文章版权模块的文章连结链接</td><td></td></tr><tr><td>copyright_info</td><td>【选】文章版权模块的版权声明文字</td><td></td></tr><tr><td>mathjax</td><td>【选】显示mathjax<br />(当设置mathjax的per_page: false时，才需要配置，默认 false)</td><td></td></tr><tr><td>katex</td><td>【选】显示katex<br />(当设置katex的per_page: false时，才需要配置，默认 false)</td><td></td></tr><tr><td>aplayer</td><td>【选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td><td></td></tr><tr><td>highlight_shrink</td><td>【选】配置代码框是否展开(true&#x2F;false)<br />(默认为设置中highlight_shrink的配置)</td><td></td></tr><tr><td>aside</td><td>【选】显示侧边栏 (默认 true)</td><td></td></tr></tbody></table><h2 id="六、友情链接"><a href="#六、友情链接" class="headerlink" title="六、友情链接"></a>六、友情链接</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建友情链接界面</span><br><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><h3 id="6-1-本地设置"><a href="#6-1-本地设置" class="headerlink" title="6.1 本地设置"></a>6.1 本地设置</h3><p>现在source文件夹下创建<code>_data</code>文件夹, 在<code>_data</code>文件夹下创建<code>link.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内容</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">把你的友链给我，我会把它放到我的友链里</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">yuehua-HNU</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/yuehua-HNU</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/img/config_img/avatar.jpg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">欢迎访问我的GitHub</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><h3 id="6-2-写法"><a href="#6-2-写法" class="headerlink" title="6.2 写法"></a>6.2 写法</h3><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201181633612.png" alt="友链写法"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201181657634.png" alt="友链"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201181710275.png" alt="其他链接"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201181716872.png" alt="其他链接效果"></p><hr><h2 id="七、404页面"><a href="#七、404页面" class="headerlink" title="七、404页面"></a>七、404页面</h2><p><strong>主题配置文件</strong>中，把 <code>enable</code> 改为 <code>true</code> 启用 404 页面, 404 图片可以自己改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;Page Not Found&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201183249047.png" alt="404页面"></p><hr><h2 id="八、代码"><a href="#八、代码" class="headerlink" title="八、代码"></a>八、代码</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码高亮主题</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br><span class="line"><span class="comment"># 代码是否可复制</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span> <span class="comment"># copy button</span></span><br><span class="line"><span class="comment"># 是否显示代码语言</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span> <span class="comment"># show the code language</span></span><br><span class="line"><span class="comment"># 代码框是否展开</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span> <span class="comment"># true: 代码框不展开 / false: 代码框展开 | none: 不显示代码框展开按钮</span></span><br><span class="line"><span class="comment"># 代码高度限制</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="number">200</span> <span class="comment"># unit: px</span></span><br><span class="line"><span class="comment"># 代码过长是否自动换行</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229132728428.png" alt="代码相关设置"></p><hr><h2 id="九、社交图标设置"><a href="#九、社交图标设置" class="headerlink" title="九、社交图标设置"></a>九、社交图标设置</h2><blockquote><p><a href="https://fontawesome.com/icons?from=io">https://fontawesome.com/icons?from=io</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># social settings (社交圖標設置)</span></span><br><span class="line"><span class="comment"># formal:</span></span><br><span class="line"><span class="comment">#   icon: link || the description</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/yuehua-HNU</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fa-brands fa-bilibili:</span> <span class="string">https://space.bilibili.com/475208497?spm_id_from=333.1007.0.0</span> <span class="string">||</span> <span class="string">Bilibili</span></span><br><span class="line">  <span class="comment"># fas fa-envelope: mailto:xxxxxx@gmail.com || Email</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229132840639.png" alt="社交图标设置"></p><hr><h2 id="十、主页文章描述"><a href="#十、主页文章描述" class="headerlink" title="十、主页文章描述"></a>十、主页文章描述</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description 只显示description</span></span><br><span class="line"><span class="comment"># 2: both 优先选择description，如果没有配置description，则显示自动节选的内容</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt 只显示自动节选</span></span><br><span class="line"><span class="comment"># false: 不显示文章内容</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229133230909.png" alt="主页文章描述设置"></p><hr><h2 id="十一、设置主页背景"><a href="#十一、设置主页背景" class="headerlink" title="十一、设置主页背景"></a>十一、设置主页背景</h2><p>在<strong>主题配置文件</strong>中找到background</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184146749.png" alt="主页背景设置"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">url(/img/宵宫绝美.webp)</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184203085.png" alt="背景"></p><hr><h2 id="十二、开启footer背景"><a href="#十二、开启footer背景" class="headerlink" title="十二、开启footer背景"></a>十二、开启footer背景</h2><p>在<strong>主题配置文件</strong>中找到 <code>footer_bg</code>, 将属性改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Footer Background</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184443954.png" alt="footer设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184504591.png" alt="footer效果"></p><p><code>footer</code> 背景与 <code>top_img</code> 相同</p><hr><h2 id="十三、文章页相关显示"><a href="#十三、文章页相关显示" class="headerlink" title="十三、文章页相关显示"></a>十三、文章页相关显示</h2><h3 id="13-1-文章信息显示"><a href="#13-1-文章信息显示" class="headerlink" title="13.1 文章信息显示"></a>13.1 文章信息显示</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># Home Page</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章頁日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228103654240.png" alt="文章页主页 &amp; 主页文章信息设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228104912258.png" alt="文章页信息"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228104937545.png" alt="文章页信息"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228105002357.png" alt="首页文章信息"></p><h3 id="13-2-文章页版权信息显示"><a href="#13-2-文章页版权信息显示" class="headerlink" title="13.2 文章页版权信息显示"></a>13.2 文章页版权信息显示</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">true</span> <span class="comment">#true, 显示中文网址, 防止被解码</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228104816325.png" alt="版权信息设置"></p><h3 id="13-3-打赏设置"><a href="#13-3-打赏设置" class="headerlink" title="13.3 打赏设置"></a>13.3 打赏设置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/微信收款码.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">wechat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/支付宝收款码.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">alipay</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228105155530.png" alt="打赏设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228105215672.png" alt="打赏"></p><h3 id="13-4-目录设置"><a href="#13-4-目录设置" class="headerlink" title="13.4 目录设置"></a>13.4 目录设置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 文章页是否显示目录</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span> <span class="comment"># 普通页面是否显示目录</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span> <span class="comment"># 是否显示章节数</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">true</span> <span class="comment"># 是否展开目录</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># 简洁模式 (侧边栏只显示目录, 只对文章页有效)</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228105841559.png" alt="目录设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228110508251.png" alt="目录"></p><hr><h2 id="十四、相关推荐"><a href="#十四、相关推荐" class="headerlink" title="十四、相关推荐"></a>十四、相关推荐</h2><p>根据文章标签的比重来推荐</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">updated</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228110841657.png" alt="相关推荐"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228111047789.png" alt="相关推荐"></p><hr><h2 id="十五、文章分页"><a href="#十五、文章分页" class="headerlink" title="十五、文章分页"></a>十五、文章分页</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分頁)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: 下一篇显示旧文章</span></span><br><span class="line"><span class="comment"># 2: 下一篇显示新文章</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228155832558.png" alt="文章分页"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228155924656.png" alt="下一篇显示新文章"></p><hr><h2 id="十六、复制相关设置"><a href="#十六、复制相关设置" class="headerlink" title="十六、复制相关设置"></a>十六、复制相关设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228161705353.png" alt="复制设置"></p><hr><h2 id="十七、页脚文本-amp-起始年份"><a href="#十七、页脚文本-amp-起始年份" class="headerlink" title="十七、页脚文本 &amp; 起始年份"></a>十七、页脚文本 &amp; 起始年份</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">月华.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">这</span> <span class="string">就</span> <span class="string">是</span> <span class="string">我</span> <span class="string">的</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://github.com/yuehua-HNU/&quot;&gt;逃</span> <span class="string">跑</span> <span class="string">路</span> <span class="string">线&lt;/a&gt;</span> <span class="string">！</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228163711751.png" alt="页脚文本 &amp; 起始年份设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228163730009.png" alt="页脚文本 &amp; 起始年份"></p><hr><h2 id="十八、右下角按钮"><a href="#十八、右下角按钮" class="headerlink" title="十八、右下角按钮"></a>十八、右下角按钮</h2><h3 id="18-1-简繁转换"><a href="#18-1-简繁转换" class="headerlink" title="18.1 简繁转换"></a>18.1 简繁转换</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># 网站默认语言 (1 - 繁体中文/ 2 - 简体中文）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># 当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228164315391.png" alt="简繁转换"></p><h3 id="18-2-夜间模式"><a href="#18-2-夜间模式" class="headerlink" title="18.2 夜间模式"></a>18.2 夜间模式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228164444790.png" alt="夜间模式"></p><h3 id="18-3-阅读模式"><a href="#18-3-阅读模式" class="headerlink" title="18.3 阅读模式"></a>18.3 阅读模式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read Mode (閲讀模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228164633176.png" alt="阅读模式"></p><h3 id="18-4-按钮排序"><a href="#18-4-按钮排序" class="headerlink" title="18.4 按钮排序"></a>18.4 按钮排序</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要請不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重複</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="string">readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228164836744.png" alt="按钮排序"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228164901153.png" alt="右下角按钮"></p><hr><h2 id="十九-、侧边栏设置"><a href="#十九-、侧边栏设置" class="headerlink" title="十九 、侧边栏设置"></a>十九 、侧边栏设置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aside (側邊欄)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span> <span class="comment"># 是否隐藏</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right， 展示位置</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">我连宇宙的尽头在哪都不知道，怎么知道这个</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-sharp</span> <span class="string">fa-solid</span> <span class="string">fa-plane</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">快来一起玩</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/yuehua-HNU</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">图床那篇因为图片隐私问题还在修改,</span> <span class="string">无限期后应该就改完了,</span> <span class="string">哎嘿(doge)</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">updated</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">0</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="literal">true</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">4</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># busuanzi count for PV / UV in site</span></span><br><span class="line"><span class="comment"># 訪問人數</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">12</span><span class="string">/1/2022</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line"><span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Aside widget - Newest Comments (最新评论)</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h2 id="二十、分享"><a href="#二十、分享" class="headerlink" title="二十、分享"></a>二十、分享</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221228194105137.png" alt="分享设置"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229102840473.png" alt="分享"></p><hr><h2 id="二十一、搜索系统"><a href="#二十一、搜索系统" class="headerlink" title="二十一、搜索系统"></a>二十一、搜索系统</h2><p>终端输入指令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在<strong>博客配置文件</strong>中添加以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131194059953.png" alt="添加"></p><p>在<strong>主题配置文件</strong>中开启本地搜索</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131194234756.png" alt="开启"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20230131194550323.png" alt="预览"></p><hr><h2 id="二十二、美化与特效"><a href="#二十二、美化与特效" class="headerlink" title="二十二、美化与特效"></a>二十二、美化与特效</h2><h3 id="22-1-自定义主题颜色"><a href="#22-1-自定义主题颜色" class="headerlink" title="22.1 自定义主题颜色"></a>22.1 自定义主题颜色</h3><p>将<strong>主题配置文件</strong>中的theme_color解注, 颜色值必须被双引号包裹</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme_color:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">&quot;#595219&quot;</span> <span class="comment"># 主题</span></span><br><span class="line">  <span class="attr">paginator:</span> <span class="string">&quot;#4819b4&quot;</span> <span class="comment"># 页码</span></span><br><span class="line">  <span class="attr">button_hover:</span> <span class="string">&quot;#d6b10d&quot;</span> <span class="comment"># 鼠标放置按钮</span></span><br><span class="line">  <span class="attr">text_selection:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment"># 文字选择</span></span><br><span class="line">  <span class="attr">link_color:</span> <span class="string">&quot;#99a9bf&quot;</span>  <span class="comment"># 链接</span></span><br><span class="line">  <span class="attr">meta_color:</span> <span class="string">&quot;#858585&quot;</span> <span class="comment"># 标签</span></span><br><span class="line">  <span class="attr">hr_color:</span> <span class="string">&quot;#212121&quot;</span> <span class="comment"># 滚动块</span></span><br><span class="line">  <span class="attr">code_foreground:</span> <span class="string">&quot;#F47466&quot;</span> <span class="comment"># 代码前景</span></span><br><span class="line">  <span class="attr">code_background:</span> <span class="string">&quot;rgba(27, 31, 35, .05)&quot;</span> <span class="comment"># 代码背景</span></span><br><span class="line">  <span class="attr">toc_color:</span> <span class="string">&quot;#00c4b6&quot;</span> <span class="comment"># 目录</span></span><br><span class="line">  <span class="attr">blockquote_padding_color:</span> <span class="string">&quot;#49b1f5&quot;</span> <span class="comment"># 引用快</span></span><br><span class="line">  <span class="attr">blockquote_background_color:</span> <span class="string">&quot;#49b1f5&quot;</span> <span class="comment"># 引用块背景</span></span><br><span class="line">  <span class="attr">scrollbar_color:</span> <span class="string">&quot;#ff8800&quot;</span> <span class="comment"># 滚动条</span></span><br><span class="line">  <span class="attr">meta_theme_color_light:</span> <span class="string">&quot;#0d0d0d&quot;</span> <span class="comment"># 主题块颜色</span></span><br><span class="line">  <span class="attr">meta_theme_color_dark:</span> <span class="string">&quot;#0d0d0d&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229103736008.png" alt="主题颜色设置"></p><h3 id="22-2-打字特效"><a href="#22-2-打字特效" class="headerlink" title="22.2 打字特效"></a>22.2 打字特效</h3><p>enable改为true</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202110102892.png" alt="打字特效设置"></p><h3 id="22-3-鼠标点击特效"><a href="#22-3-鼠标点击特效" class="headerlink" title="22.3 鼠标点击特效"></a>22.3 鼠标点击特效</h3><p>三选一</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: words (鼠標點擊效果: 文字)</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202110255671.png" alt="鼠标点击特效设置"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击出现文字，文字可自行修改</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">I</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LOVE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span> <span class="comment"># 文字随机显示</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229104009583.png" alt="鼠标点击出现文字"></p><h3 id="22-4-自定义字体和字体大小"><a href="#22-4-自定义字体和字体大小" class="headerlink" title="22.4 自定义字体和字体大小"></a>22.4 自定义字体和字体大小</h3><p>可更改全局或Blog标题字体以及大小</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">&quot;思源宋体 SemiBold&quot;</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202111201068.png" alt="自定义字体大小设置"></p><h3 id="22-5-页面美化"><a href="#22-5-页面美化" class="headerlink" title="22.5 页面美化"></a>22.5 页面美化</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Beautify (美化頁面顯示)</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post , site -- 全站 ; post -- 文章页</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="comment"># &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="comment"># &#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229104251172.png" alt="页面美化设置"></p><h3 id="22-6-字体和字体大小"><a href="#22-6-字体和字体大小" class="headerlink" title="22.6 字体和字体大小"></a>22.6 字体和字体大小</h3><ul><li>全局字体</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">&quot;思源宋体 SemiBold&quot;</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229104615746.png" alt="字体和字体大小"></p><ul><li>博客导航栏标题字体</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Font settings for the site title and site subtitle</span></span><br><span class="line"><span class="comment"># 左上角網站名字 主頁居中網站名字</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229110736599.png" alt="博客导航栏标题字体"></p><h3 id="22-7-网站副标题"><a href="#22-7-网站副标题" class="headerlink" title="22.7 网站副标题"></a>22.7 网站副标题</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Effect Speed Options (打字效果速度參數)</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">300</span> <span class="comment"># time before typing starts in milliseconds</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">150</span> <span class="comment"># type speed in milliseconds</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">50</span> <span class="comment"># backspacing speed in milliseconds</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source 調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">“最是人间留不住，朱颜辞镜花辞树”</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">“人生而自由，却无往不在枷锁中”</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">“我只知道一件事，就是我什么都不知道。”</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">“未经审视的人生不值得过。”</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202111249597.png" alt="网站副标题"></p><h3 id="22-8-页面加载动画"><a href="#22-8-页面加载动画" class="headerlink" title="22.8 页面加载动画"></a>22.8 页面加载动画</h3><p>事例: <code>hyperspace(星际穿越)</code> 来源: <a href="https://akilar.top/posts/3d221bf2/">https://akilar.top/posts/3d221bf2/</a></p><p>随便在哪里创建一个<code>hyperspace.pug</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#loading-box</span><br><span class="line">  .space-scene</span><br><span class="line">    .space-wrap</span><br><span class="line">      .space-wall.space-wall-right</span><br><span class="line">      .space-wall.space-wall-left</span><br><span class="line">      .space-wall.space-wall-top</span><br><span class="line">      .space-wall.space-wall-bottom</span><br><span class="line">      .space-wall.space-wall-back</span><br><span class="line">    .space-wrap</span><br><span class="line">      .space-wall.space-wall-right</span><br><span class="line">      .space-wall.space-wall-left</span><br><span class="line">      .space-wall.space-wall-top</span><br><span class="line">      .space-wall.space-wall-bottom</span><br><span class="line">      .space-wall.space-wall-back</span><br></pre></td></tr></table></figure><p>和一个<code>hyperspace.styl</code>文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#loading-box</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">1000</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">100vw</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">100vh</span></span><br><span class="line">  <span class="attribute">overflow</span> hidden</span><br><span class="line">  <span class="attribute">text-align</span> center</span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">rgba</span>(<span class="number">236</span>,<span class="number">236</span>,<span class="number">236</span>,<span class="number">0.95</span>)</span><br><span class="line">  <span class="attribute">text-align</span> center</span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">vertical-align</span> middle</span><br><span class="line">  &amp;<span class="selector-class">.loaded</span></span><br><span class="line">    <span class="attribute">z-index</span> -<span class="number">1000</span></span><br><span class="line">    <span class="selector-class">.space-scene</span></span><br><span class="line">      <span class="attribute">display</span> none</span><br><span class="line">  <span class="selector-class">.space-wall</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">url</span>(https://s3-us-west-<span class="number">2</span>.amazonaws.com/s.cdpn.io/<span class="number">18515</span>/PIA09959-<span class="number">1280</span>x800_copy.jpg)</span><br><span class="line">    <span class="attribute">background-size</span> cover</span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">animation</span> space-fade <span class="number">12s</span> infinite linear</span><br><span class="line">    <span class="attribute">animation-delay</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-scene</span></span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">vertical-align</span> middle</span><br><span class="line">    <span class="attribute">perspective</span> <span class="number">5px</span></span><br><span class="line">    <span class="attribute">perspective-origin</span> <span class="number">50%</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">position</span> relative</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wrap</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">width</span> <span class="number">1000px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">1000px</span></span><br><span class="line">    <span class="attribute">left</span> -<span class="number">500px</span></span><br><span class="line">    <span class="attribute">top</span> -<span class="number">500px</span></span><br><span class="line">    <span class="attribute">transform-style</span> preserve-<span class="number">3</span>d</span><br><span class="line">    <span class="attribute">animation</span> space-move <span class="number">12s</span> infinite linear</span><br><span class="line">    <span class="attribute">animation-fill-mode</span> forwards</span><br><span class="line">    <span class="selector-pseudo">&amp;:nth-child</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="attribute">animation</span> space-move <span class="number">12s</span> infinite linear</span><br><span class="line">      <span class="attribute">animation-delay</span> <span class="number">6s</span></span><br><span class="line">      <span class="selector-class">.space-wall</span></span><br><span class="line">        <span class="attribute">animation-delay</span> <span class="number">6s</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wall-right</span></span><br><span class="line">    <span class="attribute">transform</span> <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">500px</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wall-left</span></span><br><span class="line">    <span class="attribute">transform</span> <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">500px</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wall-top</span></span><br><span class="line">    <span class="attribute">transform</span> <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">500px</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wall-bottom</span></span><br><span class="line">    <span class="attribute">transform</span> <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">500px</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.space-wall-back</span></span><br><span class="line">    <span class="attribute">transform</span> <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">500px</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> space-move &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">500px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">500px</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> space-fade &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到<code>hexo-theme-butterfly/layout/loading/fullpage-loading.pug</code>, </p><p>用<code>hyperspace.pug</code>中<code>#loading-box</code>的部分替换<code>fullpage-loading.pug</code>下的<code>#loading-box</code>部分</p><p>找到<code>hexo-theme-butterfly/source/css/_layout/loading.styl</code>, </p><p>用<code>hyperspace.styl</code>中<code>#loading-box</code>的部分替换<code>loading.styl</code>下的<code>#loading-box</code>部分</p><p><strong>注意缩进</strong></p><p>将配置文件中的<code>enable</code>改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source</span></span><br><span class="line">  <span class="comment"># 1. fullpage-loading</span></span><br><span class="line">  <span class="comment"># 2. pace (progress bar)</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># pace theme (see https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br></pre></td></tr></table></figure><p>重新加载界面即可设置完成</p><hr><h2 id="二十三、字数统计"><a href="#二十三、字数统计" class="headerlink" title="二十三、字数统计"></a>二十三、字数统计</h2><h3 id="23-1-全局安装cnpm"><a href="#23-1-全局安装cnpm" class="headerlink" title="23.1 全局安装cnpm"></a>23.1 全局安装cnpm</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184923110.png" alt="安装cnpm"></p><h3 id="23-2-安装插件"><a href="#23-2-安装插件" class="headerlink" title="23.2 安装插件"></a>23.2 安装插件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201184951204.png" alt="安装字数统计插件"></p><h3 id="23-3-开启wordcount"><a href="#23-3-开启wordcount" class="headerlink" title="23.3 开启wordcount"></a>23.3 开启wordcount</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="comment"># see https://butterfly.js.org/posts/ceeb73f/#字數統計</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201185129809.png" alt="开启Wordcount"></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221202101829797.png" alt="字数统计"></p><hr><h2 id="二十四、Snackbar-弹窗"><a href="#二十四、Snackbar-弹窗" class="headerlink" title="二十四、Snackbar 弹窗"></a>二十四、Snackbar 弹窗</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Snackbar (Toast Notification 彈窗)</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># position 彈窗位置</span></span><br><span class="line"><span class="comment"># 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span> <span class="comment"># The background color of Toast Notification in light mode</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#1f1f1f&#x27;</span> <span class="comment"># The background color of Toast Notification in dark mode</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229113037208.png" alt="弹窗设置"></p><hr><h2 id="二十五、Pangu"><a href="#二十五、Pangu" class="headerlink" title="二十五、Pangu"></a>二十五、Pangu</h2><blockquote><p>这个外挂会自动替你在网页中所有的中文字和半形的英文、数字、符号之间插入空白。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="comment"># Insert a space between Chinese character and English character (中英文之間添加空格)</span></span><br><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post, site -- 全站, post -- 文章页</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229114125320.png" alt="Pangu外挂"></p><hr><h2 id="二十六、CSS-前缀"><a href="#二十六、CSS-前缀" class="headerlink" title="二十六、CSS 前缀"></a>二十六、CSS 前缀</h2><blockquote><p>自动为一些 CSS 增加前缀。（会增加 20%的体积）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add the vendor prefixes to ensure compatibility</span></span><br><span class="line"><span class="attr">css_prefix:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229114315133.png" alt="开启CSS前缀"></p><hr><h2 id="二十七、Open-Graph"><a href="#二十七、Open-Graph" class="headerlink" title="二十七、Open Graph"></a>二十七、Open Graph</h2><blockquote><p>在 head 里增加一些 meta 资料，例如缩略图、标题、时间等等。当你分享网页到一些平台时，平台会读取 Open Graph 的内容，展示缩略图，标题等等信息。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Open graph meta tags</span></span><br><span class="line"><span class="comment"># https://developers.facebook.com/docs/sharing/webmasters/</span></span><br><span class="line"><span class="attr">Open_Graph_meta:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="comment"># twitter_card:</span></span><br><span class="line">    <span class="comment"># twitter_image:</span></span><br><span class="line">    <span class="comment"># twitter_id:</span></span><br><span class="line">    <span class="comment"># twitter_site:</span></span><br><span class="line">    <span class="comment"># google_plus:</span></span><br><span class="line">    <span class="comment"># fb_admins:</span></span><br><span class="line">    <span class="comment"># fb_app_id:</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229115148880.png" alt="Open_Graph_meta"></p><hr><h2 id="二十八、Instantpage"><a href="#二十八、Instantpage" class="headerlink" title="二十八、Instantpage"></a>二十八、Instantpage</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://instant.page/</span></span><br><span class="line"><span class="comment"># prefetch (預加載)</span></span><br><span class="line"><span class="attr">instantpage:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221229115240805.png" alt="Instantpage"></p>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 美化 </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的图床</title>
      <link href="/2022/12/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/12/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建自己的图床"><a href="#搭建自己的图床" class="headerlink" title="搭建自己的图床"></a>搭建自己的图床</h1><h2 id="SSH远程链接服务器"><a href="#SSH远程链接服务器" class="headerlink" title="SSH远程链接服务器"></a>SSH远程链接服务器</h2><p>首先购买一个服务器</p><p>打开powershell(cmd应该也可以)</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205514531.png" alt="image-20221130205514531"></p><p>通过powershell通过账号密码远程链接服务器(可以直接在腾讯云重置密码的)</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205612218.png" alt="image-20221130205612218"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205618590.png" alt="image-20221130205618590"></p><p>输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@IP地址</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205810179.png" alt="image-20221130205810179"></p><p>是否添加记录值</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205846719.png" alt="image-20221130205846719"></p><p>输入密码后成功登录</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130205905989.png" alt="image-20221130205905989"></p><p>进入宝塔面板官网Linux版执行安装脚本(Debian)</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210116797.png" alt="image-20221130210116797"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh ed8484bec</span><br></pre></td></tr></table></figure><p>选y进行安装</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210146953.png" alt="image-20221130210146953"></p><p>安装好后去服务器后台放行端口</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210326605.png" alt="image-20221130210326605"></p><p>复制端口号</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210437999.png" alt="image-20221130210437999"></p><p>打开腾讯云</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210450477.png" alt="image-20221130210450477"></p><p>添加防火墙</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210526683.png" alt="image-20221130210526683"></p><p>输入端口</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210553346.png" alt="image-20221130210553346"></p><p>复制外网访问地址到主机(不是服务器!)访问宝塔面板</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130210636267.png" alt="image-20221130210636267"></p><p>进入面板, 弹窗直接关闭</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130211040061.png" alt="image-20221130211040061"></p><p>进入软件商店</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130211053504.png" alt="image-20221130211053504"></p><p>安装Nginx</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130211121753.png" alt="image-20221130211121753"></p><p>选编译安装</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130211140569.png" alt="image-20221130211140569"></p><p>开始漫长等待</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130211708495.png" alt="image-20221130211708495"></p><p>安装完成</p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130212058768.png" alt="image-20221130212058768"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130212128676.png" alt="image-20221130212128676"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130212404828.png" alt="image-20221130212404828"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130212529247.png" alt="image-20221130212529247"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git -y</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130212923086.png" alt="image-20221130212923086"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot; &#x27;&#123; print $1&quot;|&quot;$3&quot;|&quot;$4 &#125;&#x27;|more</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213101011.png" alt="image-20221130213101011"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213200229.png" alt="image-20221130213200229"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213319755.png" alt="image-20221130213319755"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /www/wwwroot/域名</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213423701.png" alt="image-20221130213423701"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213622426.png" alt="image-20221130213622426"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su - git</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213722467.png" alt="image-20221130213722467"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130213950940.png" alt="image-20221130213950940"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare -b main imagehost.git</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130214046676.png" alt="image-20221130214046676"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130214651259.png" alt="image-20221130214651259"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/www/wwwroot/域名 --git-dir=/home/git/images/imagehost.git checkout -f</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130214643641.png" alt="image-20221130214643641"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130214734521.png" alt="image-20221130214734521"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@域名:/home/git/images/imagehost.git</span><br></pre></td></tr></table></figure><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130215029123.png" alt="image-20221130215029123"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130220106641.png" alt="image-20221130220106641"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130220214705.png" alt="image-20221130220214705"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221130220321697.png" alt="image-20221130220321697"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221201073654313.png" alt="image-20221201073654313"></p><p><img src="D:\AppData\AppData\Typora\typora-user-images\image-20221201074626549.png" alt="image-20221201074626549"></p>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客历程</title>
      <link href="/2022/12/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/12/01/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客历程"><a href="#搭建个人博客历程" class="headerlink" title="搭建个人博客历程"></a>搭建个人博客历程</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我的博客使用的是 <code>Hexo</code> + <code>GitHub</code> 搭建在线博客，主题用的是 <code>Butterfly</code>，教程及官方文档均可在网上找到，我只是在这里记录一些自己的感受，以防以后玩崩了找不到回家的路</p><p>参考文档:</p><p>余白的分享:<a href="https://www.vipyubai.top/post/a42befc0.html">https://www.vipyubai.top/post/a42befc0.html</a></p><p>三水的分享:<a href="https://sanshui.vip/2022/08/10/indexday1/">https://sanshui.vip/2022/08/10/indexday1/</a></p><p>Butterfly安装文档:<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a></p><hr><h2 id="二、搭建博客"><a href="#二、搭建博客" class="headerlink" title="二、搭建博客"></a>二、搭建博客</h2><h3 id="2-1-全局安装-Hexo"><a href="#2-1-全局安装-Hexo" class="headerlink" title="2.1 全局安装 Hexo"></a>2.1 全局安装 <code>Hexo</code></h3><p><code>win + R</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>随便找一个空文件夹作为 <code>Hexo</code> 的根目录，在这个根目录安装 <code>Hexo</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201080622513.png" alt="安装hexo"></p><h3 id="2-2-初始化根目录"><a href="#2-2-初始化根目录" class="headerlink" title="2.2 初始化根目录"></a>2.2 初始化根目录</h3><p>初始化根目录，输入以下两条指令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201082833976.png" alt="初始化根目录"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201082844509.png" alt="安装依赖"></p><h3 id="2-3-启动-Hexo-服务"><a href="#2-3-启动-Hexo-服务" class="headerlink" title="2.3 启动 Hexo 服务"></a>2.3 启动 <code>Hexo</code> 服务</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201081031095.png" alt="启动本地hexo"></p><h3 id="2-4-进入本地4000端口"><a href="#2-4-进入本地4000端口" class="headerlink" title="2.4 进入本地4000端口"></a>2.4 进入本地4000端口</h3><p>此时在本地的4000端口可以看到超级毛坯版的个人博客</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201081043798.png" alt="个人博客毛坯版"></p><hr><h2 id="三、网页美化"><a href="#三、网页美化" class="headerlink" title="三、网页美化"></a>三、网页美化</h2><h3 id="3-1-安装-butterfly（我是-npm-安装）"><a href="#3-1-安装-butterfly（我是-npm-安装）" class="headerlink" title="3.1 安装 butterfly（我是 npm 安装）"></a>3.1 安装 <code>butterfly</code>（我是 <code>npm</code> 安装）</h3><p>在 <code>Hexo</code> 根目录输入以下指令安装 <code>butterfly</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>值得一提的是通过 <code>npm</code> 安装并不会在 <code>themes</code> 里生成主题文件夹，而是在 <code>node_modules</code> 里生成</p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201083421150.png" alt="将node_modules中的_config.butterfly.yml文件复制到根目录"></p><h3 id="3-2-修改-博客配置文件-主题信息"><a href="#3-2-修改-博客配置文件-主题信息" class="headerlink" title="3.2 修改 博客配置文件 主题信息"></a>3.2 修改 <em>博客配置文件</em> 主题信息</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS:从此开始</span><br><span class="line">博客配置文件=Hexo根目录中的_config.yml文件</span><br><span class="line">主题配置文件=_config.butterfly.yml文件</span><br></pre></td></tr></table></figure><p>将 <code>_config.yml</code> 文件中最下面的 <code>theme</code> 改为 <code>butterfly</code></p><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201083503332.png" alt="修改主题为butterfly"></p><h3 id="3-3-安装插件"><a href="#3-3-安装插件" class="headerlink" title="3.3 安装插件"></a>3.3 安装插件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201083610537.png" alt="安装插件"></p><h3 id="3-4-重启服务"><a href="#3-4-重启服务" class="headerlink" title="3.4 重启服务"></a>3.4 重启服务</h3><p>在编译器终端中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除缓存</span><br><span class="line">hexo g # 生成界面</span><br><span class="line">hexo s # 启动Hexo服务</span><br></pre></td></tr></table></figure><p><img src="https://yuehua-hnu-1313248262.cos.ap-nanjing.myqcloud.com/typora/image-20221201083758613.png" alt="简装版博客"></p>]]></content>
      
      
      <categories>
          
          <category> Docs文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Butterfly </tag>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
